<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlantsMikuRun</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objPlantsEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
sprite_index = sprPlantsMikuRun;
image_speed = 0;
for(var i=0; i&lt;4; i++){
    cherry[i] = noone;
}
cherriesLeft = 0;
hp = 10;
scrPlantsGoreInit(2);
spawnDelay = 0;
eatingIndex = 0;
glowAlpha = 0;
minDistanceBetweenSpawns = 120;
snd = -1;
subimg = 0;
danceTimer = 0;
activatedOnce = false;
automaticShadowInputs = false;
pushWeightMult = 0.8;

//sprite part offsets
runBodyX = 0;
runBodyY = 9;
runArmX = 1;
runArmY = 5;
runHeadX = 0;
runHeadY = -9;
runHairX = 11;
runHairY = -16;

eatBodyX = 0;
eatBodyY = 0;
eatArmX = 3;
eatArmY = 6;
eatHeadX = 0;
eatHeadY = -7;

idleBodyX = 0;
idleBodyY = 0;
idleArmX = 0;
idleArmY = 0;
idleHeadX = 0;
idleHeadY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resume running
if (!frozen){
    sprite_index = sprPlantsMikuRun;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create cherry spinner
if (!dead  &amp;&amp;  !frozen){
    var _inst;
    _inst = instance_create(x, y, objPlantsMikuSpinner);
    _inst.miku = id;
    _inst.row = row;
    for(var i=0; i&lt;4; i++){
        _inst.cherry[i] = cherry[i];
    }
    
    if (!activatedOnce){
        _inst = instance_create(x, y, objPlantsMikuSpotlight);
        _inst.following = id;
        activatedOnce = true; //don't add another if miku creates more cherries
    }
    
    alarm[1] = 75;
    danceTimer = 90;
    with (objPlantsMikuEffectCtrl){event_user(1);}  //music
    /*  // No longer treated as music
    if (!global.muteMusic &amp;&amp; global.musicLevel &gt; 0 &amp;&amp; global.volumeLevel &gt; 0){
        var snd = audio_play_sound(sndPlantsMiku, 0, 0);
        audio_sound_gain(snd, global.musicLevel/100 * global.volumeLevel/100, 0);
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    var _attackingPrev = attacking;
    
    if (pushAmt &gt; 0){
        if (sprite_index == sprPlantsMikuIdle){
            sprite_index = sprPlantsMikuRun;
            alarm[0] = -1;
            alarm[1] = -1;
        }
    }
    scrPlantsEnemyStep();
    
    if (_attackingPrev != attacking){
        eatingIndex = 0; //reset eating animation
    }
    
    if (activatedOnce){
        danceTimer ++;
        
        var _dancePos = (danceTimer mod 165);
        var _pauseStart = 90;
        var _pauseEnd = 150;
        if (!instance_exists(attacking)){
            if (_dancePos &gt;= _pauseStart &amp;&amp; _dancePos &lt; _pauseEnd){
                sprite_index = sprPlantsMikuIdle;
            }else{
                sprite_index = sprPlantsMikuRun;
            }
        }
    }
    
    if (!dead){
        if (!instance_exists(attacking) &amp;&amp; sprite_index == sprPlantsMikuRun &amp;&amp; pushAmt &lt;= 0){
            x -= 0.75;
        }
        
        var _cherries = 0;
        for(var i=0; i&lt;4; i++){
            with (cherry[i]){
                if (!dead){
                    _cherries ++;
                }
            }
        }
        if (spawnDelay &gt; 0){spawnDelay --;}
        if (spawnDelay &lt;= 0 &amp;&amp; (!activatedOnce || _dancePos == _pauseStart) &amp;&amp; (x &gt;= 352 &amp;&amp; x &lt; 640) &amp;&amp; (_cherries &lt;= 1 || (_cherries &lt;= 2 &amp;&amp; (row != 0 || row != 5)))){ //if row == 0 or 5 one cherry will always be unable to spawn
            spawnDelay = 420;
            sprite_index = sprPlantsMikuIdle;
            alarm[0] = 15;
        }
        
        if (sprite_index == sprPlantsMikuRun){
            subimg += 0.15;
        }else if (sprite_index == sprPlantsMikuIdle){
            subimg += 0.1;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Over `killing` animation
if (killingState == 0){
    sprite_index = sprPlantsMikuIdle;
    alarm[0] = -1;
    alarm[1] = -1;
}else if (killingState == 1){
    var _proj;
    _proj = instance_create(x, y-4*image_yscale, objPlantsEnemyBullet);
    _proj.row = 5;
    _proj.yBase = 999;
    _proj.direction = point_direction(_proj.x, _proj.y, objPlantsPlayerCage.x, objPlantsPlayerCage.y);
    _proj.speed = 12;
    
    _proj.sprite_index = sprCherry;
    _proj.image_speed = 1/15;
    _proj.shadowType = 1;
    _proj.frozen = true;
    _proj.scale = true;
    _proj.scaleTo = 1;
    _proj.scaleInc = 0.125;
    _proj.image_xscale = 0;
    _proj.image_yscale = 0;
    audio_play_sound(sndMakerSampleThrow, 0, 0);
    
    alarm[1] = 20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set shadow inputs and inherit
shadowInputWidth =  36*image_xscale;
shadowInputHeight = 30*image_yscale;
shadowY = y + 16*image_yscale;
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///eating
if (!dead &amp;&amp; instance_exists(attacking) &amp;&amp; attackingTimerLen != 0){
    eatingIndex += 4/attackingTimerLen;
    if (eatingIndex &gt;= (sprite_get_number(sprPlantsMikuEatHead)/2)){
        eatingIndex = 0;
        with (attacking){
            hp -= 1;
            event_user(1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///death
if (!dead &amp;&amp; !killing){
    var _index = 0;
    //subimage
    if (sprite_index == sprPlantsMikuRun){
        var _peak = 6;
        image_index = abs(((floor(subimg) + (_peak)) mod (2*_peak)) - _peak);
    }else if (sprite_index == sprPlantsMikuIdle){
        image_index = floor(subimg) mod 10;
    }else if (sprite_index == sprPlantsMikuEat){
        image_index = floor(eatingIndex) mod 4;
    }
    
    event_inherited();
    
    // add one extra piece of gore
    goreAmt ++;
    
    gore[2] = instance_create(x, y, objPlantsMikuBodyGore);
    if (sprite_index == sprPlantsMikuRun){
        gore[2].y += 9*image_yscale;
    }
    gore[2].sprite_index = sprite_index;
    gore[2].subimg = subimg;
    dead = true;
    if (sprite_index == sprPlantsMikuRun){
        gore[2].subimgSpd = 0.15;
    }else if (sprite_index == sprPlantsMikuIdle){
        gore[2].subimgSpd = 0.1;
    }
    
    if (audio_is_playing(snd)){
        audio_sound_gain(snd, 0, 400);
    }
    
    for (var i=0; i&lt;4; i++){
        if (instance_exists(cherry[i])){
            cherry[i].danceTimer = danceTimer-1;
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///damage
if (!dead &amp;&amp; !killing){
    event_inherited();
    if (hp &lt;= 3 &amp;&amp; bodyState == 0){
        event_user(4);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
var _glowAlpha = 0;
if (glowFrame &gt; 0){
    _glowAlpha = scrPlantsGlow(glowFrame, glowLen);
}

//sprite part offsets
var _eatHeadX = 0;
var _eatHairY = -7;

if (instance_exists(gore[1])){
    with (gore[1]){
        if (sprite_index == sprPlantsMikuRun &amp;&amp; state == 1){
            var _rotCoords = scrChangeOrigin(0, 0, -other.runHairX, -(other.runHairY - (-9)), image_angle);
            draw_sprite_ext(sprPlantsMikuRunHair, (floor(other.subimg) mod 7), floor(x) + _rotCoords[0]*image_xscale, floor(y) + _rotCoords[1]*image_yscale, 1, 1, image_angle, c_white, image_alpha); //back braid
            if (_glowAlpha &gt; 0){
                draw_sprite_ext(sprPlantsMikuRunHair, (floor(other.subimg) mod 7), floor(x) + _rotCoords[0]*image_xscale, floor(y) + _rotCoords[1]*image_yscale, 1, 1, image_angle, c_white, _glowAlpha); //back braid
            }
        }
    }
}

if (!dead || crushed){
    scrPlantsCrushStart(64, 128 - 21*image_yscale);
    
    if (instance_exists(attacking)){
        var _headFrame, _index;
        _index = floor(eatingIndex) mod 4;
        draw_sprite_ext(sprPlantsMikuEat, floor(eatingIndex) mod 2, floor(x) + eatBodyX*image_xscale, floor(y) + eatBodyY*image_yscale, image_xscale, image_yscale, image_angle, c_white, 1);
        if (bodyState == 0){
            draw_sprite_ext(sprPlantsMikuEatArm, _index, floor(x) + eatArmX*image_xscale, floor(y) + eatArmY*image_yscale, image_xscale, image_yscale, image_angle, c_white, 1);
        }
        if (bodyState &lt; 2){
            draw_sprite_ext(sprPlantsMikuEatHead, _index, floor(x) + eatHeadX*image_xscale, floor(y) + eatHeadY*image_yscale, image_xscale, image_yscale, image_angle, c_white, 1);
        }
        if (_glowAlpha &gt; 0){
            draw_sprite_ext(sprPlantsMikuEat, (floor(eatingIndex) mod 2) + 2, floor(x) + eatBodyX*image_xscale, floor(y) + eatBodyY*image_yscale, image_xscale, image_yscale, image_angle, c_white, _glowAlpha);
            if (bodyState == 0){
                draw_sprite_ext(sprPlantsMikuEatArm, _index + 4, floor(x) + eatArmX*image_xscale, floor(y) + eatArmY*image_yscale*image_yscale, image_xscale, image_yscale, image_angle, c_white, _glowAlpha);
            }
            if (bodyState &lt; 2){
                draw_sprite_ext(sprPlantsMikuEatHead, _index + 4, floor(x) + eatHeadX*image_xscale, floor(y) + eatHeadY*image_yscale*image_yscale, image_xscale, image_yscale, image_angle, c_white, _glowAlpha);
            }
        }
    }else if (sprite_index == sprPlantsMikuRun){
        var _peak = 6;
        var _index = (floor(subimg) mod 7);
        var _bodyindex = abs(((floor(subimg) + (_peak)) mod (2*_peak)) - _peak);
        if (bodyState &lt; 2){
            draw_sprite_ext(sprPlantsMikuRunHair, _index, floor(x) + runHairX*image_xscale, floor(y) + runHairY*image_yscale, image_xscale, image_yscale, image_angle, c_white, 1);
        }
        draw_sprite_ext(sprPlantsMikuRun, _bodyindex, floor(x) + runBodyX*image_xscale, floor(y) + runBodyY*image_yscale, image_xscale, image_yscale, image_angle, c_white, 1);
        if (bodyState == 0){
            draw_sprite_ext(sprPlantsMikuRunArm, _bodyindex, floor(x) + runArmX*image_xscale, floor(y) + runArmY*image_yscale, image_xscale, image_yscale, image_angle, c_white, 1);
        }
        if (bodyState &lt; 2){
            draw_sprite_ext(sprPlantsMikuRunHead, _index, floor(x) + runHeadX*image_xscale, floor(y) + runHeadY*image_yscale, image_xscale, image_yscale, image_angle, c_white, 1);
        }
        if (_glowAlpha &gt; 0){
            if (bodyState &lt; 2){
                draw_sprite_ext(sprPlantsMikuRunHair, _index + 7, floor(x) + runHairX*image_xscale, floor(y) + runHairY*image_yscale, image_xscale, image_yscale, image_angle, c_white, _glowAlpha);
            }
            draw_sprite_ext(sprPlantsMikuRun, _bodyindex + 7, floor(x) + runBodyX*image_xscale, floor(y) + runBodyY*image_yscale, image_xscale, image_yscale, image_angle, c_white, _glowAlpha);
            if (bodyState == 0){
                draw_sprite_ext(sprPlantsMikuRunArm, _bodyindex + 7, floor(x) + runArmX*image_xscale, floor(y) + runArmY*image_yscale, image_xscale, image_yscale, image_angle, c_white, _glowAlpha);
            }
            if (bodyState &lt; 2){
                draw_sprite_ext(sprPlantsMikuRunHead, _index + 7, floor(x) + runHeadX*image_xscale, floor(y) + runHeadY*image_yscale, image_xscale, image_yscale, image_angle, c_white, _glowAlpha);
            }
        }
    }else if (sprite_index == sprPlantsMikuIdle){
        var _index = (floor(subimg) mod 10);
        draw_sprite_ext(sprPlantsMikuIdle, _index, floor(x) + idleBodyX*image_xscale, floor(y) + idleBodyY*image_yscale, image_xscale, image_yscale, image_angle, c_white, 1);
        if (bodyState == 0){
            draw_sprite_ext(sprPlantsMikuIdleArm, _index, floor(x) + idleArmX*image_xscale, floor(y) + idleArmY*image_yscale, image_xscale, image_yscale, image_angle, c_white, 1);
        }
        if (bodyState &lt; 2){
            draw_sprite_ext(sprPlantsMikuIdleHead, _index, floor(x) + idleHeadX*image_xscale, floor(y) + idleHeadY*image_yscale, image_xscale, image_yscale, image_angle, c_white, 1);
        }
        if (_glowAlpha &gt; 0){
            draw_sprite_ext(sprPlantsMikuIdle, _index + 10, floor(x) + idleBodyX*image_xscale, floor(y) + idleBodyY*image_yscale, image_xscale, image_yscale, image_angle, c_white, _glowAlpha);
            if (bodyState == 0){
                draw_sprite_ext(sprPlantsMikuIdleArm, _index + 10, floor(x) + idleArmX*image_xscale, floor(y) + idleArmY*image_yscale, image_xscale, image_yscale, image_angle, c_white, _glowAlpha);
            }
            if (bodyState &lt; 2){
                draw_sprite_ext(sprPlantsMikuIdleHead, _index + 10, floor(x) + idleHeadX*image_xscale, floor(y) + idleHeadY*image_yscale, image_xscale, image_yscale, image_angle, c_white, _glowAlpha);
            }
        }
    }
    
    scrPlantsCrushEnd(crushTimer);
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
