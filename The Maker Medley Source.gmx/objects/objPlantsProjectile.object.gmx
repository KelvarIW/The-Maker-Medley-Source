<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerCannonball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>row = 0;
yBase = y;
projType = -1;
target = false; //spikes
targetX = x;
targetY = y;
attacking = noone; //spikes
behind = true;
collided = false;
colEffect = noone;
frozen = false;
visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delayed behavior
if (!frozen &amp;&amp; !collided){
    if (projType == 1){
        behind = false;
    }else if (projType == 2){
        if (collision_line(xstart, ystart, 800, ystart, objPlantsEnemy, false, true) != noone || collision_rectangle(xstart, ystart, 800, ystart-32, objPlantsSpike, false, true) != noone){
            target = true;
            behind = false;
        }else{
            alarm[1] = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Type-specific initialization
switch(projType){
    case 1: //Cannon
        sprite_index = sprMakerCannonball;
        image_speed = 1/15;
        hspeed = 4;
        alarm[1] = 9;
        break;
    case 2: //Spike
        sprite_index = sprPlantsSpike;
        image_speed = 1/4;
        vspeed = -3.5;
        alarm[1] = 12;
        //collision looks better with a smaller hitbox
        image_xscale = 1/2;//3/4;
        image_yscale = 1/2;//3/4;
        break;
}
if (frozen){
    speed = 0;
    alarm[1] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    if (!collided){
        if (projType == 1){
            if (bbox_right &gt;= 928){ //extra leeway for enemies bounced past the edge of the screen
                instance_destroy();
            }
        }else if (projType == 2){
            if (target){
                if (!instance_exists(attacking) || attacking.dead){
                    attacking = noone;
                    with (objPlantsIWBTGSpike){  // prioritize spikes over other plants
                        if (!dead &amp;&amp; row == other.row &amp;&amp; x &gt; other.x &amp;&amp; (!instance_exists(other.attacking) || (other.attacking).dead || (other.attacking).x &gt; x)){ //always attack the closest alive enemy on the same row, excluding those behind the turret.
                            other.attacking = id;
                        }
                    }
                    if (!instance_exists(attacking) || attacking.dead){  // did not find valid target
                        with (objPlantsEnemy){
                            if (!dead &amp;&amp; row == other.row &amp;&amp; x &gt; other.x &amp;&amp; (!instance_exists(other.attacking) || (other.attacking).dead || (other.attacking).x &gt; x)){ //always attack the closest alive enemy on the same row, excluding those behind the turret.
                                other.attacking = id;
                            }
                        }
                    }
                }
                if ((!instance_exists(attacking) || attacking.dead) &amp;&amp; (bbox_bottom &gt; yBase || bbox_bottom &lt;= 0)){
                    if (bbox_bottom &lt;= 0)
                        instance_destroy();
                    else{
                        event_user(1);
                    }
                    collided = true;
                }
                if (!collided){
                    var _dirTo;
                    if (instance_exists(attacking) &amp;&amp; !attacking.dead){
                        targetX = max(xstart, attacking.x - 12);
                        targetY = min(row*64 + 192, attacking.y);
                        _dirTo = point_direction(x, y, targetX, targetY);
                    }else{
                        _dirTo = 270;
                        if (direction == 90)
                            direction = 89.5;
                    }
                    
                    var _diff = angle_difference(direction, _dirTo);
                    direction -= min(abs(_diff), 10)*sign(_diff);
                    image_angle = direction-90;
                }
            }
            image_alpha = 1 - max(0, (ystart - y)/300);
            if (image_alpha &lt;= 0){
                instance_destroy();
            }else{
                image_xscale = 0.5 + max(0, (ystart - y)/450);
                image_yscale = 0.5 + max(0, (ystart - y)/450);
            }
        }
    }else{
        image_alpha -= 0.07;
        if (image_alpha &lt;= 0)
            instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlantsEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!(frozen || collided || other.dead || other.killing || other.row != row || (projType == 1 &amp;&amp; (behind || other.object_index == objPlantsIWBTGSpike)) || (projType == 2 &amp;&amp; !target))){
    event_user(1);
    with (other){
        hpLost = other.projType;
        event_user(1);
    }
    scrPlantsLimitedSFX(sndMakerCannonball);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadow
var _height = clamp((yBase-y)/160, 0, 1);
draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, row*64+192+28, (bbox_right-bbox_left)/72 + _height*0.4, (bbox_bottom-bbox_top)/72 + _height*0.4, 0, c_white, image_alpha * (1-_height));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision effect
if (!collided){
    if (projType == 1){
        hspeed = random_range(-2.3, -1.8);
        vspeed = random_range(-1.5, -0.8);
    }else{
        direction += 180;
        speed = speed;
    }
    alarm[0] = -1;
    alarm[1] = -1;
    gravity = random_range(0.08, 0.15);
    collided = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing
if (projType == 1){
    draw_self();
}else{
    draw_sprite_ext(sprite_index, image_index, x, y, 3/4*(image_xscale*2), 3/4*(image_yscale*2), image_angle, c_white, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
