<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFinalKurathChaser</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-8</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = 3;
x -= 14*image_xscale;
image_yscale = 3;
y -= 160*image_yscale;
instance_create(x, y+24, objFinalBossChar_2);
animCount = 0;
nametag = noone;
alarm[0] = 60;
alarm[1] = 280;
halfwayPoint = (room_width - 1600)/2 + 800;
moving = true;
image_speed = 0;

//border particles
particleSize = 350;
for(var i=particleSize-1; i&gt;=0; i--){
    particleInd[i] = -1;
    particleX[i] = -16;
    particleY[i] = -16;
    particleScale[i] = 1;
    particleAlpha[i] = 0;
    particleAlphaDec[i] = 1;
    particleExists[i] = false;
    particleHspeed[i] = 0;
    particleVspeed[i] = 0;
    particleAng[i] = 0;
    particleRot[i] = 0;
}
particleReplacementFadeCol = make_color_rgb(137, 126, 87);
particleReplacementFade = 0;

//random jump generation
if (buff()){
    nextJumpCounter = 3;
    nextJumpX = 832;
}else{
    nextJumpCounter = 0;
    nextJumpX = 800;
}
nextJumpY = 304;
nextJumpYMin = 180;
nextJumpYMax = 428;
spawn = -1;
attacksThrown = 0;
spawnedSpider = 0;

//leash variables
velX = 0;
velY = 0;
tensionX = 0;
tensionY = 0;
mass = 7777;

k = 25
l = 22
deleteWhenPossible = false;
hitByLaser = false;  //faster disintegration

if (!instance_exists(objFinalRNGDie)){
    (instance_create(x, y, objFinalRNGDie)).latchedOn = true;
}
with (objFinalRNGDie){
    grow = true;
    shrink = false;
    appearYDiff = 96;
    targetObj = objFinalKurath;
    appearLerp = 1;
    depth = -8;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PvZ-based attacks
if (instance_exists(objPlayer) &amp;&amp; x &lt; room_width - 1200){
    var _atk;
    if (x &gt;= 3200 &amp;&amp; spawnedSpider == 0){
        _atk = 2;
    }else{
        if (buff()){
            _atk = choose(0, 0, 0, 0, 1, 1, 1, 3, 3);//choose(0, 0, 0, 0, 1, 1, 1, (2+spawnedSpider), 3, 3);
        }else{
            _atk = choose(0, 0, 0, 0, 0, 0, 0, 1, 1, 1);//choose(0, 0, 0, 0, 0, 0, 0, 1, 1, 1, (2-spawnedSpider) );
        }
    }
    if (attacksThrown &lt; 2 &amp;&amp; _atk == 2){  // don't spawn spider until the third attack
        _atk = choose(0, 0, 1);
    }
    
    switch(_atk){
        case 0:
            with (instance_create(view_xview + 824, nextJumpY + irandom_range(-136, 96), objFinalKurathFruit)){
                counter = -(irandom(12));
            }
            with (instance_create(view_xview + 824, nextJumpY + irandom_range(-136, 96), objFinalKurathFruit)){
                counter = -(44 + irandom(12));
            }
            
            if (buff() &amp;&amp; x &gt; halfwayPoint){
                with (instance_create(view_xview + 824, nextJumpY + irandom_range(-224, 112), objFinalKurathFruit))
                    counter = -(22 + irandom(12))
                with (instance_create(view_xview + 824, nextJumpY + irandom_range(-224, 112), objFinalKurathFruit))
                    counter = -(55 + irandom(12))
            }
            alarm[1] = 170;
            break;
        case 1: //Spawn 3 or 4 spikes
            instance_create(view_xview - 16, 64, objFinalKurathPvZSpike);
            instance_create(view_xview - 16, 544, objFinalKurathPvZSpike);
            if (buff() &amp;&amp; x &gt; halfwayPoint){
                instance_create(view_xview - 16, 224, objFinalKurathPvZSpike);
                instance_create(view_xview - 16, 384, objFinalKurathPvZSpike);
            }else{
                instance_create(view_xview - 16, 304, objFinalKurathPvZSpike);
            }
            alarm[1] = 180;
            break;
        case 2:  // Spider  (removed)
            instance_create(objPlayer.x, -88, objFinalKurathSpider);
            spawnedSpider += 1;
            alarm[1] = 270;
            break;
        case 3:  // Spinner (buff only)
            alarm[1] = 220;
            instance_create(x, y + 72, objFinalKurathSpinner);
            break;
    }
    attacksThrown ++;
    
    if (buff()){
        if (_atk &lt; 2){
            alarm[1] *= 2/3;
        }else{
            alarm[1] = 216;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Nametag
if (nametag == noone){
    nametag = scrFinalBossNametag(x-12, y-32, 4);
    nametag.absolutePos = true;
    nametag.absoluteXOff = -12;
    nametag.absoluteYOff = -20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (moving &amp;&amp; view_xview &gt;= room_width-800){
    view_xview = room_width - 800;
    //x = view_xview;
    alarm[1] = -1;
    moving = false;
    
    with (objMakerCamera){
        xTo = camX;
        moveCam = false;
    }
    if (global.practicing &amp;&amp; global.practiceWaypointEnd == 3){
        scrPracticeEnd();
    }else{
        if (!global.dead){
            with (objFinalYoyo){
                laserTimer = 0;
            }
            
            with (objFinalBossChar_2){
                if ((leashBreakPoint+1) &gt;= (leashPieces-1)){leashBreakPoint = leashPieces-2;}
                if (instance_exists(ropePiece[leashBreakPoint])){
                    ropePiece[leashBreakPoint].connection2 = noone;
                }
                if (instance_exists(ropePiece[(leashBreakPoint+1)])){
                    ropePiece[(leashBreakPoint+1)].connection1 = noone;
                }
                audio_play_sound(sndMakerSamplePunch, 0, 0);
                friction = 0.2;
                hspeed = velX;
                alarm[0] = 1;
            }
        }
    }
}

if (instance_exists(objPlayer)){
    if (objPlayer.x &lt; view_xview - 5 || (objPlayer.x &gt; view_xview + 805 &amp;&amp; objPlayer.x &gt; 805)){
        scrKillPlayer();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (moving &amp;&amp; !global.dead &amp;&amp; sprite_index == sprFinalKurathChaser){
    if (buff()){
        velX = 2.16;
    }else{
        velX = 1.92;
    }
}else{
    velX = 0;
}
velY = 0;

if (global.extraEffects){
    var _spd, _ang;
    var _particlesToCreate = 0;
    if (!deleteWhenPossible){
        _particlesToCreate = 3;
    }
    
    var _particleRemaining = false;  // set to true if one or more particles exist
    if (x &gt;= xstart + 120*(velX/2)){
        for(var i=particleSize-1; i&gt;=0; i--){
            if (particleExists[i]){
                particleAlpha[i] -= particleAlphaDec[i]
                if (particleAlpha[i] &lt;= particleAlphaDec[i]){
                    particleExists[i] = false;
                }else{ //no point moving it if it won't be drawn
                    particleX[i] += particleHspeed[i];
                    particleY[i] += particleVspeed[i];
                    particleAng[i] += particleRot[i];
                    _particleRemaining = true;
                }
            }
            if (_particlesToCreate &gt; 0 &amp;&amp; !particleExists[i] &amp;&amp; moving){
                particleInd[i] = irandom(2);
                particleX[i] = -16;
                particleY[i] = irandom_range(0, 608);
                particleScale[i] = random_range(0.3, 0.8);
                particleAng[i] = irandom(360);
                particleRot[i] = random_range(1, 3)*choose(1, -1);
                particleAlpha[i] = random_range(0.7, 0.8);
                particleAlphaDec[i] = random_range(0.007, 0.01);
                particleExists[i] = true;
                _spd = random_range(2.5, 3.2); //view moves 2.3 pixels a frame in original
                _ang = random_range(-25, 25);
                particleHspeed[i] = _spd * dcos(_ang) - 2.3;
                particleVspeed[i] = _spd * -(dsin(_ang));
                _particlesToCreate --;
            }
        }
        if (_particlesToCreate &gt; 0 &amp;&amp; moving){
            for(var i = (particleSize + (_particlesToCreate - 1)); i &gt;= particleSize; i--){
                particleInd[i] = irandom(2);
                particleX[i] = -16;
                particleY[i] = irandom_range(0, 608);
                particleScale[i] = random_range(0.3, 0.8);
                particleAng[i] = irandom(360);
                particleRot[i] = random_range(1, 3)*choose(1, -1);
                particleAlpha[i] = random_range(0.7, 0.8);
                particleAlphaDec[i] = random_range(0.007, 0.01);
                particleExists[i] = true;
                _spd = random_range(2.5, 3.2);
                _ang = random_range(-25, 25);
                particleHspeed[i] = _spd * dcos(_ang) - 2.3; //view moves 2.3 pixels a frame in original
                particleVspeed[i] = _spd * -(dsin(_ang));
            }
            particleSize += _particlesToCreate;
            _particleRemaining = true;
        }
        
        if (deleteWhenPossible &amp;&amp; !_particleRemaining){
            with (objFinalP2Leash){
                instance_destroy();
            }
            instance_destroy();
        }
    }
}else{
    if (!deleteWhenPossible){
        if (particleReplacementFade &lt; 1){
            particleReplacementFade = min(particleReplacementFade + 0.033, 1);
        }
    }else{
        particleReplacementFade -= 0.033;
        if (particleReplacementFade &lt;= 0){
            with (objFinalP2Leash){
                ropePhysics = false;
            }
            instance_destroy();
        }
    }
}

if (nextJumpX &lt;= view_xview + 832 &amp;&amp; !global.dead &amp;&amp; nextJumpX &lt; room_width - 1012){
    var _nextJump = 0;
    if (nextJumpCounter &lt;= 0){
        if (buff()){
            nextJumpCounter = 5;
        }else{
            nextJumpCounter = 3;
        }
        _nextJump = 0;
    }else{
        _nextJump = ((nextJumpCounter mod 2)  +  1);
    }
    
    event_user(clamp(_nextJump, 0, 2));
    nextJumpCounter --;
}
    
if (global.dead &amp;&amp; global.deathSlow &lt; 0.4 &amp;&amp; image_alpha &gt; 0){
    if (sprite_index != sprFinalKurathChaserDisintegrate){
        sprite_index = sprFinalKurathChaserDisintegrate;
        animCount = (image_number div 4) - 1;
        with (objMakerCamera){
            xTo = camX;
            moveCam = false;
        }
        
        with (objFinalRNGDie){
            targetObj = objFinalBossChar_2;
            event_user(0);
        }
        
        //Make Mr. Scribble "drop" the leash when the player dies
        with (objFinalBossChar_2){
            // I am reusing the chase ending animation for this post-death movement
            endingAnimPart = 1;
            event_perform(ev_alarm, 0);
        }
    }
}else if (!instance_exists(objFinalYoyoLaser) &amp;&amp; sprite_index == sprFinalKurathChaser){
    animCount += 1/12;
}else if (!deleteWhenPossible &amp;&amp; !(sprite_index == sprFinalKurathChaserDisintegrate &amp;&amp; animCount &lt;= 1)){
    with (objFinalYoyoLaser){
        if (collision_line(x - width*dsin(angle), y + width*dcos(angle), x - width*dsin(angle) + lengthdir_x(length, angle), y + width*dcos(angle) + lengthdir_y(length, angle), objFinalKurath, true, true) != noone){
            with (other){
                if (sprite_index != sprFinalKurathChaserDisintegrate){
                    sprite_index = sprFinalKurathChaserDisintegrate;
                    with (objFinalRNGDie){
                        targetObj = objFinalYoyo;
                        event_user(0);
                    }
                    
                    animCount = 7;
                    hitByLaser = true;
                }else{
                    animCount -= 1;
                    if (animCount &lt;= 1){
                        animCount = 1;
                        deleteWhenPossible = true;  // dropshadows
                        image_alpha = 0;
                    }
                }
            }
        }
    }
}

if (sprite_index == sprFinalKurathChaserDisintegrate){
    if (!hitByLaser &amp;&amp; animCount &gt; 1){
        animCount -= 0.2;
        if (animCount &lt;= 1){
            animCount = 1;
            deleteWhenPossible = true;  // dropshadows
            image_alpha = 0;
        }
    }
    if (instance_exists(nametag)){
        nametag.absoluteYOff = bbox_top + lerp(13, 170, animCount/5);
        nametag.following = noone;
    }
}

if (animCount &gt;= 0){
    image_index = (animCount mod (image_number/4)) + (image_number/4)*floor(global.count/5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!deleteWhenPossible &amp;&amp; image_alpha &gt;= 1){
    with (other){
        x = xprevious;
        y = yprevious;
        scrMoveContactObject(sign(hspeed), 0, abs(hspeed), other);
        
        var _inst;
        _inst = instance_create(x, y, objBulletReflected);
        _inst.hspeed *= sign(x-other.x);
        
        explode = false;
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!deleteWhenPossible &amp;&amp; image_alpha &gt;= 1){scrKillPlayer();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Second Jump Pool
var _XOff = 0, _YOff = 0;  // for nerfing/buffing jumps

if (room == rFinalBoss_2){
    if (buff()){
        spawn = irandom_range(0, 14);
    }else{
        spawn = irandom_range(1, 13);  // Indexes  0 and 14  are only for the buffed mode
    }
}
if (l == 26){
    k = (k + 1);
    l = 0;
}

switch (spawn)
{
    case 0:  // Three spikes ( buffed only )
        {
            //Platform
            if (!buff()){
                _XOff = 16;
                instance_create((nextJumpX - 32)  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);  // leftmost
            }
            
            instance_create(nextJumpX  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32)  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64)  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96)  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);
            
            //if (buff()){
                instance_create((nextJumpX + 16), (nextJumpY - 32)  - 32, objFinalKurathSpikeUp);
                instance_create((nextJumpX + 16), (nextJumpY - 32), objFinalKurathSpikeDown);
                (instance_create((nextJumpX + 48), (nextJumpY - 32)  - 72, objFinalKurathSpikeUp)).ident = 1;
                (instance_create((nextJumpX + 48), (nextJumpY - 32)  - 40, objFinalKurathSpikeDown)).ident = 1;
                instance_create((nextJumpX + 80), (nextJumpY - 32)  - 32, objFinalKurathSpikeUp);
                instance_create((nextJumpX + 80), (nextJumpY - 32), objFinalKurathSpikeDown);
                nextJumpX = (nextJumpX + 112);
            /*}else{
                instance_create((nextJumpX + 16), (nextJumpY - 32), objFinalKurathSpikeUp);
                instance_create((nextJumpX + 48), (nextJumpY - 32), objFinalKurathSpikeUp);
                instance_create((nextJumpX + 80), (nextJumpY - 32), objFinalKurathSpikeUp);
                nextJumpX = (nextJumpX + 156);
            }*/
        }
        break;
    case 1:  // Under the shurikens
        {
            //single blocks
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            if (nextJumpX + 128 &lt; ((room_width-800) - 32)){
                instance_create((nextJumpX + 128), nextJumpY, objFinalTilesAutomaticBlock);
            }
            
            if (!buff()){_YOff = -16;}
            //shurikens
            instance_create((nextJumpX + 64), (nextJumpY - 192)  + _YOff, objFinalKurathSpikeUp);
            instance_create((nextJumpX + 32), (nextJumpY - 160)  + _YOff, objFinalKurathSpikeLeft);
            instance_create((nextJumpX + 64), (nextJumpY - 160)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), (nextJumpY - 160)  + _YOff, objFinalKurathSpikeRight);
            instance_create((nextJumpX + 64), (nextJumpY - 128)  + _YOff, objFinalKurathSpikeDown);
            instance_create((nextJumpX + 64), (nextJumpY - 96)  + _YOff, objFinalKurathSpikeUp);
            instance_create((nextJumpX + 32), (nextJumpY - 64)  + _YOff, objFinalKurathSpikeLeft);
            instance_create((nextJumpX + 64), (nextJumpY - 64)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), (nextJumpY - 64)  + _YOff, objFinalKurathSpikeRight);
            instance_create((nextJumpX + 64), (nextJumpY - 32)  + _YOff, objFinalKurathSpikeDown);
            
            nextJumpX = (nextJumpX + 128);
        }
        break;
    case 2:  // Over the shuriken
        {
            //shuriken
            if (buff()){
                _YOff = -16;
            }
            instance_create((nextJumpX + 64), (nextJumpY - 96)  + _YOff, objFinalKurathSpikeUp);
            instance_create((nextJumpX + 32), (nextJumpY - 64)  + _YOff, objFinalKurathSpikeLeft);
            instance_create((nextJumpX + 64), (nextJumpY - 64)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), (nextJumpY - 64)  + _YOff, objFinalKurathSpikeRight);
            instance_create((nextJumpX + 64), (nextJumpY - 32)  + _YOff, objFinalKurathSpikeDown);
            
            if (buff()){
                _XOff = 16;
                _YOff = 0;
            }
            //buttom row of blocks
            instance_create(nextJumpX  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32)  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64)  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96)  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);
            
            if (buff()){
                nextJumpX = ((nextJumpX + 128)  + _XOff);
            }else{
                instance_create((nextJumpX + 128), nextJumpY, objFinalTilesAutomaticBlock);
                nextJumpX = (nextJumpX + 160);
            }
        }
        break;
    case 3:  // Big spike
        {
            instance_create((nextJumpX - 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create(nextJumpX, (nextJumpY - 32), objFinalKurathSpikeUp);
            instance_create((nextJumpX + 16), (nextJumpY - 32), objFinalKurathSpikeDown);
            instance_create((nextJumpX + 32), (nextJumpY - 32), objFinalKurathSpikeUp);
            instance_create((nextJumpX + 16), (nextJumpY - 64), objFinalKurathSpikeUp);
            nextJumpX = (nextJumpX + 96);
        }
        break;
    case 4:  // Three spike  (rhombuses if buffed)
        {
            //Platform
            if (!buff()){
                _XOff = 16;
                instance_create((nextJumpX - 32)  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);  // leftmost
            }
            
            instance_create(nextJumpX  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32)  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64)  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96)  + _XOff, nextJumpY, objFinalTilesAutomaticBlock);
            
            if (buff()){
                // block w/ minispikes
                instance_create((nextJumpX + 48), (nextJumpY - 32)  - 152, objFinalTilesAutomaticBlock);
                (instance_create((nextJumpX + 48), (nextJumpY - 32)  - 168, objFinalKurathSpikeUp)).mini = true;
                (instance_create((nextJumpX + 64), (nextJumpY - 32)  - 168, objFinalKurathSpikeUp)).mini = true;
                (instance_create((nextJumpX + 32), (nextJumpY - 32)  - 136, objFinalKurathSpikeLeft)).mini = true;
                (instance_create((nextJumpX + 32), (nextJumpY - 32)  - 152, objFinalKurathSpikeLeft)).mini = true;
                (instance_create((nextJumpX + 80), (nextJumpY - 32)  - 136, objFinalKurathSpikeRight)).mini = true;
                (instance_create((nextJumpX + 80), (nextJumpY - 32)  - 152, objFinalKurathSpikeRight)).mini = true;
                (instance_create((nextJumpX + 48), (nextJumpY - 32)  - 120, objFinalKurathSpikeDown)).mini = true;
                (instance_create((nextJumpX + 64), (nextJumpY - 32)  - 120, objFinalKurathSpikeDown)).mini = true;
                // spikes below
                (instance_create((nextJumpX + 56), (nextJumpY - 32)  - 120, objFinalKurathSpikeUp)).mini = true;
                instance_create((nextJumpX + 48), (nextJumpY - 32)  - 104, objFinalKurathSpikeDown);
                
                // left rhombus
                instance_create((nextJumpX + 16), (nextJumpY - 32)  - 32, objFinalKurathSpikeUp);
                instance_create((nextJumpX + 16), (nextJumpY - 32), objFinalKurathSpikeDown);
                (instance_create((nextJumpX + 16), (nextJumpY - 32) + 16, objFinalKurathSpikeUp)).mini = true;
                (instance_create((nextJumpX + 32), (nextJumpY - 32) + 16, objFinalKurathSpikeUp)).mini = true;
                
                // right rhombus
                instance_create((nextJumpX + 80), (nextJumpY - 32)  - 32, objFinalKurathSpikeUp);
                instance_create((nextJumpX + 80), (nextJumpY - 32), objFinalKurathSpikeDown);
                (instance_create((nextJumpX + 80), (nextJumpY - 32) + 16, objFinalKurathSpikeUp)).mini = true;
                (instance_create((nextJumpX + 96), (nextJumpY - 32) + 16, objFinalKurathSpikeUp)).mini = true;
                nextJumpX = (nextJumpX + 128);
            }else{
                instance_create((nextJumpX + 16), (nextJumpY - 32), objFinalKurathSpikeUp);
                instance_create((nextJumpX + 48), (nextJumpY - 32), objFinalKurathSpikeUp);
                instance_create((nextJumpX + 80), (nextJumpY - 32), objFinalKurathSpikeUp);
                nextJumpX = (nextJumpX + 112);
            }
        }
        break;
    case 5:  // Expanded corner
        {
            instance_create((nextJumpX), (nextJumpY + 8), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), (nextJumpY + 8), objFinalKurathSpikeRight);
            
            if (buff()){
                instance_create((nextJumpX + 56), (nextJumpY + 40), objFinalTilesAutomaticBlock);
            }else{
                instance_create((nextJumpX), (nextJumpY + 40), objFinalTilesAutomaticBlock);
                instance_create((nextJumpX + 32), (nextJumpY + 40), objFinalTilesAutomaticBlock);
                instance_create((nextJumpX + 64), (nextJumpY + 40), objFinalTilesAutomaticBlock);
                _YOff = -28;  // for the pillar with spikes
            }
            
            instance_create((nextJumpX + 64), (nextJumpY - 180)  + _YOff, objFinalKurathSpikeUp);
            instance_create((nextJumpX + 64), (nextJumpY - 148)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), (nextJumpY - 116)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), (nextJumpY - 84)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), (nextJumpY - 52)  + _YOff, objFinalKurathSpikeDown);
            nextJumpX = (nextJumpX + 96);
            nextJumpY = (nextJumpY + 32);
        }
        break;
    case 6:  // Over spike to next platform
        {
            instance_create((nextJumpX - 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), (nextJumpY - 32), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), (nextJumpY - 64), objFinalKurathSpikeUp);
            
            if (buff()){instance_create((nextJumpX + 16), (nextJumpY - 32), objFinalKurathSpikeUp);}
            
            nextJumpX = (nextJumpX + 48);
            nextJumpY = min(nextJumpY + 8, nextJumpYMax);
        }
        break;
    case 7:  // Sideways rhombus
        {
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), nextJumpY, objFinalTilesAutomaticBlock);
            
            if (buff()){
                (instance_create((nextJumpX + 32), (nextJumpY - 32), objFinalKurathSpikeLeft)).mini = true;
                (instance_create((nextJumpX + 32), (nextJumpY - 16), objFinalKurathSpikeLeft)).mini = true;
                (instance_create((nextJumpX + 48), (nextJumpY - 32), objFinalKurathSpikeRight)).mini = true;
                (instance_create((nextJumpX + 64), (nextJumpY - 32), objFinalKurathSpikeLeft)).mini = true;
                (instance_create((nextJumpX + 64), (nextJumpY - 24), objFinalKurathSpikeRight)).mini = true;
                (instance_create((nextJumpX + 48), (nextJumpY - 24), objFinalKurathSpikeLeft)).mini = true;
                (instance_create((nextJumpX + 64), (nextJumpY - 16), objFinalKurathSpikeLeft)).mini = true;
                (instance_create((nextJumpX + 48), (nextJumpY - 16), objFinalKurathSpikeRight)).mini = true;
                (instance_create((nextJumpX + 80), (nextJumpY - 32), objFinalKurathSpikeRight)).mini = true;
                (instance_create((nextJumpX + 80), (nextJumpY - 16), objFinalKurathSpikeRight)).mini = true;
            }else{
                instance_create((nextJumpX + 24), (nextJumpY - 32), objFinalKurathSpikeLeft);
                (instance_create((nextJumpX + 56), (nextJumpY - 32), objFinalKurathSpikeRight)).mini = true;
                (instance_create((nextJumpX + 56), (nextJumpY - 24), objFinalKurathSpikeLeft)).mini = true;
                (instance_create((nextJumpX + 56), (nextJumpY - 16), objFinalKurathSpikeRight)).mini = true;
                (instance_create((nextJumpX + 56), (nextJumpY - 8), objFinalKurathSpikeLeft)).mini = true;
                instance_create((nextJumpX + 72), (nextJumpY - 24), objFinalKurathSpikeRight);
            }
            nextJumpX = (nextJumpX + 128);
        }
        break;
    case 8:  // 16 pixel-elevated expanded gate
        {
            //bottom platform
            instance_create(nextJumpX, (nextJumpY + 16), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX - 32), (nextJumpY + 16), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), (nextJumpY + 16), objFinalTilesAutomaticBlock);
            
            //elevated gate
            if (!buff()){
                _YOff = 16;
            }
            instance_create(nextJumpX, (nextJumpY - 176)  + _YOff, objFinalKurathSpikeUp);
            instance_create(nextJumpX, (nextJumpY - 144)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create(nextJumpX, (nextJumpY - 112)  + _YOff, objFinalKurathSpikeDown);
            
            instance_create(nextJumpX, (nextJumpY - 32)  + _YOff, objFinalKurathSpikeUp);
            
            if (buff()){  // bottom of elevated gate
                instance_create(nextJumpX, (nextJumpY)  + _YOff, objFinalKurathSpikeDown);
            }
            nextJumpX = (nextJumpX + 32);
        }
        break;
    case 9:  // Staircase with embedded spikes
        {
            instance_create(nextJumpX, (nextJumpY + 48), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), (nextJumpY + 16), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), (nextJumpY - 16), objFinalTilesAutomaticBlock);
            if (buff()){
                instance_create((nextJumpX + 32), (nextJumpY - 16), objFinalKurathSpikeUp);
            }
            instance_create((nextJumpX + 48), (nextJumpY - 16), objFinalKurathSpikeDown);
            instance_create((nextJumpX + 48), (nextJumpY - 48), objFinalKurathSpikeUp);
            nextJumpX = (nextJumpX + 96);
            nextJumpY = max(nextJumpY - 64, nextJumpYMin);
        }
        break;
    case 10:  // mini spike corridor
        {
            if (buff()){
                _YOff = 8;
            }else{
                _YOff = -16;
            }
            for (var i = 0; i &lt; 4; i += 1)
            {
                with (instance_create((nextJumpX + (16 * i)), nextJumpY, objFinalKurathSpikeUp)){
                    mini = true;
                }
                with (instance_create((nextJumpX + (16 * i)), (nextJumpY + 48), objFinalKurathSpikeDown)){
                    mini = true;
                }
                
                with (instance_create((nextJumpX + (16 * i)), (nextJumpY - 80)  + _YOff, objFinalKurathSpikeDown)){
                    mini = true;
                }
                with (instance_create((nextJumpX + (16 * i)), (nextJumpY - 128)  + _YOff, objFinalKurathSpikeUp)){
                    mini = true;
                }
            }
            
            //top blocks
            instance_create((nextJumpX - 32), (nextJumpY - 128)  + _YOff, objFinalTilesAutomaticBlock);
            (instance_create((nextJumpX), (nextJumpY - 112)  + _YOff, objFinalTilesAutomaticBlock)).autoTiled = true;
            (instance_create((nextJumpX + 32), (nextJumpY - 112)  + _YOff, objFinalTilesAutomaticBlock)).autoTiled = true;
            instance_create((nextJumpX + 64), (nextJumpY - 128)  + _YOff, objFinalTilesAutomaticBlock);
            
            //bottom blocks
            instance_create((nextJumpX - 32), (nextJumpY + 32), objFinalTilesAutomaticBlock);
            (instance_create(nextJumpX, (nextJumpY + 16), objFinalTilesAutomaticBlock)).autoTiled = true;
            (instance_create((nextJumpX + 32), (nextJumpY + 16), objFinalTilesAutomaticBlock)).autoTiled = true;
            instance_create((nextJumpX + 64), (nextJumpY + 32), objFinalTilesAutomaticBlock);
            
            //outer block minispikes
            with (instance_create((nextJumpX - 32), (nextJumpY + 64), objFinalKurathSpikeDown)){
                mini = true;
            }
            with (instance_create((nextJumpX - 16), (nextJumpY + 64), objFinalKurathSpikeDown)){
                mini = true;
            }
            with (instance_create((nextJumpX + 64), (nextJumpY + 64), objFinalKurathSpikeDown)){
                mini = true;
            }
            with (instance_create((nextJumpX + 80), (nextJumpY + 64), objFinalKurathSpikeDown)){
                mini = true;
            }
            with (instance_create((nextJumpX - 32), (nextJumpY  - 144)  + _YOff, objFinalKurathSpikeUp)){
                mini = true;
            }
            with (instance_create((nextJumpX - 16), (nextJumpY  - 144)  + _YOff, objFinalKurathSpikeUp)){
                mini = true;
            }
            with (instance_create((nextJumpX + 64), (nextJumpY  - 144)  + _YOff, objFinalKurathSpikeUp)){
                mini = true;
            }
            with (instance_create((nextJumpX + 80), (nextJumpY  - 144)  + _YOff, objFinalKurathSpikeUp)){
                mini = true;
            }
            
            nextJumpX = (nextJumpX + 96);
            nextJumpY = min(nextJumpY + 16, nextJumpYMax);
        }
        break;
    case 11:  // expanded Down+Right steaks
        {
            //bottom platform
            instance_create((nextJumpX - 32), (nextJumpY + 48), objFinalTilesAutomaticBlock);
            instance_create(nextJumpX,        (nextJumpY + 48), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), (nextJumpY + 48), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), (nextJumpY + 48), objFinalTilesAutomaticBlock);
            instance_create(nextJumpX, (nextJumpY + 16), objFinalTilesAutomaticBlock);
            
            //bottom spikes
            instance_create(nextJumpX, (nextJumpY - 16), objFinalKurathSpikeUp);
            instance_create((nextJumpX + 32), (nextJumpY + 16), objFinalKurathSpikeUp);
            
            // down+right steaks
            if (!buff()){
                _xOff = 8;
                _yOff = -20;
            }else{
                _xOff = 4;
                _yOff = -10;
            }
            
            instance_create( nextJumpX       + _xOff, (nextJumpY - 96)   + 2*_YOff, objFinalKurathSpikeLeft);
            instance_create((nextJumpX + 32) + _xOff, (nextJumpY - 96)   + 2*_YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32) + _xOff, (nextJumpY - 128)  + 2*_YOff, objFinalKurathSpikeUp);
            
            instance_create((nextJumpX + 32) + 2*_xOff, (nextJumpY - 64)   + _YOff, objFinalKurathSpikeLeft);
            instance_create((nextJumpX + 64) + 2*_xOff, (nextJumpY - 64)   + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64) + 2*_xOff, (nextJumpY - 96)   + _YOff, objFinalKurathSpikeUp);
            nextJumpX = (nextJumpX + 96);
            nextJumpY = min(nextJumpY + 48, nextJumpYMax);
        }
        break;
    case 12:  // Half-diamond with kill ceiling
        {
            if (!buff()){
                _yOff = 0;
            }else{
                _yOff = -14;
            }
            
            // bottom blocks
            instance_create((nextJumpX - 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            
            // half-diamond
            instance_create(nextJumpX, (nextJumpY - 32), objFinalKurathSpikeUp);
            instance_create((nextJumpX + 32), (nextJumpY - 32), objFinalKurathSpikeUp);
            
            // kill ceiling
            instance_create((nextJumpX + 32) , (nextJumpY - 112)  + _yOff, objFinalKurathSpikeLeft);
            instance_create( nextJumpX       , (nextJumpY - 112)  + _yOff, objFinalKurathSpikeRight);
            instance_create((nextJumpX - 32) , (nextJumpY - 112)  + _yOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64) , (nextJumpY - 112)  + _yOff, objFinalTilesAutomaticBlock);
            // top minispikes
            (instance_create((nextJumpX - 32), (nextJumpY - 128)  + _yOff, objFinalKurathSpikeUp)).mini = true;
            (instance_create((nextJumpX - 16), (nextJumpY - 128)  + _yOff, objFinalKurathSpikeUp)).mini = true;
            (instance_create((nextJumpX + 64), (nextJumpY - 128)  + _yOff, objFinalKurathSpikeUp)).mini = true;
            (instance_create((nextJumpX + 80), (nextJumpY - 128)  + _yOff, objFinalKurathSpikeUp)).mini = true;
            nextJumpX = (nextJumpX + 96);
        }
        break;
    case 13:  // Expanded diamond
        {
            instance_create(nextJumpX, nextJumpY, objFinalKurathSpikeUp);
            instance_create((nextJumpX + 32), nextJumpY, objFinalKurathSpikeUp);
            for(var i=-1;i&lt;3;i++){
                instance_create(nextJumpX + 32*i, nextJumpY + 32, objFinalTilesAutomaticBlock);
                if (buff()){
                    if (i == 0 || i == 1){
                        instance_create(nextJumpX + 32*i, (nextJumpY - 80), objFinalKurathSpikeDown);
                        (instance_create(nextJumpX + 32*i - 8, (nextJumpY - 96), objFinalKurathSpikeDown)).mini = true;
                        (instance_create(nextJumpX + 32*i, (nextJumpY - 96), objFinalKurathSpikeUp)).mini = true;
                        (instance_create(nextJumpX + 32*i + 8, (nextJumpY - 96), objFinalKurathSpikeDown)).mini = true;
                        (instance_create(nextJumpX + 32*i + 16, (nextJumpY - 96), objFinalKurathSpikeUp)).mini = true;
                        if (i == 1){(instance_create(nextJumpX + 32 + 24, (nextJumpY - 96), objFinalKurathSpikeDown)).mini = true;}
                    }
                }else{
                    if (i == 0 || i == 1){
                        instance_create(nextJumpX + 32*i, (nextJumpY - 96), objFinalKurathSpikeDown);
                    }else{
                        (instance_create(nextJumpX + 32*i, (nextJumpY - 96), objFinalKurathSpikeDown)).mini = true;
                        (instance_create(nextJumpX + 32*i + 16, (nextJumpY - 96), objFinalKurathSpikeDown)).mini = true;
                        
                    }
                }
                instance_create(nextJumpX + 32*i, (nextJumpY - 128), objFinalTilesAutomaticBlock);
                (instance_create(nextJumpX + 32*i, (nextJumpY - 144), objFinalKurathSpikeUp)).mini = true;
                (instance_create(nextJumpX + 32*i + 16, (nextJumpY - 144), objFinalKurathSpikeUp)).mini = true;
            }
            nextJumpX = (nextJumpX + 112);
            nextJumpY = min(nextJumpY + 32, nextJumpYMax);
        }
        break
    case 14:  // Expanded steak  (buffed only)
        {
            if (!buff()){
                _yOff = 0;
            }else{
                _yOff = -16;
            }
            
            instance_create( nextJumpX      , (nextJumpY - 72)  + _yOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX - 32), (nextJumpY - 72)  + _yOff, objFinalKurathSpikeLeft);
            instance_create( nextJumpX      ,(nextJumpY - 104)  + _yOff, objFinalKurathSpikeUp);
            instance_create((nextJumpX + 32), (nextJumpY - 72)  + _yOff, objFinalKurathSpikeRight);
            
            instance_create( nextJumpX      , (nextJumpY + 24), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX - 32), (nextJumpY + 24), objFinalKurathSpikeLeft);
            instance_create( nextJumpX      , (nextJumpY + 56), objFinalKurathSpikeDown);
            instance_create((nextJumpX + 32), (nextJumpY + 24), objFinalKurathSpikeRight);
            
            nextJumpX = (nextJumpX + 48);
            nextJumpY = min(nextJumpY + 24, nextJumpYMax);
        }
        break;
}

if (buff()){
    nextJumpX += 6*16;
}else{
    nextJumpX += 8*16;
}
var _yFluct = irandom_range(24, 56);
if (nextJumpY - _yFluct &lt; nextJumpYMin + 64){
    nextJumpY += roundSane(_yFluct*1.5);
}else if (nextJumpY + _yFluct &gt; nextJumpYMax - 64){
    nextJumpY -= roundSane(_yFluct*1.5);
}else{
    nextJumpY = clamp(nextJumpY + _yFluct*choose(1, -1), nextJumpYMin, nextJumpYMax);
}

with (objFinalTilesAutomaticBlock){
    if (!destroyed &amp;&amp; !autoTiled){
        event_user(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// First Jump Pool
if (room == rFinalBoss_2){spawn = irandom_range(0, 12);}
var _XOff = 0, _YOff = 0;  // for nerfing/buffing jumps
if (global.screenshotMode){spawn = 10;}
switch (spawn){
    case 0:  // Gate
        {
            //bottom three blocks
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            
            if (!buff()){
                _YOff = -16;
                instance_create((nextJumpX + 32), (nextJumpY - 32)  + _YOff, objFinalKurathSpikeUp);
                (instance_create((nextJumpX + 32), nextJumpY  + _YOff, objFinalKurathSpikeDown)).mini = true;
                (instance_create((nextJumpX + 48), nextJumpY  + _YOff, objFinalKurathSpikeDown)).mini = true;
            }else{
                instance_create((nextJumpX + 32), (nextJumpY - 32), objFinalKurathSpikeUp);
                _YOff = 8;
            }
            //three block stack with spikes
            instance_create((nextJumpX + 32), (nextJumpY - 112)  + _YOff, objFinalKurathSpikeDown);
            instance_create((nextJumpX + 32), (nextJumpY - 144)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), (nextJumpY - 176)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), (nextJumpY - 208)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), (nextJumpY - 240)  + _YOff, objFinalKurathSpikeUp);
            nextJumpX = (nextJumpX + 96);
        }
        break;
        
    case 1:  // Expanded Ceiling Half-Diamond
        {
            //half-diamond
            instance_create((nextJumpX + 32), (nextJumpY - 32), objFinalKurathSpikeUp);
            instance_create((nextJumpX + 64), (nextJumpY - 32), objFinalKurathSpikeUp);
            
            //floor
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), nextJumpY, objFinalTilesAutomaticBlock);
            
            //ceiling
            instance_create(nextJumpX, (nextJumpY - 112), objFinalTilesAutomaticBlock);
            if (buff()){
                for (var i=0; i&lt;4; i++){
                    (instance_create((nextJumpX + 32)  + 16*i, (nextJumpY - 112), objFinalKurathSpikeUp)).mini = true;
                    (instance_create((nextJumpX + 32)  + 16*i, (nextJumpY - 96), objFinalKurathSpikeDown)).mini = true;
                }
            }else{
                instance_create((nextJumpX + 32), (nextJumpY - 112), objFinalTilesAutomaticBlock);
                instance_create((nextJumpX + 64), (nextJumpY - 112), objFinalTilesAutomaticBlock);
            }
            instance_create((nextJumpX + 96), (nextJumpY - 112), objFinalTilesAutomaticBlock);
            
            //roof
            if (buff()){
                instance_create(nextJumpX, (nextJumpY - 144), objFinalKurathSpikeUp);
                instance_create((nextJumpX + 96), (nextJumpY - 144), objFinalKurathSpikeUp);
            }else{
                for (var i=0; i&lt;8; i++){
                    (instance_create((nextJumpX) + 16*i, (nextJumpY - 128), objFinalKurathSpikeUp)).mini = true;
                }
            }
            nextJumpX = (nextJumpX + 128);
        }
        break;
        
    case 2:  // Pitchfork
        {
            //base row of blocks
            if (buff()){
                _YOff = 16;
            }
            instance_create(nextJumpX, (nextJumpY)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), (nextJumpY)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), (nextJumpY)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), (nextJumpY)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 128), (nextJumpY)  + _YOff, objFinalTilesAutomaticBlock);
            
            if (buff()){
                _YOff -= 16;
            }
            instance_create(nextJumpX, (nextJumpY - 64)  + _YOff, objFinalKurathSpikeUp);
            instance_create((nextJumpX + 64), (nextJumpY - 64)  + _YOff, objFinalKurathSpikeUp);
            instance_create((nextJumpX + 128), (nextJumpY - 64)  + _YOff, objFinalKurathSpikeUp);
            instance_create(nextJumpX, (nextJumpY - 32)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), (nextJumpY - 32)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 128), (nextJumpY - 32)  + _YOff, objFinalTilesAutomaticBlock);
            
            
            if (buff()){  // only visible when blocks are elevated
                for(var i=0; i&lt;6; i++){
                    (instance_create(nextJumpX + 16*i + 32*(i div 2), (nextJumpY)  + _YOff, objFinalKurathSpikeDown)).mini = true;
                }
            }
            nextJumpX = (nextJumpX + 160);
        }
        break;
        
    case 3:  // Expanded downward plane-
        {
            // left platform
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), (nextJumpY - 32), objFinalKurathSpikeUp);
            
            if (buff()){
                _XOff = 0;
                // full-sized spikes
                instance_create((nextJumpX + 64), nextJumpY, objFinalKurathSpikeRight);
                instance_create((nextJumpX + 96) + _XOff, (nextJumpY - 64), objFinalKurathSpikeLeft);
            }else{
                _XOff = -16;
                // change to mini spikes
                (instance_create((nextJumpX + 64), nextJumpY, objFinalKurathSpikeRight)).mini = true;
                (instance_create((nextJumpX + 112) + _XOff, (nextJumpY - 56), objFinalKurathSpikeLeft)).mini = true;
            }
            
            // top-right platform
            instance_create((nextJumpX + 128) + _XOff, (nextJumpY - 64), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 160) + _XOff, (nextJumpY - 64), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 128) + _XOff, (nextJumpY - 96), objFinalKurathSpikeUp);
            instance_create((nextJumpX + 160) + _XOff, (nextJumpY - 96), objFinalKurathSpikeUp);
            instance_create((nextJumpX + 128) + _XOff, (nextJumpY - 32), objFinalKurathSpikeDown);
            instance_create((nextJumpX + 160) + _XOff, (nextJumpY - 32), objFinalKurathSpikeDown);
            // landing platform
            instance_create((nextJumpX + 96) + _XOff, (nextJumpY + 64), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 128) + _XOff, (nextJumpY + 64), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 160) + _XOff, (nextJumpY + 64), objFinalTilesAutomaticBlock);
            nextJumpX = ((nextJumpX + 192) + _XOff);
            nextJumpY = min(nextJumpY + 64, nextJumpYMax);
        }
        break;
        
    case 4:  // fast vs safe route
        {
            //bottom platform
            instance_create((nextJumpX), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), nextJumpY, objFinalTilesAutomaticBlock);
            
            if (buff()){
                _YOff = 32;
                instance_create((nextJumpX + 96), (nextJumpY - 128)  + _YOff, objFinalTilesAutomaticBlock);
                (instance_create((nextJumpX + 96), (nextJumpY - 96), objFinalKurathSpikeDown)).mini = true;
                (instance_create((nextJumpX + 112), (nextJumpY - 96), objFinalKurathSpikeDown)).mini = true;
                instance_create((nextJumpX + 64), (nextJumpY - 32), objFinalKurathSpikeUp);
                
                //ceiling spikes
                instance_create((nextJumpX + 64), (nextJumpY - 160), objFinalKurathSpikeUp);
                instance_create((nextJumpX + 96), (nextJumpY - 160), objFinalKurathSpikeUp);
            }else{
                instance_create((nextJumpX + 96), (nextJumpY - 128), objFinalKurathSpikeDown);
                instance_create((nextJumpX + 96), (nextJumpY - 32), objFinalTilesAutomaticBlock);
                (instance_create((nextJumpX + 96), (nextJumpY - 48), objFinalKurathSpikeUp)).mini = true;
                (instance_create((nextJumpX + 112), (nextJumpY - 48), objFinalKurathSpikeUp)).mini = true;
                instance_create((nextJumpX + 80), (nextJumpY - 32), objFinalKurathSpikeUp);
            }
            instance_create((nextJumpX + 32), (nextJumpY - 128), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), (nextJumpY - 160)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), (nextJumpY - 160)  + _YOff, objFinalTilesAutomaticBlock)
            /*
            instance_create((nextJumpX + 32), (nextJumpY - 160), objFinalKurathSpikeUp);
            instance_create((nextJumpX + 64), (nextJumpY - 160), objFinalKurathSpikeUp);
            instance_create((nextJumpX + 96), (nextJumpY - 160), objFinalKurathSpikeUp);
            */
            instance_create((nextJumpX + 32), (nextJumpY - 128)  + _YOff, objFinalKurathSpikeDown);
            instance_create((nextJumpX + 64), (nextJumpY - 128)  + _YOff, objFinalKurathSpikeDown);
            nextJumpX = (nextJumpX + 128);
        }
        break;
    
    case 5:  // Two rhombuses  (three when buffed)
        {
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), nextJumpY, objFinalTilesAutomaticBlock);
            
            instance_create((nextJumpX + 32), (nextJumpY - 64), objFinalKurathSpikeUp);
            instance_create((nextJumpX + 32), (nextJumpY - 32), objFinalKurathSpikeDown);
            if (buff()){  // third rhombus buff
                (instance_create((nextJumpX + 48), (nextJumpY - 80), objFinalKurathSpikeUp)).mini = true;
                (instance_create((nextJumpX + 64), (nextJumpY - 80), objFinalKurathSpikeUp)).mini = true;
                instance_create((nextJumpX + 48), (nextJumpY - 64), objFinalKurathSpikeDown);
            }
            instance_create((nextJumpX + 64), (nextJumpY - 64), objFinalKurathSpikeUp);
            instance_create((nextJumpX + 64), (nextJumpY - 32), objFinalKurathSpikeDown);
            
            nextJumpX = (nextJumpX + 128);
        }
        break;
    
    case 6:  // Expanded diagonal
        {
            if (buff()){
                _YOff = 8;
            }else{
                _YOff = -8;
            }
            //diagonal
            instance_create(nextJumpX, (nextJumpY - 80)  + _YOff, objFinalKurathSpikeDown);
            instance_create(nextJumpX, (nextJumpY - 112)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create(nextJumpX, (nextJumpY - 144)  + _YOff, objFinalKurathSpikeUp);
            
            //platform underneath
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            nextJumpX = (nextJumpX + 96);
        }
        break;
    
    case 7:  // Jump over four spikes
        {
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            if (buff()){
                for(var i=1;i&lt;=4;i++){
                    if (i == 2 || i == 3){
                        instance_create((nextJumpX + 32*(i+1)), (nextJumpY - 64), objFinalKurathSpikeUp);
                        instance_create((nextJumpX + 32*(i+1)), (nextJumpY - 32), objFinalKurathSpikeDown);
                    }else{
                        instance_create((nextJumpX + 32*(i+1)), (nextJumpY - 32), objFinalKurathSpikeUp);
                        instance_create((nextJumpX + 32*(i+1)), nextJumpY, objFinalKurathSpikeDown);
                    }
                }
                _XOff = -16;
            }else{
                for(var i=1;i&lt;=4;i++){
                    instance_create((nextJumpX + 32*(i+1)), (nextJumpY - 32), objFinalKurathSpikeUp);
                    instance_create((nextJumpX + 32*(i+1)), nextJumpY, objFinalKurathSpikeDown);
                }
            }
            
            instance_create((nextJumpX + 192), nextJumpY, objFinalTilesAutomaticBlock);
            nextJumpX += (224 + _XOff);
        }
        break;
    
    case 8:  // Expanded downward plane
        {
            if (buff()){
                _XOff = 0;
                _YOff = 0;
            }else{
                _XOff = 12;
                _YOff = 0;
            }
            
            // left side
            for(var j=0; j&lt;4; j++;){
                instance_create(nextJumpX, (nextJumpY + 32*j), objFinalTilesAutomaticBlock);
            }
            // bottom landing
            for(var i=0; i&lt;5; i++;){
                instance_create((nextJumpX + 32*i), (nextJumpY + 128), objFinalTilesAutomaticBlock);
            }
            // right wall
            for(var j=-5; j&lt;=0; j++;){
                instance_create((nextJumpX + 96)  + _XOff, (nextJumpY + 32*j), objFinalTilesAutomaticBlock);
            }
            (instance_create((nextJumpX + 96)  + _XOff, (nextJumpY - 176), objFinalKurathSpikeUp)).mini = true;
            (instance_create((nextJumpX + 112)  + _XOff, (nextJumpY - 176), objFinalKurathSpikeUp)).mini = true;
            instance_create((nextJumpX + 64)  + _XOff, nextJumpY, objFinalKurathSpikeLeft);
            
            instance_create((nextJumpX + 32), (nextJumpY + 80 + _YOff), objFinalKurathSpikeRight);
            
            nextJumpX = (nextJumpX + 144);
            nextJumpY = min(nextJumpY + 80, nextJumpYMax);
        }
        break;
    
    case 9:  // Twin spikes
        {
            if (buff()){_YOff = 24;}
            
            (instance_create(nextJumpX, (nextJumpY + 24) + _YOff, objFinalTilesAutomaticBlock)).autoTiled = true;
            (instance_create((nextJumpX + 32), (nextJumpY - 8) - _YOff, objFinalTilesAutomaticBlock)).autoTiled = true;
            (instance_create((nextJumpX + 64), (nextJumpY - 8) - _YOff, objFinalTilesAutomaticBlock)).autoTiled = true;
            (instance_create((nextJumpX + 96), (nextJumpY + 24) + _YOff, objFinalTilesAutomaticBlock)).autoTiled = true;
            instance_create((nextJumpX + 32), (nextJumpY - 40) - _YOff, objFinalKurathSpikeUp);
            instance_create((nextJumpX + 64), (nextJumpY - 40) - _YOff, objFinalKurathSpikeUp);
            if (buff()){
                for (var i=0; i&lt;4; i++){
                    (instance_create((nextJumpX + 32) + 16*i, (nextJumpY + 24) - _YOff, objFinalKurathSpikeDown)).mini = true;
                }
            }
            
            nextJumpX = (nextJumpX + 128);
        }
        break
    case 10:  // Spike tower
        {
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            
            if (!buff()){
                _YOff = 32;
            }else{
                instance_create((nextJumpX + 32), (nextJumpY - 32) + _YOff, objFinalKurathSpikeDown);  // inside block if not buffed
            }
            
            instance_create((nextJumpX + 32), (nextJumpY - 64) + _YOff, objFinalKurathSpikeUp);
            instance_create((nextJumpX + 32), (nextJumpY - 96) + _YOff, objFinalKurathSpikeDown);
            instance_create((nextJumpX + 32), (nextJumpY - 128) + _YOff, objFinalKurathSpikeUp);
            
            nextJumpX = (nextJumpX + 96);
        }
        break
    case 11:  // Upward spike tunnel
        {
            if (buff()){_YOff = 4;}
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 48),  (nextJumpY - 20) - _YOff, objFinalKurathSpikeLeft);
            instance_create((nextJumpX + 80),  (nextJumpY - 20) - _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 80),  (nextJumpY + 12) - _YOff, objFinalKurathSpikeDown);
            instance_create((nextJumpX + 16), (nextJumpY - 112) + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 16), (nextJumpY - 144) + _YOff, objFinalKurathSpikeUp);
            instance_create((nextJumpX + 48), (nextJumpY - 112) + _YOff, objFinalKurathSpikeRight);
            
            nextJumpX = (nextJumpX + 112);
            nextJumpY = max(nextJumpY - 32, nextJumpYMin);
        }
        break
    case 12:  // Expanded T-Bone into expanded gate
        {
            //bottom blocks
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), nextJumpY, objFinalTilesAutomaticBlock);
            
            //bottom spikes
            instance_create((nextJumpX + 32), (nextJumpY - 64), objFinalKurathSpikeUp);
            instance_create((nextJumpX + 32), (nextJumpY - 32), objFinalKurathSpikeDown);
            instance_create((nextJumpX + 64), (nextJumpY - 32), objFinalKurathSpikeUp);
            
            if (!buff()){_YOff = -24;}
            //shurikens
            instance_create((nextJumpX + 64), (nextJumpY - 176)  + _YOff, objFinalKurathSpikeUp);
            instance_create((nextJumpX + 64), (nextJumpY - 144)  + _YOff, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), (nextJumpY - 112)  + _YOff, objFinalKurathSpikeDown);
            instance_create((nextJumpX + 32), (nextJumpY - 144)  + _YOff, objFinalKurathSpikeLeft);
            instance_create((nextJumpX + 96), (nextJumpY - 144)  + _YOff, objFinalKurathSpikeRight);
            
            //instance_create((nextJumpX + 64), (nextJumpY - 64), objFinalTilesAutomaticBlock);
            //instance_create((nextJumpX + 64), (nextJumpY - 96), objFinalTilesAutomaticBlock);
            //instance_create((nextJumpX + 32), (nextJumpY - 128), objFinalTilesAutomaticBlock);
            //instance_create((nextJumpX + 32), (nextJumpY - 160), objFinalTilesAutomaticBlock);
            
            nextJumpX = (nextJumpX + 128);
            nextJumpY = (nextJumpY + 32);
        }
        break;
}

nextJumpX += irandom_range(6, 8)*16;
var _yFluct = irandom_range(24, 56);
if (nextJumpY - _yFluct &lt; nextJumpYMin + 64){
    nextJumpY += roundSane(_yFluct*1.5);
}else if (nextJumpY + _yFluct &gt; nextJumpYMax - 64){
    nextJumpY -= roundSane(_yFluct*1.5);
}else{
    nextJumpY = clamp(nextJumpY + _yFluct*choose(1, -1), nextJumpYMin, nextJumpYMax);
}

with (objFinalTilesAutomaticBlock){
    if (!destroyed &amp;&amp; !autoTiled){
        event_user(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Separation between jump chains
var _xBuff = 0, _yBuff = 0;
if (room == rFinalBoss_2){
    if (nextJumpY &lt;= nextJumpYMin + 80){
        spawn = 0;
    }else if (nextJumpY &gt;= nextJumpYMax - 80){
        spawn = choose(1, 2);
    }else{
        spawn = choose(0, 0, 1, 3);
    }
}

switch (spawn)
{
    case 0:  // Downward Steps
        {
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            
            if (buff()){
                instance_create((nextJumpX + 64), (nextJumpY + 96), objFinalTilesAutomaticBlock);
                instance_create((nextJumpX + 96), (nextJumpY + 96), objFinalTilesAutomaticBlock);
                instance_create((nextJumpX + 128), (nextJumpY + 96), objFinalTilesAutomaticBlock);
            }else{
                instance_create((nextJumpX + 128), (nextJumpY + 96), objFinalTilesAutomaticBlock);
                instance_create((nextJumpX + 160), (nextJumpY + 96), objFinalTilesAutomaticBlock);
                instance_create((nextJumpX + 192), (nextJumpY + 96), objFinalTilesAutomaticBlock);
            }
            
            var _spacing;
            if (buff()){
                _spacing = 176;
            }else{
                _spacing = 240;
            }
            nextJumpX += _spacing;
            nextJumpY += 96;
        }
        break;
    case 1:  // Upward Steps
        {
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            
            instance_create((nextJumpX + 128), (nextJumpY - 72), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 160), (nextJumpY - 72), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 192), (nextJumpY - 72), objFinalTilesAutomaticBlock);
            
            nextJumpX = (nextJumpX + 208);
            nextJumpY = (nextJumpY - 72);
        }
        break;
    case 2:  // StairMaster  (not in buffed fight)
        {
            var _gap;
            _gap = irandom_range(-3, -4);
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), (nextJumpY + (_gap * 32)), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), (nextJumpY + (_gap * 32)), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 128), (nextJumpY + (_gap * 32)), objFinalTilesAutomaticBlock);
            nextJumpX = (nextJumpX + 160);
            nextJumpY = (nextJumpY + 32 * _gap);
        }
        break;
    case 3:  // Staircase
        {
            instance_create(nextJumpX, nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 32), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 64), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), nextJumpY, objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), (nextJumpY - 32), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), (nextJumpY - 64), objFinalTilesAutomaticBlock);
            instance_create((nextJumpX + 96), (nextJumpY - 96), objFinalTilesAutomaticBlock);
            
            //floating block
            instance_create((nextJumpX + 48), (nextJumpY - 48), objFinalTilesAutomaticBlock);
            nextJumpX = (nextJumpX + 128);
            nextJumpY = (nextJumpY - 96);
        }
        break;
    case 4:  // Platforms moving down  (only in buffed fight)
        {
            var _inst;
            var _width = 3;
            var _spacing = 0;
            var _vspd = 2;
            
            for (var i=0; i &lt; _width; i++){
                _inst = instance_create(nextJumpX + 32*i, -48, objFinalKurathMovingblockSpawner);
                _inst.spawnVSpd = _vspd;
                if (i == 0){
                    _spacing = _vspd * (_inst.alarm[0]);
                }
                
                // Make the jump look like it had already spawned platforms before it was generated
                if (_spacing &gt; 0){  // failsafe
                    for (var j = -48; j &lt; (room_height + 48); j += _spacing){
                        _inst = instance_create(nextJumpX + 32*i + 16, j + 16, objFinalKurathMovingblock);
                        _inst.vspd = _vspd;
                        _inst.type = 0;
                    }
                }
            }
            nextJumpX += 112;
            nextJumpY -= irandom_range(80, 112);
        }
        break;
    case 5:  // Platform ferris wheel  (only in buffed fight)
        {
            // Set variables
            var _inst;
            var _platformBlocks = 3;
            var _rad = 180;
            var _platformNum = 5;
            
            var _angInc = 360/_platformNum;
            var _xOff, _wheelX, _wheelY;
            _xOff = (-32 * ((_platformBlocks - 1)/2));
            _wheelX = floor(max((view_xview + view_wview), nextJumpX) + (_rad - _xOff)); //(lengthdir_x(_rad, 90 + _angInc) - _xOff);
            _wheelY = nextJumpY;
            //nextJumpX/Y are used for the vertical blockade
            nextJumpX = _wheelX - 16;
            /*
            //Create the vertical blockade
            for (var j = (nextJumpY - 64) - 48; j &gt;= -64; j-=32){
                instance_create((nextJumpX), j+16, objFinalTilesAutomaticNoblock);
                instance_create((nextJumpX + 32), j+16, objFinalTilesAutomaticNoblock);
            }
            for (var j = nextJumpY + 48; j &lt; room_height+64; j+=32){
                instance_create((nextJumpX), j+16, objFinalTilesAutomaticNoblock);
                instance_create((nextJumpX + 32), j+16, objFinalTilesAutomaticNoblock);
            }
            with (objFinalTilesAutomaticNoblock){event_user(1);}
            
            //Add the block objects
            _inst = instance_create((nextJumpX - 16), -64, objBlock);
            _inst.image_xscale = 2;
            _inst.image_yscale = ((((nextJumpY-16) - 64)+64)/32);
            _inst = instance_create((nextJumpX - 16), nextJumpY + 48, objBlock);
            _inst.image_xscale = 2;
            _inst.image_yscale = (((608+64) - _inst.y)/32);
            
            //Spikes
            _inst = instance_create(nextJumpX-16, nextJumpY + 16, objMakerSpikeUp);
            _inst = instance_create(nextJumpX+16, nextJumpY + 32, objMakerSpikeUp);
            _inst.mini = true;
            _inst = instance_create(nextJumpX+32, nextJumpY + 32, objMakerSpikeUp);
            _inst.mini = true;
            _inst = instance_create(nextJumpX-16, nextJumpY - 80, objMakerSpikeDown);
            _inst.mini = true;
            _inst = instance_create(nextJumpX, nextJumpY - 80, objMakerSpikeDown);
            _inst.mini = true;
            _inst = instance_create(nextJumpX+16, nextJumpY - 80, objMakerSpikeDown);
            */
            
            for (var i=0; i&lt;_platformBlocks; i++){
                for (var j=0; j&lt;_platformNum; j++){
                    _inst = instance_create((_wheelX + _xOff), _wheelY, objFinalKurathMovingblock);
                    _inst.rad = _rad;
                    _inst.angle = 90 + (j*_angInc);
                    _inst.type = 1;
                    with (_inst){event_perform(ev_step, 0);}
                }
                _xOff += 32;
            }
            
            nextJumpX += (_rad + 112);
            nextJumpY -= irandom_range(80, 112);
        }
        break;
}
nextJumpX += 80;
nextJumpY = clamp(nextJumpY, nextJumpYMin, nextJumpYMax);

with (objFinalTilesAutomaticBlock){
    if (!autoTiled &amp;&amp; !destroyed){
        event_user(1);
    }
}
with (objFinalTilesAutomaticNoblock){
    if (!autoTiled &amp;&amp; !destroyed){
        event_user(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_alpha &gt; 0 &amp;&amp; !deleteWhenPossible){
    /*if (sprite_index == sprFinalKurathChaser){
        switch (floor(animCount) mod 6){
            case 0:
                draw_sprite_ext(sprMrScribbleFace, 0, x-10*image_xscale, y, 0.6, 0.6, 0, c_white, 1);
                break;
            case 1:
                draw_sprite_ext(sprMrScribbleFace, 0, x, y+6*image_yscale, 0.6, 0.6, 0, c_white, 1);
                break;
            case 2:
                draw_sprite_ext(sprMrScribbleFace, 0, x+4*image_xscale, y+6*image_yscale, 0.6, 0.6, 0, c_white, 1);
                break;
            case 3:
                draw_sprite_ext(sprMrScribbleFace, 0, x-4*image_xscale, y, 0.6, 0.6, 0, c_white, 1);
                break;
            case 4:
                draw_sprite_ext(sprMrScribbleFace, 0, x-16*image_xscale, y, 0.6, 0.6, 0, c_white, 1);
                break;
            case 5:
                draw_sprite_ext(sprMrScribbleFace, 0, x-8*image_xscale, y-4*image_yscale, 0.6, 0.6, 0, c_white, 1);
                break;
        }
    }else if (sprite_index == sprFinalKurathChaserDisintegrate){
        switch (floor(animCount)){
            case 0:
                break;
            case 1:
                draw_sprite_ext(sprMrScribbleFace, 0, x-47*image_xscale, y+142*image_yscale, 0.6, 0.6, 0, c_white, 1);
                break;
            case 2:
                draw_sprite_ext(sprMrScribbleFace, 0, x-47*image_xscale, y+126*image_yscale, 0.6, 0.6, 0, c_white, 1);
                break;
            case 3:
                draw_sprite_ext(sprMrScribbleFace, 0, x-47*image_xscale, y+109*image_yscale, 0.6, 0.6, 0, c_white, 1);
                break;
            case 4:
                draw_sprite_ext(sprMrScribbleFace, 0, x-47*image_xscale, y+92*image_yscale, 0.6, 0.6, 0, c_white, 1);
                break;
            case 5:
                draw_sprite_ext(sprMrScribbleFace, 0, x-47*image_xscale, y+70*image_yscale, 0.6, 0.6, 0, c_white, 1);
                break;
            case 6:
                draw_sprite_ext(sprMrScribbleFace, 0, x-47*image_xscale, y+49*image_yscale, 0.6, 0.6, 0, c_white, 1);
                break;
            case 7:
                draw_sprite_ext(sprMrScribbleFace, 0, x-47*image_xscale, y+12*image_yscale, 0.6, 0.6, 0, c_white, 1);
                break;
        }
    }*/
    draw_self();
}

if (global.extraEffects){
    for(var i=particleSize-1; i&gt;=0;i--){
        if (particleExists[i]){
            draw_sprite_ext(sprFinalKurathParticles, particleInd[i], view_xview + particleX[i], particleY[i], particleScale[i], particleScale[i], particleAng[i], c_white, particleAlpha[i]);
            draw_sprite_ext(sprFinalKurathParticles, particleInd[i], max(view_xview, 0) + 800 - particleX[i], 608-particleY[i], particleScale[i], particleScale[i], particleAng[i], c_white, particleAlpha[i]);
        }
    }
}else{
    draw_sprite_ext(sprS4HorizontalFade, 0, view_xview -10, 0, 4/3, 19, 0, particleReplacementFadeCol, particleReplacementFade);
    draw_sprite_ext(sprS4HorizontalFade, 0, max(view_xview, 0) + 800+10, 0, -4/3, 19, 0, particleReplacementFadeCol, particleReplacementFade);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
