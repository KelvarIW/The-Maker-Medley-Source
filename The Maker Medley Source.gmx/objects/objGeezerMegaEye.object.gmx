<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGeezerMegaEyeBlur</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objPlayerKiller</parentName>
  <maskName>sprGeezerMegaEyeBlur_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
image_xscale = 6;
image_yscale = image_xscale;
grav = 0.08;
rotating = true;
rotatingAngle = 0;
rotateTransitionAlpha = 1;
moving = false;
hSpdNext = 0;
vSpdNext = 0;
collider = noone;
collideWithOtherInstances = false;
hp = 4;
whiteFrames = -1;
lowestY = 560;
eyeIndex = 0;
slideSpd = 4;

delay = 8;
if (buff()){
    delay = 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Begin moving after pause
if (instance_exists(collider)){
    if (eyeIndex == 1){
        if (moving || !instance_exists(objPlayer)){
            alarm[1] = delay;
            eyeIndex = 2;
            moving = false;
        }else{
            with (collider){
                if (!other.collideWithOtherInstances){
                    hSpd = other.hSpdNext;
                    vSpd = other.vSpdNext;
                    other.eyeIndex = 0;
                    other.moving = true;
                }else{
                    if (place_meeting(x+sign(other.hSpdNext), y+sign(other.vSpdNext), objGeezerMegaEyeCollider)){
                        other.alarm[1] = 1;
                        other.eyeIndex = 2;
                    }else{
                        hSpd = other.hSpdNext;
                        vSpd = other.vSpdNext;
                        other.eyeIndex = 0;
                        other.moving = true;
                    }
                }
            }
        }
    }else if (instance_exists(objPlayer)){
        var _movementSpeed;
        _movementSpeed = slideSpd;
        
        hSpdNext = 0;
        vSpdNext = 0;
        if (y &lt; lowestY || (y &lt; 560 &amp;&amp; collision_line(32, 560, 768, 560, object_index, false, false) == noone)){
            vSpdNext = _movementSpeed;
            lowestY = 560;
            collider.lowestY = lowestY;
            collider.stopAtLayer = false;
        }else{
            if (objPlayer.x &lt; x - 8){
                hSpdNext = -_movementSpeed;
            }else if (objPlayer.x &gt; x + 8){
                hSpdNext = _movementSpeed;
            }else{
                if (objPlayer.y &gt; y+16){
                    vSpdNext = _movementSpeed;
                }else{ //objPlayer.y &lt; y
                    hSpdNext = _movementSpeed * sign(objPlayer.xScale);
                    /*alarm[1] = (delay/2);
                    eyeIndex = 2;
                    collider.hSpd = 0;
                    collider.vSpd = 0;
                    exit;*/
                }
            }
        }
        with (collider){
            if (!other.collideWithOtherInstances){
                other.alarm[1] = (other.delay);
                other.eyeIndex = 1;
            }else{
                if (place_meeting(x+sign(other.hSpdNext), y+sign(other.vSpdNext), objGeezerMegaEyeCollider)){
                    other.alarm[1] = 1;
                    other.eyeIndex = 2;
                    other.hSpdNext = 0;
                    other.vSpdNext = 0;
                    hSpd = 0;
                    vSpd = 0;
                }else{
                    other.alarm[1] = (other.delay);
                    other.eyeIndex = 1;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Rotating
sprite_index = sprGeezerMegaEye;
mask_index = -1;
rotatingAngle = 0;

//Prevent getting stuck in a block
if (place_meeting(x, y, objBlock)){
    x = xprevious;
    y = yprevious;
    move_contact_solid(90  - 90*sign(hspeed), ceil(abs(hspeed)));
    move_contact_solid(180 + 90*sign(vspeed), ceil(abs(vspeed)));
}

hspeed = 0;
vspeed = 0;
rotating = false;
eyeIndex = 2;
collider = instance_create(x - 16, y - 16, objGeezerMegaEyeCollider);
collider.creator = id;
collider.lowestY = lowestY - 16;
alarm[1] = delay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scale
if (image_xscale &gt; 1){
    image_xscale -= 1/3;
    if (image_xscale &lt; 1){image_xscale = 1;}
    image_yscale = image_xscale;
}

if (rotating){
    if (place_meeting(x, y, objBlock)){
        sprite_index = sprGeezerMegaEye;
        mask_index = -1;
        eyeIndex = 0;
        image_angle = 0;
        x = xprevious;
        y = yprevious;
        if (hspeed != 0) move_contact_solid(90 - 90*sign(hspeed), ceil(abs(hspeed))+1);
        if (vspeed != 0) move_contact_solid(180 +90*sign(vspeed), ceil(abs(vspeed))+1);
        x = floor(x);
        y = ceil(y);
        hspeed = 0;
        vspeed = 0;
        rotating = false;
        eyeIndex = 2;
        if (gravity != 0){ //for final wave
            alarm[1] = 30;
            gravity = 0;
            var _snd = audio_play_sound(sndMakerBossHit, 0, 0);
            audio_sound_pitch(_snd, PITCH_FLUCT);
            whiteFrames = 8;
        }else{
            alarm[0] = -1;
            alarm[1] = 10;
        }
        collider = instance_create(x - 16, y - 16, objGeezerMegaEyeCollider);
        collider.creator = id;
        collider.lowestY = lowestY - 16;
        image_angle = 0;
        
    }
}else if (instance_exists(collider)){
    x = collider.x + 16;
    y = collider.y + 16;
}

if (rotateTransitionAlpha &gt; 0){
    rotatingAngle += 22.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (rotating &amp;&amp; vspeed &lt; 8 &amp;&amp; gravity == 0){
    vspeed += grav;
    if (vspeed &gt; 8) vspeed = 8;
}else{
    if (!rotating &amp;&amp; rotateTransitionAlpha &gt; 0){
        rotateTransitionAlpha -= 0.1;
    }
}
if (whiteFrames &gt; 0){
    whiteFrames --;
    if (whiteFrames &lt;= 0){
        depth = -10;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage from bullets
if (whiteFrames &lt;= 0 &amp;&amp; eyeIndex != 2 &amp;&amp; !rotating){
    hp --;
    if (hp &gt; 0){
        var _snd = audio_play_sound(sndMakerBossHit, 0, 0);
        audio_sound_pitch(_snd, PITCH_FLUCT);
        
        whiteFrames = 8;
        depth = -11;
    }else{
        var _snd = audio_play_sound(sndMakerSampleGlass, 0, 0);
        audio_sound_pitch(_snd, PITCH_FLUCT);
        audio_sound_gain(_snd, 0.7, 0);
        
        var _inst = instance_create(x, y, objMakerDeathEffect);
        with(collider){instance_destroy();}
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (whiteFrames &lt;= 0){
    if (!rotating){
        //if (hp &lt; 3){draw_sprite_ext(sprGeezerMegaDamage, (2 - hp), x, y, image_xscale, image_yscale, 0, c_white, 1);}
        draw_sprite_ext(sprGeezerMegaEyeCover, eyeIndex, x, y, image_xscale, image_yscale, 0, c_white, 1);
        draw_sprite_ext(sprGeezerMegaEyeCover, eyeIndex, x, y, image_xscale, image_yscale, 0, c_white, 1);
        
        if (rotateTransitionAlpha &gt; 0){
            draw_sprite_ext(sprGeezerMegaEye, 0, x, y, image_xscale, image_yscale, 0, c_white, (1-rotateTransitionAlpha));
            draw_sprite_ext(sprGeezerMegaEyeCover, eyeIndex, x, y, image_xscale, image_yscale, 0, c_white, 1);
            draw_sprite_ext(sprGeezerMegaEyeBlur, 0, x, y, image_xscale/3, image_yscale/3, rotatingAngle, c_white, rotateTransitionAlpha);
        }else{
            draw_sprite_ext(sprGeezerMegaEye, 0, x, y, image_xscale, image_yscale, 0, c_white, 1);
            draw_sprite_ext(sprGeezerMegaEyeCover, eyeIndex, x, y, image_xscale, image_yscale, 0, c_white, 1);
        }
    }else{
        draw_sprite_ext(sprGeezerMegaEyeBlur, 0, x, y, image_xscale/3, image_yscale/3, rotatingAngle, c_white, 1);
    }
}else{
    draw_sprite_ext(sprGeezerMegaEyeW, 0, x, y, 1, 1, 0, c_white, 1); //much less intensive than using d3d fog
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
