<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerWarp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objMakerWarp</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_alpha = 0;
part = 0;  // dual attack (removed) only:   -1 = left; 1 = right
destX = 400;
state = 0; // only relevant to buffed mode
delay = -1;
counter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particles (modifed to account for buff mode half warps)
var _particle;

partAngle = random(360);
if (part == 0){
    _particle = instance_create(x + image_xscale*lengthdir_x(irandom_range(74, 90), partAngle), y + image_yscale*lengthdir_y(irandom_range(74, 90), partAngle), objMakerWarpParticle);
}else{
    _particle = instance_create(x + (image_xscale/2)*lengthdir_x(irandom_range(74, 90), partAngle), y + image_yscale*lengthdir_y(irandom_range(74, 90), partAngle), objMakerWarpParticle);
}
_particle.target = id;
alarm[0] = irandom_range(9, 18);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (part == 0){
    if (image_alpha &lt; 1){
        image_alpha = min(image_alpha + 1/60, 1);
        y = lerp(ystart, ystart - 96, sin(image_alpha  *  pi/2));
    }
}else{
    if (delay &gt; 0){
        delay --;
    }else{
        if (state == 0){
            var _alphaTo = 0.6;
            
            if (image_alpha &lt; _alphaTo){
                image_alpha = min(image_alpha + _alphaTo/60, _alphaTo);
                y = lerp(ystart, ystart - 96, sin(image_alpha/_alphaTo  *  pi/2));
            }
            if (image_alpha &gt;= _alphaTo){
                var _changeState = true;
                with (object_index){
                    if (image_alpha &lt; _alphaTo){  // ensure both parts are ready
                        _changeState = false;
                    }
                }
                
                if (_changeState){
                    with (object_index){
                        state = 1;
                        delay = 12;
                        counter = 0;
                    }
                }
            }
        }else if (state == 1){
            var _len = 68;
            counter = min(counter + 1, _len);
            x = xstart + part * 80*sin(counter/_len * pi);
            if (counter &gt;= _len){
                counter = 0;
                state = 2;
                hspeed = (x - xprevious);
            }
        }else if (state == 2){
            if (hspeed != 0 &amp;&amp; abs(x - destX) &lt;= abs(hspeed)){
                x = destX;
                hspeed = 0;
            }
            
            if (hspeed == 0){
                var _ready = true;
                with (object_index){
                    if (hspeed != 0){  // stop if one part is not ready
                        _ready = false;
                    }
                }
                
                if (_ready){
                    var _inst;
                    _inst = instance_create(destX, y, objFinalBossEndDieEffect);
                    
                    with (object_index){
                        if (part == -1){
                            instance_destroy();
                        }else{
                            part = 0;
                            image_alpha = 0.75;
                        }
                    }
                    with (objMakerWarpParticle){target = other.object_index;}  // make all particles target the remaining warp
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_alpha &gt;= 0.8){
    event_inherited();
    with (objPlayer){
        instance_destroy();
    }
     
    if (!global.practicing){
        var _ident = noone;
        // get clear type and set stat global variables
        if (global.challengeMode &amp;&amp; global.startedBossFromBeginning){
            _ident = 5.3;
            global.scribbleHardPerfectCompleted = true;
        }else if (global.startedBossFromBeginning){
            _ident = 5.2;
            global.scribblePerfectCompleted = true;
        }else if (global.challengeMode &amp;&amp; !global.scribbleHardCompleted){
            _ident = 5.1;
            global.scribbleHardCompleted = true;
        }else if (!global.challengeMode &amp;&amp; !global.scribbleBeaten){
            _ident = 5.0;
            global.scribbleBeaten = true;
        }
        
        // create pop-up
        if (_ident != noone){
            var _popup = instance_create(0, 0, objMakerRecordAchieved);
            with (_popup){
                ident = _ident;
                event_user(0);
            }
        }
        
        // record game as cleared (in case player closes the game during the credits)
        global.farthestRoom = max(scrGetRoomNum(rTMM_ClearLobby), global.farthestRoom);
        global.gameClear = true;
        global.saveGameClear = true;
        scrSaveGame(false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (part == 0){
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
}else{
    if (part == -1){
        draw_sprite_part_ext(sprite_index, image_index, 0, 0, 16, 32, x-8, y, image_xscale, image_yscale, image_blend, image_alpha);
    }else{
        draw_sprite_part_ext(sprite_index, image_index, 16, 0, 16, 32, x-8, y, image_xscale, image_yscale, image_blend, image_alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
