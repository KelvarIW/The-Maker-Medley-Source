<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = -4;
following = noone;
expandAmt = 0;
colors = 4;  // # of colors in cycle
color[(colors-1)] = c_white;

color[0] = c_red;
color[1] = c_yellow;
color[2] = c_aqua;
color[3] = c_fuchsia;

colorTimer = 0;
colorLen = 20;  // length of each color transition in cycle
colorCycleLen = colorLen*colors;  // length of entire cycle
spotlightCol = color[0];
frozen = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    if (instance_exists(following) &amp;&amp; !following.dead){
        x = following.x;
        if (expandAmt &lt; 1){
            expandAmt = min((expandAmt + 0.05),  1);
        }
    }else{
        if (expandAmt &gt; 0){
            expandAmt = max((expandAmt - 0.05),  0);
        }
        image_alpha -= 0.075;
        if (image_alpha &lt; 0)
            instance_destroy();
    }
    
    colorTimer ++;
    if (colorTimer &gt;= colorCycleLen){
        colorTimer = (colorTimer mod colorCycleLen);
    }
    
    colorTimer = clamp(colorTimer, 0, (colorCycleLen-1));  // failsafe
    var _col1, _col2, _interp;
    _col1 = color[ (colorTimer div 20)];
    _col2 = color[((colorTimer div 20)+1) mod colors];
    _interp = (colorTimer mod 20)/20;
    
    spotlightCol = merge_color(_col1, _col2, _interp);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw normally
if (!surface_exists(global.sharedSurf)){
    global.sharedSurf = surface_create(800, 608);
}
if (surface_exists(global.sharedSurf)){
    var _spotlightX = (x - view_xview);
    var _spotlightY = (min(y, 544) - view_yview);
    
    surface_set_target(global.sharedSurf);
    draw_clear_alpha(c_black, 0);
    
    draw_set_color(c_white);
    draw_ellipse(_spotlightX - (40*expandAmt), _spotlightY - 32, _spotlightX + (40*expandAmt), _spotlightY+32, false);
    draw_triangle(_spotlightX, -20, _spotlightX - (40*expandAmt), _spotlightY, _spotlightX + (40*expandAmt), _spotlightY, false);
    surface_reset_target();
    if (surface_exists(global.sharedSurf)){
        draw_surface_ext(global.sharedSurf, view_xview, view_yview, 1, 1, 0, spotlightCol, 0.15*image_alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw white and opaque
if (!surface_exists(global.sharedSurf)){
    global.sharedSurf = surface_create(800, 608);
}
if (surface_exists(global.sharedSurf)){
    var _spotlightX = (x - view_xview);
    var _spotlightY = (min(y, 544) - view_yview);
    
    surface_set_target(global.sharedSurf);
    draw_clear_alpha(c_black, 0);
    
    draw_set_color(c_white);
    draw_ellipse(_spotlightX - (40*expandAmt), _spotlightY - 32, _spotlightX + (40*expandAmt), _spotlightY+32, false);
    draw_triangle(_spotlightX, -20, _spotlightX - (40*expandAmt), _spotlightY, _spotlightX + (40*expandAmt), _spotlightY, false);
    surface_reset_target();
    if (surface_exists(global.sharedSurf)){
        draw_surface_ext(global.sharedSurf, view_xview, view_yview, 1, 1, 0, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
