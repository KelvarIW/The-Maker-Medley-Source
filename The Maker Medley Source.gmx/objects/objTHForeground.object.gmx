<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerHeart</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>colDBlue = make_color_rgb(56, 68, 138);
colBlue = make_color_rgb(102, 166, 229);
focusIconAmt = 0;

playerHP = 6;
playerHPMax = playerHP;
heartDisappear[(playerHP-1)] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(objTHKid)){
    focusIconAmt = clamp(3 * objTHKid.hitboxShownPercent, 0, 1);
}else{
    focusIconAmt = max(focusIconAmt - 0.1, 0);
}

for (var i=max(playerHP, 0); i&lt;playerHPMax; i++){
    heartDisappear[i] = min(heartDisappear[i] + 0.1, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Right-side border
var _textX = 658;
var _livesTextY = 196;
// focus
var _topTextY = 414;
var _botTextY = 519;

// Right-side sprites
for(var i=0;i&lt;playerHPMax;i++){
    if (heartDisappear[i] &lt; 1){
        draw_sprite_ext(sprMakerHeart, global.count*18/50, 658 + 54*((i mod 3) - 1), (_livesTextY+60) + 48*(i div 3), 2 + 1.5*heartDisappear[i], 2 + 1.5*heartDisappear[i], 11.25*sin(global.count*pi/36), c_white, (1 - heartDisappear[i]));
    }
}
draw_sprite_ext(sprTouhouFocusIcon, global.count * 16/50, _textX, 466, 1.5, 1.5, 0, merge_color(c_gray, c_white, focusIconAmt/2), 1);
draw_sprite(sprTouhouFocusButton, 0, _textX, _botTextY+1);

//Right-side text
var _keybind = scrGetBind(global.jumpButton, global.controllerMode, "Jump");
if (!is_string(_keybind) || string_width(_keybind) &gt; 72){
    _keybind = "Jump";
}

//Text w/ shadow
if (!surface_exists(global.sharedSurf)){
    global.sharedSurf = surface_create(800, 608);
}
if (surface_exists(global.sharedSurf)){
    surface_set_target(global.sharedSurf);
    draw_clear_alpha(c_black, 0);
    
    draw_set_font(fFlappyCounter);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    
    draw_set_color(colDBlue);
    draw_text(_textX + 1, _livesTextY + 1, "LIVES");
    draw_text_transformed(_textX + 1, _topTextY + 1, "FOCUS", 0.72, 0.72, 0);
    draw_text_transformed(_textX + 1, _botTextY + 1, _keybind, 0.67, 0.67, 0);
    
    draw_set_color(colBlue);
    draw_text(_textX - 1, _livesTextY - 1, "LIVES");
    draw_text_transformed(_textX - 1, _topTextY - 1, "FOCUS", 0.72, 0.72, 0);
    draw_text_transformed(_textX - 1, _botTextY - 1, _keybind, 0.67, 0.67, 0);
    draw_set_color(c_white);
    
    surface_reset_target();
    
    
    if (surface_exists(global.sharedSurf)){
        var _thick = 2;
        var _prec = 16;
        var _inc = 360/_prec;
        var _ang = 45;
        
        repeat(_prec){
            _ang += _inc;
            draw_surface_ext(global.sharedSurf, _thick*dcos(_ang), _thick*(-dsin(_ang)), 1, 1, 0, c_black, 1);
        }
        draw_surface(global.sharedSurf, 0, 0);
    }
}

// Intro + Name Text
with (objTHCtrl){
    event_user(4);
}

// Boss tracking light
with (objTHLights){
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
