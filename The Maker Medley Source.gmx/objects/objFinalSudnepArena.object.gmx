<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFinalSudnepTiles</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tileCol = make_color_rgb(62, 172, 154);

var _block;
//left
_block = instance_create(0, 0, objBlock);
_block.image_xscale = 4;
_block.image_yscale = 19;
//right
_block = instance_create(672, 0, objBlock);
_block.image_xscale = 4;
_block.image_yscale = 19;
//top
_block = instance_create(128, 0, objBlock);
_block.image_xscale = 17;
_block.image_yscale = 3;
//bottom
_block = instance_create(128, 512, objBlock);
_block.image_xscale = 17;
_block.image_yscale = 3;

projSurfAlpha = 0;

with (objFinalBossDraw){
    undertale = false;
}

blockNum = 254; //254!!!!!!
var _horizontalNum = 150; //number of the tiles that will be ordered horizontally

//8 vertical columns
for (var i=blockNum-1; i &gt;= _horizontalNum; i--){
    blockX[i] = ((i - _horizontalNum) div 13) * 32 + 16;
    if (i &gt;= 202){
        blockX[i] += 17 * 32;
    }
    blockY[i] = 96 + ((i - _horizontalNum) mod 13) * 32 + 16;
    blockInd[i] = 7;
    blockHSpd[i] = 0;
    blockVSpd[i] = 0;
    blockRot[i] = 0;
    blockAng[i] = 0;
    blockActive[i] = false;
}

//6 horizontal rows
for (var i=_horizontalNum-1; i &gt;= 0; i--){
    blockX[i] = (i mod 25) * 32 + 16;
    blockY[i] = (i div 25) * 32 + 16;
    if (i &gt;= 75){ //3*25
        blockY[i] += 13 * 32;
    }
    blockInd[i] = 7;
    blockHSpd[i] = 0;
    blockVSpd[i] = 0;
    blockRot[i] = 0;
    blockAng[i] = 0;
    blockActive[i] = false;
}

//indexes: 0 = corner; 1 = horizontal, 2 = connects on left, 3 = connects on right; 4 = vertical, 5 = connects on top, 6 = connects on bottom; 7 = all green;
blockInd[53] = 0;
blockInd[71] = 0;
blockInd[78] = 0;
blockInd[96] = 0;

for (var i=69; i &gt;= 55; i --){
    blockInd[i] = 1;
}
blockInd[54] = 2;
blockInd[70] = 3;

for (var i=94; i &gt;= 80; i --){
    blockInd[i] = 1;
}
blockInd[79] = 2;
blockInd[95] = 3;

for (var i=200; i &gt;= 190; i --){
    blockInd[i] = 4;
}
blockInd[189] = 5;
blockInd[201] = 6;

for (var i=213; i &gt;= 203; i --){
    blockInd[i] = 4;
}
blockInd[202] = 5;
blockInd[214] = 6;

blocksFall = false;
blocksFallTimer = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (projSurfAlpha &gt; 0){
    projSurfAlpha -= 0.0125;
    if (projSurfAlpha &lt;= 0){
        with (objFinalSudnepProj){
            instance_destroy();
        }
    }
}

if (blocksFall){
    for (var i=blockNum-1; i &gt;= 0; i--){
        if (blockActive[i]){
            blockX[i] += blockHSpd[i];
            blockY[i] += blockVSpd[i];
            blockVSpd[i] += 0.165;
            blockAng[i] += blockRot[i];
            if (blockY[i] &gt;= 1312){  // RandomFangamer number
                blockActive[i] = false;
            }
        }
    }
    if (blocksFallTimer &gt;= 0){
        var _delay = 4;
        blocksFallTimer ++;
        if (blocksFallTimer mod _delay == 1){
            var _block = (blocksFallTimer div _delay);
            if (_block &lt;= 2 || _block &gt;= 16){
                var _rowNum = 0;
                if (_block &gt;= 16){
                    _rowNum = 3 + (_block - 16);
                }else{
                    _rowNum = _block;
                }
                var _ang = 0, _spd = 0;
                for (var i = 25*(_rowNum+1) - 1; i &gt;= 25*_rowNum; i--){
                    blockActive[i] = true;
                    _ang = random_range(45, 135);
                    _spd = random_range(3.5, 5.5);
                    blockHSpd[i] = _spd * dcos(_ang);
                    blockVSpd[i] = _spd * (-dsin(_ang));
                    blockRot[i] = random_range(1.4, 3) * choose(1, -1);
                }
            }else{
                for (var i = (150 + (_block-3) + 13*7); i &gt;= 150; i -= 13){
                    blockActive[i] = true;
                    _ang = random_range(45, 135);
                    _spd = random_range(3.5, 5.5);
                    blockHSpd[i] = _spd * dcos(_ang);
                    blockVSpd[i] = _spd * (-dsin(_ang));
                    blockRot[i] = random_range(1.4, 3) * choose(1, -1);
                }
            }
            
            with (objBlock){
                if (bbox_bottom &lt; 608 &amp;&amp; y div 32 == _block){
                    if (image_yscale &lt;= 1){
                        instance_destroy();
                    }else{
                        image_yscale -= 1;
                        y += 32;
                    }
                }
            }
            audio_play_sound(sndMakerSampleGlass, 0, 0);
            if (blocksFallTimer &gt;= 19*_delay){
                blocksFallTimer = -1;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make blocks fall
if (!blocksFall &amp;&amp; !global.dead){
    blocksFall = true;
    blocksFallTimer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!blocksFall &amp;&amp; view_yview &lt;= 0){
    draw_set_color(tileCol);
    draw_rectangle(0, 96, 127, 512, false); //left
    draw_rectangle(673, 96, 800, 512, false); //right
    draw_rectangle(0, -96, 800, 95, false); //top
    draw_rectangle(0, 513, 800, 704, false); //bottom
    draw_set_color(c_white);
    
    //walls (stretched)
    draw_sprite_ext(sprFinalSudnepTiles, 1, 400, 80, 15, 1, 0, c_white, 1); //top
    draw_sprite_ext(sprFinalSudnepTiles, 1, 400, 528, 15, 1, 0, c_white, 1); //bottom
    draw_sprite_ext(sprFinalSudnepTiles, 4, 112, 304, 1, 11, 0, c_white, 1); //left
    draw_sprite_ext(sprFinalSudnepTiles, 4, 688, 304, 1, 11, 0, c_white, 1); //right
    
    //connecting walls
    draw_sprite(sprFinalSudnepTiles, 2, 144, 80); //top
    draw_sprite(sprFinalSudnepTiles, 3, 656, 80);
    draw_sprite(sprFinalSudnepTiles, 2, 144, 528); //bottom
    draw_sprite(sprFinalSudnepTiles, 3, 656, 528);
    draw_sprite(sprFinalSudnepTiles, 5, 112, 112); //left
    draw_sprite(sprFinalSudnepTiles, 6, 112, 496);
    draw_sprite(sprFinalSudnepTiles, 5, 688, 112); //right
    draw_sprite(sprFinalSudnepTiles, 6, 688, 496);
    
    //corners
    draw_sprite(sprFinalSudnepTiles, 0, 112, 80); //tl
    draw_sprite(sprFinalSudnepTiles, 0, 688, 80); //tr
    draw_sprite(sprFinalSudnepTiles, 0, 112, 528); //bl
    draw_sprite(sprFinalSudnepTiles, 0, 688, 528); //br
}else if (blocksFall){
    for (var i=blockNum-1; i &gt;= 0; i--){
        if (blockActive[i] || blockY[i] &lt; 608){
            draw_sprite_ext(sprFinalSudnepTiles, blockInd[i], blockX[i], blockY[i], 1, 1, 0, c_white, 1);
        }
    }
}

if (projSurfAlpha &gt; 0){
    if (!surface_exists(global.sharedSurf)){
        global.sharedSurf = surface_create(800, 608);
    }
    if (surface_exists(global.sharedSurf)){
        surface_set_target(global.sharedSurf);
        draw_clear_alpha(c_black, 0);
        with (objFinalSudnepProj){
            draw_self();
        }
        surface_reset_target();
        
        draw_surface_ext(global.sharedSurf, 0, 0, 1, 1, 0, c_white, projSurfAlpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
