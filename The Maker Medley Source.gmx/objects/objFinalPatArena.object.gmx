<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFinalTilesGray</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffTimer = -1;
buffAnimLen = 63;

if (buff()){
    y += 96;
    if (global.practicing &amp;&amp; global.practiceBoss == 5 &amp;&amp; global.practiceWaypointStart == 4){
        buffTimer = buffAnimLen;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (buffTimer &gt;= 0 &amp;&amp; buffTimer &lt; buffAnimLen){
    buffTimer ++;
    if (buffTimer &gt;= buffAnimLen){
        buffTimer = buffAnimLen;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Arena Tiles
var  _cornerTileIndex = floor(global.count/20) mod 6;
var _connectTileIndex = abs(2 - (floor((global.count*6/50) + 2) mod 4));

if (bbox_left &lt; view_xview + view_wview){
    with (objBlock){
        if (bbox_left &gt;= other.bbox_left){
            // 2 corner tiles + 2 transition tiles + &gt;=1 connector tile(s)
            if (image_xscale &gt;= 5){
                draw_sprite(sprFinalTilesGray, _cornerTileIndex, bbox_left + 16, bbox_top + 16);
                draw_sprite(sprFinalTilesGray, 6+_connectTileIndex, bbox_left + 48, bbox_top + 16);
                
                for (var i=2; i &lt; image_xscale-2; i += 1){
                    draw_sprite(sprFinalTilesGray, 9 + _connectTileIndex, bbox_left + (i*32) + 16, bbox_top + 16);
                }
                
                draw_sprite(sprFinalTilesGray, 12+_connectTileIndex, (bbox_right+1) - 48, bbox_top + 16);
                draw_sprite(sprFinalTilesGray, _cornerTileIndex, (bbox_right+1) - 16, bbox_top + 16);
            }else if (image_yscale &gt;= 5){
                draw_sprite(sprFinalTilesGray, _cornerTileIndex, bbox_left + 16, bbox_top + 16);
                draw_sprite(sprFinalTilesGray, 15+_connectTileIndex, bbox_left + 16, bbox_top + 48);
                
                for (var j=2; j &lt; image_yscale-2; j += 1){
                    draw_sprite(sprFinalTilesGray, 18 + _connectTileIndex, bbox_left + 16, bbox_top + (j*32) + 16);
                }
                
                draw_sprite(sprFinalTilesGray, 21+_connectTileIndex, bbox_left + 16, (bbox_bottom+1) - 48);
                draw_sprite(sprFinalTilesGray, _cornerTileIndex, bbox_left + 16, (bbox_bottom+1) - 16);
            }
        }
    }
}

if (buff()){
    if (buffTimer &gt;= 1){
        var _length, _lengthMax;
        _lengthMax = 368;
        
        if (buffTimer &lt; buffAnimLen){
            _length = _lengthMax * sqrt(buffTimer/buffAnimLen);
        }else{
            _length = _lengthMax;
        }
        
        if (_length &lt; 32){
            //left transition
            draw_sprite_part(sprFinalTilesGray, 6 + _connectTileIndex, 0, 0, _length, 32, bbox_left + 32, bbox_top);
            //right transition
            draw_sprite_part(sprFinalTilesGray, 12 + _connectTileIndex, 32-_length, 0, _length, 32, (bbox_left + 768)  -  _length, bbox_top);
        }else{
            //main beams
            draw_sprite_stretched(sprFinalTilesGray, 9 + _connectTileIndex, bbox_left +  32, bbox_top, _length, 32);
            draw_sprite_stretched(sprFinalTilesGray, 9 + _connectTileIndex, (bbox_left + 768) - _length, bbox_top, _length, 32);
            
            //transitions
            draw_sprite(sprFinalTilesGray, 6 + _connectTileIndex, bbox_left + 48, bbox_top + 16);
            draw_sprite(sprFinalTilesGray, 12 + _connectTileIndex, bbox_left + 752, bbox_top + 16);
        }
    }
    
    draw_sprite(sprFinalTilesGray, _cornerTileIndex, bbox_left + 16, bbox_top + 16);
    draw_sprite(sprFinalTilesGray, _cornerTileIndex, bbox_left + 784, bbox_top + 16);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
