<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFinalKirbyRoll</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>action = -1;
vspeed = 9.4;
delayFrames = -1;
floatToCenter = false;
floatAwayPlayerDeath = false;
floatAwayState = 0;
floatImage = 0;

image_speed = 0;
animCount = -3;
sprPrevious = 0;
subimgPrevious = 0;

for(var i=1;i&gt;=0;i--){
    swordX[i] = 0; //compared to x; multiplied by image_xscale
    swordY[i] = 0; //compared to y
    swordAngle[i] = 0;
    swordXLast[i] = swordX[i];
    swordYLast[i] = swordY[i];
    swordAngleLast[i] = swordAngle[i];
}
swordLerpAmt = 0;
droppedSword = false;
/*if (buff()){
    hpInit = 24;
    grav = 0.20;
}else{*/
    hpInit = 18;
    grav = 0.25;
//}

hp = hpInit
imgSpd = 0;
iframes = 0;
iframesWhenHit = 10;
slashFrame = -1;
deathSmileAlpha = 1;
redMergeAmt = 0;
storedHit = false;
lastSlashHeight = -1;

drawXOff = 0;
drawYOff = 0;

if (instance_exists(objPlayer)){
    image_xscale = sign(objPlayer.x-x);
    if (image_xscale == 0){
        image_xscale = 1;
    }
}

surf = -4;
glowSurf = -4;
glowAlpha = 0;
healthbar = noone;
nametag = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
    
if (surface_exists(glowSurf))
    surface_free(glowSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if below screen
if (bbox_top &gt; 632){
    instance_destroy();
}else{
    alarm[2] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play Death BGM, resume Char_1
vspeed = -14;
gravity = 0.667;
with (objFinalBossChar_1){
    alarm[0] = 55;
}

audio_play_sound(sndFinalKirbyDeathMusic, 0, 0);
alarm[0] = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take the die
with (objFinalRNGDie){
    event_user(0);
    targetObj = other.object_index;
    grow = false;
    shrink = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage iframes; Sword+Slash collisions
if (hp &lt;= 0){  // Fade to red
    if (redMergeAmt &lt; 1){
        redMergeAmt = min(redMergeAmt + 0.05, 1);
        image_blend = merge_colour(c_white, c_red, redMergeAmt);
    }
}else if (!droppedSword){  // Check for sword/slash collisions with objPlayer
    //Begin lerping between positions if the destination position changed
    if ((sprite_index != sprPrevious) || (floor(image_index) != floor(subimgPrevious))){
        subimgPrevious = imgSpd*animCount;
        swordXLast[0] = swordX[0];
        swordYLast[0] = swordY[0];
        swordXLast[1] = swordX[1];
        swordYLast[1] = swordY[1];
        swordAngleLast[0] = swordAngle[0];
        swordAngleLast[1] = swordAngle[1];
        swordLerpAmt = 0;
    }
    
    //Lerp between positions if needed
    if (swordLerpAmt &lt; 4){
        var _swordAngleTo, _swordXTo, _swordYTo;
        _swordXTo[1] = 0;
        _swordYTo[1] = 0;
        _swordAngleTo[1] = 0;
        switch(sprite_index){
            case sprFinalKirbyRoll:
                switch(floor(image_index) mod 7){
                    case 0:
                        _swordXTo[0] = -14;
                        _swordYTo[0] = -5;
                        _swordAngleTo[0] = 80;
                        _swordXTo[1] = -12;
                        _swordYTo[1] = 0;
                        _swordAngleTo[1] = 100;
                        break;
                    case 1:
                        _swordXTo[0] = -8;
                        _swordYTo[0] = -2;
                        _swordAngleTo[0] = 20;
                        _swordXTo[1] = -8;
                        _swordYTo[1] = 5;
                        _swordAngleTo[1] = 160;
                        break;
                    case 2:
                        _swordXTo[0] = -11;
                        _swordYTo[0] = +8;
                        _swordAngleTo[0] = -40;
                        _swordXTo[1] = 4;
                        _swordYTo[1] = 16;
                        _swordAngleTo[1] = 220;
                        break;
                    case 3:
                        _swordXTo[0] = -12;
                        _swordYTo[0] = +15;
                        _swordAngleTo[0] = -80;
                        _swordXTo[1] = -6;
                        _swordYTo[1] = 16;
                        _swordAngleTo[1] = 260;
                        break;
                    case 4:
                        _swordXTo[0] = -2;
                        _swordYTo[0] = +16;
                        _swordAngleTo[0] = -120;
                        _swordXTo[1] = -6;
                        _swordYTo[1] = 14;
                        _swordAngleTo[1] = 300;
                        break;
                    case 5:
                        _swordXTo[0] = -29;
                        _swordYTo[0] = +8;
                        _swordAngleTo[0] = -160;
                        _swordXTo[1] = -4;
                        _swordYTo[1] = 11;
                        _swordAngleTo[1] = 340;
                        break;
                    case 6:
                        _swordXTo[0] = -12;
                        _swordYTo[0] = -10;
                        _swordAngleTo[0] = -200;
                        _swordXTo[1] = 16;
                        _swordYTo[1] = -6;
                        _swordAngleTo[1] = 20;
                        break;
                }
                _swordXTo[0] = -6;
                _swordYTo[0] = 0;
                _swordXTo[1] = 6;
                _swordYTo[1] = 0;
                
                var _rotation = (360 * (image_index mod 7)/7);  // floating point modulo errors will not cause an issue
                _swordAngleTo[0] = 90 - _rotation;
                _swordAngleTo[1] = 90 + _rotation;
                swordAngle[0] = _swordAngleTo[0];
                swordAngle[1] = _swordAngleTo[1];
                
                break;
            case sprFinalKirbySlash:
                switch(floor(image_index) mod 4){
                    case 0:
                        _swordXTo[0] = 0;
                        _swordYTo[0] = 1;
                        _swordAngleTo[0] = 45;
                        _swordXTo[1] = -14;
                        _swordYTo[1] = -3;
                        _swordAngleTo[1] = 135;
                        break;
                    case 1:
                        _swordXTo[0] = 0;
                        _swordYTo[0] = -5;
                        _swordAngleTo[0] = 0;
                        _swordXTo[1] = -13;
                        _swordYTo[1] = -14;
                        _swordAngleTo[1] = 180;
                        break;
                    case 2:
                        _swordXTo[0] = 0;
                        _swordYTo[0] = 5;
                        _swordAngleTo[0] = -45;
                        _swordXTo[1] = -22;
                        _swordYTo[1] = 3;
                        _swordAngleTo[1] = 225;
                        break;
                    case 3:
                        _swordXTo[0] = 7;
                        _swordYTo[0] = 22;
                        _swordAngleTo[0] = -90;
                        _swordXTo[1] = 0;
                        _swordYTo[1] = 22;
                        _swordAngleTo[1] = 270;
                        break;
                }
                break;
            case sprFinalKirbyFloat:
                _swordXTo[0] = -20;
                _swordYTo[0] = 0;
                _swordXTo[1] = -16;
                _swordYTo[1] = 0;
                switch(floor(image_index) mod 6){
                    case 0:
                        _swordAngleTo[0] = 100;
                        break;
                    case 1:
                        _swordAngleTo[0] = 85;
                        break;
                    case 2:
                        _swordAngleTo[0] = 45;
                        break;
                    case 3:
                        _swordAngleTo[0] = 30;
                        break;
                    case 4:
                        _swordAngleTo[0] = -30;
                        break;
                    case 5:
                        _swordAngleTo[0] = 210;
                        break;
                }
                _swordAngleTo[1] = _swordAngleTo[0]
                break;
            case sprFinalKirbyDying:
                _swordXTo[0] = swordX[0];
                _swordYTo[0] = swordY[0];
                _swordAngleTo[0] = swordAngle[0] + 45;
                _swordXTo[1] = swordX[1];
                _swordYTo[1] = swordY[1];
                _swordAngleTo[1] = swordAngle[1] + 45;
                break;
            default:
                _swordXTo[0] = swordX[0];
                _swordYTo[0] = swordY[0];
                _swordAngleTo[0] = swordAngle[0] + 45;
                _swordXTo[1] = swordX[1];
                _swordYTo[1] = swordY[1];
                _swordAngleTo[1] = swordAngle[1] + 45;
                break;
        }
        _swordAngleTo[0] -= 45;
        _swordAngleTo[1] -= 45;
        swordLerpAmt ++;
        swordX[0] = lerp(swordX[0], _swordXTo[0], min(swordLerpAmt/4, 1));
        swordY[0] = lerp(swordY[0], _swordYTo[0], min(swordLerpAmt/4, 1));
        swordX[1] = lerp(swordX[1], _swordXTo[1], min(swordLerpAmt/4, 1));
        swordY[1] = lerp(swordY[1], _swordYTo[1], min(swordLerpAmt/4, 1));
        if (sprite_index != sprFinalKirbyRoll){  // different behavior
            swordAngle[0] = lerp(swordAngle[0], _swordAngleTo[0], min(swordLerpAmt/4, 1));
            swordAngle[1] = lerp(swordAngle[1], _swordAngleTo[1], min(swordLerpAmt/4, 1));
        }
    }
    
    var _sprLast, _indLast, _angLast, _scaleLast, _swordArrayCheck;
    //Store object's sprite values
    _sprLast = sprite_index;
    _indLast = image_index;
    _angLast = image_angle;
    _scaleLast = image_xscale;
    
    //Index in arrays to check
    if (image_xscale &gt; 0){
        _swordArrayCheck = 0;
    }else{
        _swordArrayCheck = 1;
    }
    
    //Check if the player is touching the sword
    sprite_index = sprFinalKirbySword;
    image_xscale = 2;
    image_yscale = 2;
    image_angle = swordAngle[_swordArrayCheck];
    if (place_meeting(x + swordX[_swordArrayCheck], y + swordY[_swordArrayCheck], objPlayer)){
        scrKillPlayer();
    }
    
    //Check if the player is touching the slash effect
    if (sprite_index == sprFinalKirbySlash &amp;&amp; slashFrame &gt; 0){
        sprite_index = sprFinalKirbySlashFX;
        image_xscale = 2*_scaleLast;
        image_index = slashFrame;
        image_angle = 0;
        if (place_meeting(x, y, objPlayer)){
            scrKillPlayer();
        }
    }
    
    //Restore object's sprite values
    sprite_index = _sprLast;
    image_index = _indLast;
    image_angle = _angLast;
    image_xscale = _scaleLast;
    image_yscale = 1;
}

// Manage iframes
if (iframes &gt;= 0){
    if (iframes &gt; iframesWhenHit/2){
        image_alpha = 0.5;
    }else{
        image_alpha = lerp(1, 0.5, iframes / (iframesWhenHit/2));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprPrevious = sprite_index;
subimgPrevious = image_index;
var _swordArrayCheck = 0;
if (image_xscale &gt; 0){
    _swordArrayCheck = 0;
}else{
    _swordArrayCheck = 1;
}

if (hp &gt; 0){
    if (!floatToCenter &amp;&amp; !floatAwayPlayerDeath){
        switch(action){
            case -1:
                if (place_meeting(x, y+vspeed+1, objBlock) &amp;&amp; bbox_left &gt; 0 &amp;&amp; bbox_right &lt; 799){
                    animCount = 2;
                    image_index = animCount;  // adjust mask for move_contact_solid
                    move_contact_solid(270, 2*abs(vspeed));
                    vspeed = 0;
                    action = 0;
                    if (buff()){
                        delayFrames = 20;
                    }else{
                        delayFrames = 32;
                    }
                    event_perform(ev_alarm, 0);
                    if (healthbar == noone){
                        healthbar = instance_create(704, 96, objMakerBossHP);
                        healthbar.hpMax = hpInit;
                        healthbar.hp = hp;
                    }
                    if (nametag == noone){
                        nametag = scrFinalBossNametag(x, y-32, 2);
                    }
                }
                break;
            case 0:
                if (delayFrames &gt; 0){
                    delayFrames --;
                    if (delayFrames &lt;= 0){
                        if (global.dead){
                            floatAwayPlayerDeath = true;
                            delayFrames = 1;
                        }else if (instance_exists(objPlayer)){
                            if (buff()){
                                speed = 10;
                                direction = scrBallisticAngle(x, y, clamp(objPlayer.x, 160, 640), 456, speed, grav, 1);
                            }else{
                                speed = 9;
                                direction = scrBallisticAngle(x, y, clamp(objPlayer.x, 160, 640), 456, speed, grav, 1);
                            }
                            sprite_index = sprFinalKirbyRoll;
                            animCount = 0;
                            audio_sound_pitch(audio_play_sound(sndMakerSampleNinja, 0, 0), random_range(1.7, 1.85));
                            
                            if (sign(objPlayer.x - x) != 0){
                                image_xscale = sign(objPlayer.x - x);
                            }
                        }
                    }
                }else{
                    vspeed += grav;
                    if (abs(400-x) &gt;= 300 || bbox_bottom &gt; 560){
                        if (!global.dead){
                            floatToCenter = true;
                            if (sign(400 - x) != 0){
                                image_xscale = sign(400 - x);
                            }
                            action = 0.2;
                        }else{
                            floatAwayPlayerDeath = true;
                            delayFrames = 1;
                        }
                    }else if (vspeed &gt; 0 &amp;&amp; place_meeting(x, y+vspeed+1, objBlock) &amp;&amp; bbox_left &gt; 32 &amp;&amp; bbox_right &lt; 768){
                        //x += hspeed; //taking this out in case in case it causes Kirby to fall offscreen
                        imgSpd = 0;
                        animCount = 0;
                        sprite_index = sprFinalKirbySlash;
                        image_index = 0;  // adjust mask for move_contact_solid
                        move_contact_solid(270, abs(vspeed+1));
                        
                        hspeed = 0;
                        vspeed = 0;
                        if (global.dead){
                            floatAwayPlayerDeath = true;
                            delayFrames = 8;
                        }else{
                            delayFrames = 6;
                            action = 0.1;
                            if (sign(objPlayer.x - x) != 0){
                                image_xscale = sign(objPlayer.x - x);
                            }
                        }
                    }
                }
                break;
            case 0.1:
                if (delayFrames &gt; 0){
                    delayFrames --;
                    if (delayFrames &lt;= 0){
                        if (!global.dead){
                            sprite_index = sprFinalKirbySlash;
                            animCount = 0;
                            audio_play_sound(sndFinalKirbySlash, 0, 0);
                        }else{
                            floatAwayPlayerDeath = true;
                            delayFrames = 8;
                        }
                    }
                }else{
                    sprite_index = sprFinalKirbySlash;
                    if (imgSpd &gt; 0 &amp;&amp; animCount+imgSpd &gt;= 4){
                        imgSpd *= -1;
                        audio_play_sound(sndFinalKirbySlashRev, 0, 0);
                    }else if (imgSpd &lt; 0 &amp;&amp; animCount+imgSpd &lt;= 0){
                        imgSpd = 0;
                        slashFrame = -1;
                        
                        if (buff()){
                            delayFrames = 16;
                        }else{
                            delayFrames = 20;
                        }
                        
                        if (global.dead){
                            floatAwayPlayerDeath = true;
                            //delayFrames set above
                        }else{
                            action = 0.2;
                        }
                    }else{
                        slashFrame = animCount+imgSpd;
                    }
                }
                break;
            case 0.2:
                if (delayFrames &gt; 0){
                    delayFrames --;
                    if (delayFrames &lt;= 0){
                        if (global.dead){
                            floatAwayPlayerDeath = true;
                        }else{
                            sprite_index = sprFinalKirbyRoll;
                            animCount = 0.99;  // imgSpd is negative
                            var _destX;
                            if (objPlayer.x &lt; x){
                                _destX = 616;
                            }else{
                                _destX = 184;
                            }
                            speed = 7 * min(abs(_destX-x)/300, 1) + 3;
                            grav = 0.15;
                            direction = scrBallisticAngle(x, y, _destX, 456, speed, grav, 1);
                        }
                    }
                }else{
                    vspeed += grav;
                    if (vspeed &gt; 0 &amp;&amp; place_meeting(x+hspeed, y+vspeed+1, objBlock) &amp;&amp; bbox_left &gt; 0 &amp;&amp; bbox_right &lt; 799){
                        sprite_index = sprFinalKirbySlash;
                        imgSpd = 0;
                        animCount = 0;
                        delayFrames = 8;
                        
                        if (!global.dead){
                            action = 0.3;
                            slashFrame = -1;
                        }else{
                            floatAwayPlayerDeath = true;
                            delayFrames += 8;
                        }
                        
                        if (sign(400 - x) != 0){
                            image_xscale = sign(400 - x);
                        }
                        image_index = 0; //for the move_contact_solid collision
                        move_contact_solid(270, abs(vspeed+1));
                        if (place_meeting(x+hspeed, y+1, objBlock)){  // ensure Kirby won't fall off from this movement
                            x += hspeed;
                        }
                        
                        hspeed = 0;
                        vspeed = 0;
                        
                    }else if (abs(400-x) &gt;= 300 || bbox_bottom &gt; 560){
                        if (!global.dead){
                            floatToCenter = true;
                            action = 0.3;
                            animCount = 0;
                        }else{
                            floatAwayPlayerDeath = true;
                            delayFrames = 1;
                        }
                        slashFrame = -1;
                        if (sign(400 - x) != 0){
                            image_xscale = sign(400 - x);
                        }
                    }
                }
                break;
        }
    }
    
    // Floating
    // On second thought, the floatAwayPlayerDeath series of actions was scrapped
    /*if (floatAwayPlayerDeath &amp;&amp; bbox_left &gt; 0 &amp;&amp; bbox_right &lt; 799){
        if (floatAwayState == 0 &amp;&amp; place_meeting(x, floor(y)+1, objBlock)){
            delayFrames --;
            if (delayFrames &lt;= 0){
                /*(if (sign(x-400) != 0){
                    image_xscale = sign(x - 400);
                }* /
                animCount = 0;
                hspeed = 4*image_xscale
                vspeed = -6.45;
                sprite_index = sprFinalKirbyRoll;
                delayFrames = 40;
                floatAwayState = 1;
            }
        }else if (floatAwayState == 1){
            delayFrames --;
            vspeed += grav;
            if (delayFrames &lt;= 0){
                sprite_index = sprFinalKirbyFloat;
                vspeed = -4;
                floatAwayState = 2;
            }
        }
    }*/
    if (floatToCenter || (floatAwayPlayerDeath &amp;&amp; floatAwayState == 2)){
        var _floatHSpdReverse = 0.45;
        var _floatGrav=0, _floatHSpdInc=0;
        if (floatAwayPlayerDeath){
            _floatHSpdInc = 0.1;
            _floatGrav = grav;
        }else{
            _floatHSpdInc = 0.25;
            _floatGrav = grav;
        }
        var _floatHSpdCap = 6;
        var _targetX = 400;
        var _targetDir = 1;
        if (floatAwayPlayerDeath){
            _targetDir = image_xscale;
            _targetX = 400 + 496*_targetDir;
        }else{
            if (sign(_targetX - x) != 0){
                _targetDir = sign(_targetX - x);
            }
            image_xscale = _targetDir;
        }
        
        sprite_index = sprFinalKirbyFloat;
        vspeed += _floatGrav;
        // horizontal speed
        if (sign(hspeed) != _targetDir){
            hspeed += _floatHSpdReverse * _targetDir;
        }else if (abs(hspeed) &lt; _floatHSpdCap){
            hspeed = min(abs(hspeed) + _floatHSpdInc,  _floatHSpdCap) * _targetDir;
        }
        
        var _moveUp = false;
        if (floatAwayPlayerDeath){
            if (vspeed &gt;= 2){
                _moveUp = true;
            }
        }else{
            var _targetDist = 216;
            // target elevation is a line stating at y=440 at screen borders with a slope of -3/5 as distance to center decreases
            var _targetY = 440 - (3/5 * (_targetX - abs(_targetX-x)));
            
            if (abs(_targetX - x) &gt; _targetDist){
                if ((bbox_bottom) &gt; 480){  // avoid hitting the platform
                    if (abs(_targetX - (x + hspeed)) &lt; _targetDist){
                        x = _targetX - _targetDist*_targetDir;
                        hspeed = 0;
                    }
                }
                image_xscale = _targetDir;
                if ((y &gt;= _targetY+48 &amp;&amp; vspeed &gt;= -1) || (y &gt;= _targetY &amp;&amp; vspeed &gt;= 2)){
                    _moveUp = true;
                }
                if (floatImage &lt; 6){
                    floatImage = min(floatImage - 6/50, 6);
                }
                animCount = 3 - abs(floatImage - 3);
            }else{
                if (sprite_index == sprFinalKirbyFloat){
                    sprite_index = sprFinalKirbyRoll;
                    hspeed = 0;
                    floatToCenter = false;
                    var _snd = audio_play_sound(sndMakerPowerDown, 0, 0);
                    audio_sound_pitch(_snd, 0.8);
                    
                    if (action == 0.1){
                        action = 0;
                    }else if (action == 0.3){
                        action = 0.2;
                    }
                }
            }
        }
        
        if (_moveUp){
            vspeed = -2.8;
            image_index = 0;
            floatImage = 0;
            var _xDist = abs(x - 400);
            if (_xDist &lt; 400 + 72){
                var _snd = audio_play_sound(sndMakerJR, 0, 0);
                audio_sound_pitch(_snd, PITCH_FLUCT);
                if (_xDist &gt; 400){
                    audio_sound_gain(_snd,  1 - (_xDist - 400)/72, 0);
                }
            }
            
        }
    }
    
    if (sprite_index == sprFinalKirbyRoll){
        if ((action == 0 || action == 0.1) &amp;&amp; delayFrames &gt; 0){
            imgSpd = 0;
        }else if (sign(hspeed) != -sign(image_xscale)){
            imgSpd = 18/50;
        }else{
            imgSpd = -18/50;
        }
    }else if (sprite_index == sprFinalKirbyFloat){
        imgSpd = 0;
    }else if (sprite_index == sprFinalKirbySlash &amp;&amp; action != 0.3){
        if (delayFrames &lt;= 0 &amp;&amp; imgSpd == 0){
            imgSpd = 20/50;
        }
    }
    animCount += imgSpd;
    
    if (!floatToCenter &amp;&amp; !floatAwayPlayerDeath &amp;&amp; action == 0.3){ //Slash attack (works best placed here)
        sprite_index = sprFinalKirbySlash;
        if (delayFrames &gt; 0 &amp;&amp; !global.dead){
            delayFrames --;
            if (delayFrames &lt;= 0){
                if (animCount &lt;= 0){
                    animCount = 0;
                    audio_play_sound(sndFinalKirbySlash, 0, 0);
                    if (buff()){
                        imgSpd = 3/5;
                    }else{
                        imgSpd = 2/5;
                    }
                    if (sign(400 - x) != 0){
                        image_xscale = sign(400 - x);
                    }
                }else if (animCount &gt;= 3.6){
                    audio_play_sound(sndFinalKirbySlashRev, 0, 0);
                    if (buff()){
                        imgSpd = -3/5;
                    }else{
                        imgSpd = -2/5;
                    }
                    animCount = 3.6;
                }
                
                //Bullets
                var _skip;
                _skip = irandom_range(1, 3);
                if (lastSlashHeight == _skip){
                    if (_skip == 1){
                        _skip += choose(1, 2);
                    }else if (_skip == 2){
                        _skip += choose(-1, 1);
                    }else if (_skip == 3){
                        _skip += choose(-2, -1);
                    }
                    lastSlashHeight = _skip;
                }
                for (var i=0; i&lt;=4; i++;){
                    if (i != _skip){
                        instance_create(x + swordX[_swordArrayCheck], y - 32*i + 8, objFinalKirbyBullet);
                    }
                }
            }
            
            if (instance_exists(objFinalRNGDie)){
                if (objFinalRNGDie.appearLerp &lt; 1){
                    objFinalRNGDie.grow = true;
                    objFinalRNGDie.shrink = false;
                }
            }
        }else{
            if (imgSpd &gt; 0 &amp;&amp; (animCount+imgSpd) &gt;= 4) || (imgSpd &lt; 0 &amp;&amp; (animCount+imgSpd) &lt;= 0){
                if (imgSpd &gt; 0){
                    animCount = 3.6;
                }else{
                    animCount = 0.0;
                }
                imgSpd = 0;
                delayFrames = 36;
                slashFrame = -1;
            }else if (imgSpd != 0){
                slashFrame = animCount;
            }else{
                slashFrame = -1; // needed?
            }
            
            if (global.dead){
                with (objFinalRNGDie){
                    if ((targetObj == other.id || targetObj == other.object_index) &amp;&amp; appearLerp &gt; 0){
                        objFinalRNGDie.grow = false;
                        objFinalRNGDie.shrink = true;
                    }
                }
                if (imgSpd == 0){
                    if (global.dead){
                        floatAwayPlayerDeath = true;
                        delayFrames += 6  -1;  // -1 because this runs after the float behavior
                    }
                }
            }
        }
    }
}else{
    if (gravity == 0){
        sprite_index = sprFinalKirbyDying;
        imgSpd = 0;
    }else{
        sprite_index = sprFinalKirbyDead;
        imgSpd = 0;
        image_angle -= 22.5/3;
        if (gravity &gt; 0 &amp;&amp; y &gt;= 768){
            y = 768;
            vspeed = 0;
            gravity = 0;
        }
        //destroyed in alarm[2]
    }
    animCount += imgSpd;
    
    if (deathSmileAlpha &gt; 0)
        deathSmileAlpha -= 0.035;
    
    if (redMergeAmt &lt; 1){
        redMergeAmt = min(redMergeAmt + 0.05, 1);
        image_blend = merge_colour(c_white, c_red, redMergeAmt);
    }
}

//set the image_index using animCount and global.count
var _length = (image_number/4);
if (animCount &lt; 0){animCount = (animCount mod _length) + _length;}
image_index = (floor(animCount) mod _length) + _length*floor(global.count/5);
if (iframes &gt; 0){
    iframes --;
    if (iframes &lt;= 0 &amp;&amp; storedHit &amp;&amp; hp &gt; 1){
        event_user(2);
    }
}
scrFinalCalcGlowAlpha(0.05, 0.1);

with (healthbar){
    x = 704;//other.x;
    y = 96;//other.y - 96;
    hp = other.hp;
    healthScale = hp/hpMax;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (iframes &gt; 0){
    with (other){
        instance_destroy();
    }
    if (iframes &lt; 8 &amp;&amp; hp &gt; 1){
        storedHit = true;
    }
}else if (hp &gt; 0){
    event_user(2);
    with (other){
        x = xprevious;
        y = yprevious;
        scrMoveContactObject(sign(hspeed), 0, abs(hspeed), other);
        scrMoveContactObject(0, sign(vspeed), abs(vspeed), other);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp &gt; 0)
    scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take Damage
if (hp &gt;= 0){
    hp --;
    image_alpha = 0.5;
    with (healthbar){
        event_user(0);
    }
    
    if (hp &lt;= 0){
        state = 3;
        if (instance_exists(objFinalRNGDie)){
            objFinalRNGDie.grow = false;
            objFinalRNGDie.shrink = true;
        }
        alarm[0] = -1;
        alarm[1] = 40;
        alarm[2] = 100;
        
        var _swordCheck;
        if (image_xscale &gt; 0)
            _swordCheck = 0;
        else
            _swordCheck = 1;
        if (!droppedSword){
            with (instance_create(x+swordX[_swordCheck], y+swordY[_swordCheck], objFinalKirbySword)){
                image_xscale *= sign(other.image_xscale);
                image_angle = other.swordAngle[_swordCheck];
                
                var _originOffset;
                if (image_xscale &gt; 0){
                    _originOffset = scrChangeOrigin(3, 15, 9, 9, image_angle);
                }else{
                    _originOffset = scrChangeOrigin(16, 15, 10, 9, image_angle);
                }
                x += (abs(image_xscale)*_originOffset[0]);
                y += (image_yscale*_originOffset[1]);
                
                if (other.image_xscale &gt; 0){
                    depth -= 1;
                }
            }
            droppedSword = true;
        }
        
        audio_play_sound(sndFinalKirbyDie, 0, 0);
        hspeed = 0;
        vspeed = 0;
        gravity = 0;
        sprite_index = sprFinalKirbyDying;
        with (nametag){
            fadeout = true;
        }
    }else{
        iframes = iframesWhenHit;
    }
    
    storedHit = false;
    var _snd = audio_play_sound(sndFinalBossDamage, 0, 0);
    audio_sound_pitch(_snd, PITCH_FLUCT);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
    
if (surface_exists(glowSurf))
    surface_free(glowSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _sprShown;
if (image_xscale == 1){
    _sprShown = sprite_index;
}else{
    switch (sprite_index){
        case sprFinalKirbyFloat:
            _sprShown = sprFinalKirbyFloatFlipped;
            break;
        case sprFinalKirbyRoll:
            _sprShown = sprFinalKirbyRollFlipped;
            break;
        case sprFinalKirbySlash:
            _sprShown = sprFinalKirbySlashFlipped;
            break;
        case sprFinalKirbyDying:
            _sprShown = sprFinalKirbyDyingFlipped;
            break;
        case sprFinalKirbyDead:
            _sprShown = sprFinalKirbyDead; //this one isn't flipped
            break;
        default:
            _sprShown = sprFinalKirbyFloatFlipped;
            break;
    }
}

if (!surface_exists(surf)){surf = surface_create(320, 320);}
if (surface_exists(surf)){
    surface_set_target(surf);
    draw_clear_alpha(c_black, 0);
    
    if (!droppedSword &amp;&amp; image_xscale &lt; 0)
        draw_sprite_ext(sprFinalKirbySword, 0, 160 + swordX[1], 160 + swordY[1], 2, 2, swordAngle[1], c_white, 1);
    
    draw_sprite_ext(_sprShown, image_index, 160, 160, 1, image_yscale, image_angle, image_blend, 1);
    
    if (!droppedSword &amp;&amp; image_xscale &gt; 0)
        draw_sprite_ext(sprFinalKirbySword, 0, 160 + swordX[0], 160 + swordY[0], 2, 2, swordAngle[0], c_white, 1);
    
    surface_reset_target();
    
    if (iframes &gt; 0)
        draw_surface_ext(surf, x-160, y-160, 1, 1, 0, c_white, image_alpha);
    else
        draw_surface(surf, x-160, y-160);   
    
    if (!droppedSword &amp;&amp; slashFrame &gt;= 0 &amp;&amp; slashFrame &lt; 4 &amp;&amp; hp &gt; 0){
        draw_sprite_ext(sprFinalKirbySlashFX, slashFrame, x, y, 2*image_xscale, 2, 0, c_white, 1);
    }
}

if (global.finalGlowEnabled &amp;&amp; global.extraEffects &amp;&amp; drawXOff == 0){
    if (glowAlpha &gt; 0){
        if (!surface_exists(glowSurf))
            glowSurf = surface_create(320, 320);
        if (surface_exists(glowSurf)){
            surface_set_target(glowSurf);
            draw_clear_alpha(c_black, 0);
            draw_sprite_ext(_sprShown, image_index, 160, 160, 1, image_yscale, image_angle, image_blend, 1);
            surface_reset_target();
            
            if (surface_exists(glowSurf)){
                shader_set(shdFinalWhite);
                shader_set_uniform_f(global.finalGlowHandle, 320, 320, 10, glowAlpha*image_alpha);
                draw_surface(glowSurf, x-160, y-160);
                shader_reset();
            }
        }
    }
}

/*
draw_set_font(fDefault12);
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text_outline(x, y, "Action :" + string(action) +  "#floatAwayState: " + string(floatAwayState) +  "#floatAwayPlayerDeath: " + string(floatAwayPlayerDeath), 2, c_black, 8);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
