<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFinalKnightDropAttack</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
imgSpd = 0;
action = 0; //fall, run, jump
fallSpinAngle = 0;
y = -90;
vspeed = 5;
//(instance_create(x, 480, objFinalKnightWarning)).alarm[0] = 72;
nametag = noone;
delayFrames = -1;
if (buff()){
    hpInit = 3;
}else{
    hpInit = 2;
}

hp = hpInit;
iframes = -1;
iframesWhenHit = 20;
redMergeAmt = 0;
deathSmileAlpha = 1;
animCount = global.count;
xTo = x;
jumps = 0;
shots = 0;
shotTimer = -1;
fireworkExists[1] = false;
fireworkExists[0] = false;
fireworkEverPickedUp = false;
for(i=1;i&gt;=0;i--){
    gunX[i] = 0; //compared to x (0 = facing right; 1 = facing left)
    gunY[i] = 21;//compared to y
    gunAngle[i] = 270;
    gunXLast[i] = gunX[i];
    gunYLast[i] = gunY[i];
    gunAngleLast[i] = gunAngle[i];
}
gunLerpAmt = 0;
falling = false;
angleWhenHit = 0;
surf = -4;
droppedGun = false; //either when hit with 2nd firework or when fallen offscreen

backGlow = 0;
backGlowAng = -pi/2;
backScaleMult = 0;

drawXOff = 0;
drawYOff = 0;
glowSurf = -4;
glowAlpha = 0;
healthbar = noone;
alarm[0] = 40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);

if (surface_exists(glowSurf))
    surface_free(glowSurf);

//failsafe
with (objFinalKnightWarning){
    fadeout = true;
}

with (objFinalRNGDie){
    if (targetObj == other.id){
        targetObj = noone;
        latchedOn = false;
        grow = false;
        shrink = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot "Rocks"
var _gunCheck
if (image_xscale &gt; 0)
    _gunCheck = 0;
else
    _gunCheck = 1;

var _num = 5;
//if (buff()){_num = 9;}else{_num = 5;}
repeat(_num){
    (instance_create(x + gunX[_gunCheck] + lengthdir_x(42, gunAngle[_gunCheck])*image_xscale, y + gunY[_gunCheck] + lengthdir_y(42, gunAngle[_gunCheck]), objFinalKnightRocks)).hspeed *= image_xscale;
}

with (objFinalRNGDie){
    grow = false;
    shrink = true;
}
audio_play_sound(sndMakerSamplePunch, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take the die
with (objFinalRNGDie){
    event_user(0);
    targetObj = other.object_index;
    grow = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (iframes &gt;= 0){
    if (iframes &gt; iframesWhenHit/2){
        image_alpha = 0.5;
    }else{
        image_alpha = lerp(1, 0.5, iframes / (iframesWhenHit/2));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _sprPrev, _indPrev, _scalePrev, _gunCheck;
_sprPrev = sprite_index;
_indPrev = image_index;
_scalePrev = image_xscale;

if (image_xscale &gt; 0){
    _gunCheck = 0;
}else{
    _gunCheck = 1;
}

if (!falling &amp;&amp; (x &lt; 152 || x &gt; 648 || hp &lt;= 0)){
    falling = true;
}

if (falling){ //off the platform
    vspeed += 0.15;
    if (bbox_top &gt;= 632 || bbox_right &lt; 0 || bbox_left &gt; 800){
        if (hp &gt; 0){
            audio_play_sound(sndFinalKnightDie, 0, 0);
            hp = 0;
            with (healthbar){
                hp = other.hp;
                event_user(0);
            }
        }
        if (!droppedGun){
            with (instance_create(x+gunX[_gunCheck], y+gunY[_gunCheck], objFinalKnightGun)){
                if (other.image_xscale == 1){
                    image_angle = other.gunAngle[_gunCheck];
                }else{
                    image_angle = point_direction(0, 0, -dcos(other.gunAngle[_gunCheck]), -dsin(other.gunAngle[_gunCheck]));
                    image_yscale *= -1;
                }
                if (other.bbox_top &gt;= 544){
                    vspd = -10;
                }else
                    vspd = -5;
                
                if (bbox_right &lt; 0){
                    hspd = 8;
                }else if (bbox_right &lt; 80){
                    hspd = 4;
                }else if (bbox_left &gt; 800){
                    hspd = -8;
                }else if (bbox_left &gt; 720){
                    hspd = -4;
                }
                type = 0; //explode when at peak height
            }
            droppedGun = true;
            with (objFinalBossChar_1)
                alarm[0] = 55;
            
            with (objFinalKnightFirework){
                if (!carried){
                    alarm[0] = 40;
                }
            }
        }else{
            if (instance_exists(objFinalKnightFirework)){
                with (objFinalKnightFirework){
                    if (!carried){
                        alarm[0] = 10;
                    }
                }
            }
        }
        with (nametag)
            instance_destroy();
        instance_destroy();
    }
}else if (iframes &lt;= 0){
    if (action == 0){ //initial fall
        if (y &gt;= 220 &amp;&amp; nametag == noone){
            nametag = scrFinalBossNametag(x, y-24, 1);
        }
        if (bbox_bottom + vspeed &gt;= 450){
            vspeed = -6;
            y = 415-vspeed;
            if (buff()){
                action = 0.1;  // "FALL AND SPIN"
                gunLerpAmt = 0;
            }else{
                action = 0.2;  // No "FALL AND SPIN"
            }
            var _inst;
            _inst = instance_create(round(((x + 9*image_xscale)-16) / 32)*32 + 16, 502, objFinalKnightTHRounded);
            _inst.tag = 0;
            _inst.xCent = _inst.x;
            with (_inst){
                event_user(0);
            }
            if (!fireworkExists[0]){
                instance_create(256, -12, objFinalKnightFirework);
                fireworkExists[0] = true;
            }
            if (!fireworkExists[1]){
                instance_create(544, -12, objFinalKnightFirework);
                fireworkExists[1] = true;
            }
            audio_play_sound(sndMakerBlockCrash, 0, 0);
            with (objFinalScreenshake){
                shake = 10;
            }
            var _snd = audio_play_sound(sndMakerKidLand, 0, 0);
            audio_sound_gain(_snd, 1.4, 0);
            audio_sound_pitch(_snd, PITCH_FLUCT);
            
            if (healthbar == noone){
                healthbar = instance_create(704, 96, objMakerBossHP);
                healthbar.hpMax = hpInit;
                healthbar.hp = hp;
            }
        }
    }else if (action == 0.1){ //fall and spin  -  BUFFED ONLY
        if (vspeed &gt;= 0){
            fallSpinAngle += 10*image_xscale;
            if ((fallSpinAngle*image_xscale) &gt;= 360){
                fallSpinAngle = 0;
                action = 0.3;
                delayFrames = 20;
                animCount = 0;
                sprite_index = sprFinalKnightWeakened;
            }
            image_angle = fallSpinAngle;
            
            var _inst;
            if (((fallSpinAngle + 360) mod 360) mod 50 == 30){
                _inst = instance_create(x + lengthdir_x(42, image_angle+270), y + lengthdir_y(42, image_angle+270), objFinalKnightTHRounded);
                _inst.tag = 1;
                _inst.direction = image_angle+270;
                
                with (_inst){
                    event_user(0);
                }
                audio_play_sound(sndShootLoud, 0, 0);
            }
        }
    }else if (action == 0.2){ //post-spin fall
        if (bbox_bottom + vspeed &gt;= 480){
            vspeed = 0;
            y -= bbox_bottom - 480;
            action = 0.3;
            if (buff()){
                delayFames = 30;
            }else{
                delayFrames = 10;
            }
            sprite_index = sprFinalKnightRun;
            imgSpd = 0;
            animCount = 0;
            var _snd = audio_play_sound(sndMakerKidLand, 0, 0);
            audio_sound_gain(_snd, 1.4, 0);
            audio_sound_pitch(_snd, PITCH_FLUCT);
        }
    }else if (action == 0.3){ //stunned
        if (delayFrames &gt; 0){
            animCount = 0;
            delayFrames = max(delayFrames - 1, -1);
            
            if (delayFrames &lt;= 0){
                animCount = 0;
                sprite_index = sprFinalKnightRun;
                if (global.dead){
                    imgSpd = 0;
                }else{
                    imgSpd = 0.333;
                }
            }else{
                animCount = 0;
                sprite_index = sprFinalKnightWeakened;
            }
        }else if (!global.dead &amp;&amp; instance_exists(objPlayer) &amp;&amp; place_meeting(x, y+1, objBlock)){
            action = 1;
            sprite_index = sprFinalKnightRun;
            imgSpd = 0.333;
            animCount = 0;
            var _distMin = 64, _distCap = 128;
            var _left = 208, _right = 592;
            
            if (abs(objPlayer.x - x) &lt;= _distCap){
                xTo = objPlayer.x;
            }else{
                xTo = x + _distCap*sign(objPlayer.x - x);
            }
            
            if (abs(xTo - x) &lt; _distMin){
                xTo = x + _distMin*sign(xTo - x);
            }
            
            // clamp xTo within limits
            xTo = clamp(xTo, _left, _right);
            /* // "bounce" xTo off limits  (scrapped)
            if (xTo &lt; _left){
                xTo = _left + (_left-xTo);
            }else if (xTo &gt; _right){
                xTo = _right + (_right-xTo);
            }*/
            
            if (xTo &lt; x){
                image_xscale = -1;
            }else if (xTo &gt; x){
                image_xscale = 1;
            }
            
            if (!buff() &amp;&amp; abs(x-xTo) &gt;= 12){  // BUFF: No indicator for where the enemy will go
                instance_create(xTo, 480, objFinalKnightWarning);
            }
        }
    }else if (action == 1){ //run to target location
        if (vspeed == 0){
            if (instance_exists(objPlayer)){
                sprite_index = sprFinalKnightRun;
                imgSpd = 0.333;
                var _jump;
                _jump = false;
                var _move = 3;
                if (buff()){
                    _move = 4;
                }
                if (abs(x-objPlayer.x) &lt;= _move){
                    x = objPlayer.x;
                    _jump = true;
                }else if (abs(x-xTo) &lt;= _move){
                    x = xTo;
                    _jump = true;
                }else{
                    x += _move*sign(xTo-x);
                }
                
                if (_jump){
                    action = 1.1;
                    sprite_index = sprFinalKnightDigAttack;
                    imgSpd = 0.2;
                    animCount = 0;
                    delayFrames = 16;
                    with (objFinalRNGDie){
                        grow = true;
                        shrink = false;
                    }
                    with (objFinalKnightWarning){
                        fadeout = true;
                    }
                }
            }else{
                sprite_index = sprFinalKnightRun;
                animCount = 0;
            }
        }else{
            sprite_index = sprFinalKnightWeakened;
        }
    }else if (action == 1.1){  // Dig and jump
        if (hspeed != 0 &amp;&amp; abs(hspeed) &lt; 1){  // firework knockback
            hspeed = 0;
        }
        
        if (hspeed == 0 &amp;&amp; place_meeting(x, y+1, objBlock)){
            if (delayFrames &gt; 0){
                delayFrames = max(delayFrames - 1, -1);
                animCount = 0;
            }else{
                if (!global.dead){
                    sprite_index = sprFinalKnightJump;
                    action = 1.2;
                    vspeed = -6;
                    audio_play_sound(sndMakerSampleSpring, 0, 0);
                    alarm[1] = 2; //create rocks
                    imgSpd = 0;
                }else{
                    sprite_index = sprFinalKnightRun;
                    animCount = 0;
                    imgSpd = 0;
                }
            }
        }else{
            if (place_meeting(x, y+1, objBlock)){  // waiting for hspeed to decrement
                delayFrames --;  // decrease delay frames (until 12)
            }
            delayFrames = max(delayFrames, 12);
        }
        /*  // Don't change direction to face the player, as it makes this attack too hard
        if (sign(objPlayer.x - x) == 1)
            image_xscale = 1;
        else if (sign(objPlayer.x - x) == -1)
            image_xscale = -1;
        */
    }else if (action == 1.2){  // Falling
        if (vspeed &gt;= 0){
            if (jumps &lt; 2){
                sprite_index = sprFinalKnightFall;
                action = 1.3;
                jumps ++;
            }else{  // third jump
                sprite_index = sprFinalKnightDropAttack;
                action = 0;
                jumps = 0;
            }
        }
    }else if (action == 1.3){  // Fall + Targetted shots
        if (instance_exists(objPlayer)){
            if (delayFrames &gt; 0){
                delayFrames = max(delayFrames - 1, -1);
            }else{
                var _shotLim, _shootAtVspd;
                if (buff()){
                    _shotLim = 5;
                    _shootAtVspd = 1.2;
                }else{
                    _shotLim = 3;
                    _shootAtVspd = 2;
                }
                
                if (shots &lt; _shotLim &amp;&amp; vspeed &gt; _shootAtVspd &amp;&amp; shotTimer &lt;= 0){
                    if (instance_exists(objPlayer)){
                        vspeed = 0;
                        audio_play_sound(sndShootLoud, 0, 0);
                        var _inst;
                        _inst = instance_create(x + gunX[_gunCheck] + lengthdir_x(42, gunAngle[_gunCheck])*image_xscale, y + gunY[_gunCheck] + lengthdir_y(42, gunAngle[_gunCheck]) - 6, objFinalKnightTHRounded);
                        _inst.tag = 2;
                        with (_inst){
                            event_user(0);
                        }
                    }
                    shots ++;
                    shotTimer = 12;
                }
                shotTimer = max(shotTimer - 1, -1);
            }
            if (sign(objPlayer.x - x) != 0){
                image_xscale = sign(objPlayer.x - x);
            }
        }
    }
}else{
    iframes --;
    if (iframes &lt;= 0){
        mask_index = -1;
    }
    if (iframes &gt;= 15 &amp;&amp; iframes &lt; 30){
        image_angle = lerp(0, -angle_difference(angleWhenHit, 0), sin((iframes-15)/15*pi/2));
    }
    if (delayFrames &gt; 0){
        delayFrames --;
    }
}

if (action &gt; 0){
    backGlowAng += pi/40;
    backGlow = (sin(backGlowAng)/2 + 0.5);
    if (backScaleMult &lt; 1){
        backScaleMult = min(backScaleMult+0.025, 1);
    }
}

if (!falling){  // `falling` is set to true when falling off the platform to Smartkin's death
    if (vspeed &lt; 0 || !(collision_rectangle(160-hspeed, 480-vspeed  - 1, 640-hspeed, 640-vspeed, id, true, false) == id || (action == 0 &amp;&amp; ((bbox_bottom+1) + vspeed) &gt; (450 - 1)))){
        if (vspeed &lt; 15){
            vspeed += 0.15;
        }
    }else if (vspeed &gt; 0){
        var _vspdPrev = vspeed;
        if (action == 0 &amp;&amp; gunAngle &gt;= 240 &amp;&amp; gunAngle &lt;= 300){
            if ((gunAngle+360) mod 360 &gt;= 225 &amp;&amp; (gunAngle+360) mod 360 &lt;= 315){
                vspeed = -6;
                y = 415-vspeed;
                action = 0.1;
                var _inst;
                _inst = instance_create(x, 502, objFinalKnightTHRounded);
                _inst.tag = 0;
                _inst.xCent = x;
                with (_inst)
                    event_user(0);
                if (!fireworkExists[0]){
                    instance_create(256, -12, objFinalKnightFirework);
                    fireworkExists[0] = true;
                }
                if (!fireworkExists[1]){
                    instance_create(544, -12, objFinalKnightFirework);
                    fireworkExists[1] = true;
                }
                audio_play_sound(sndMakerBlockCrash, 0, 0);
                with (objFinalScreenshake){
                    shake = 10;
                }
            }else{
                action = 0.3;
                delayFrames = 60;
                sprite_index = sprFinalKnightWeakened;
                imgSpd = 0;
                animCount = 0;
            }
        }else if (action == 0.2){
            action = 0.3;
            delayFrames = 60;
            sprite_index = sprFinalKnightWeakened;
            imgSpd = 0;
            animCount = 0;
        }else if (action == 1.3){
            action = 0.3;
            shots = 0;
            delayFrames = 24;
            vspeed = 0;
        }else{
            vspeed = 0;
        }
        var _snd = audio_play_sound(sndMakerKidLand, 0, 0);
        audio_sound_gain(_snd, 1.4, 0);
        audio_sound_pitch(_snd, PITCH_FLUCT);
        
        y = floor(y);
        scrMoveContactObject(0, 1, (_vspdPrev+1), objBlock);  // with new mask
    }
}

animCount ++;
image_index = ((animCount*imgSpd) mod (image_number/4)) + (image_number/4)*floor(global.count/5);

if (_sprPrev != sprite_index || ((sprite_index == sprFinalKnightRun || sprite_index == sprFinalKnightDigAttack) &amp;&amp; floor(_indPrev) != floor(image_index)) || (sprite_index == sprFinalKnightJump &amp;&amp; image_xscale != _scalePrev) || iframes &gt;= (iframesWhenHit-1) || iframes == 0){
    gunXLast[0] = gunX[0];
    gunYLast[0] = gunY[0];
    gunXLast[1] = gunX[1];
    gunYLast[1] = gunY[1];
    gunAngleLast = gunAngle;
    gunLerpAmt = 0;
}

if (hp &lt;= 0){
    if (redMergeAmt &lt; 1){
        redMergeAmt = min(redMergeAmt + 0.05, 1);
        image_blend = merge_colour(c_white, c_red, redMergeAmt);
    }
    if (deathSmileAlpha &gt; 0)
        deathSmileAlpha -= 0.035;
    sprite_index = sprFinalKnightDie;
}else if (!droppedGun){
    ///  GUN SPRITE MANAGEMENT  \\\
    if (action == 0.1){
        _gunXTo[0] = lengthdir_x(21, image_angle+270);
        _gunYTo[0] = lengthdir_y(21, image_angle+270);
        _gunXTo[1] = lengthdir_x(21, image_angle+270);
        _gunYTo[1] = lengthdir_y(21, image_angle+270);
        var _ang = (image_angle+270);
        _gunAngleTo[0] = (((_ang mod 360) + 360) mod 360);
        
        // horizontally reflect _ang ('ey Random, this would be a great GMS2 engine script)
        var _t = (_ang &gt; 180);
        if (_t){
            _ang = (360 - _ang);
        }
        _ang = darccos(-dcos(floor(_ang)));
        if (_t){
            _ang = (360 - _ang);
        }
        _gunAngleTo[1] = _ang;
        
        for(var i=0;i&lt;=1;i++){
            gunX[i] = _gunXTo[i];
            gunY[i] = _gunYTo[i];
            gunAngle[i] = _gunAngleTo[i];
        }
    }else if (gunLerpAmt &lt; 4){
        var _gunAngleTo, _gunXTo, _gunYTo;
        _gunXTo[1] = 0;
        _gunYTo[1] = 0;
        _gunAngleTo[1] = 0;
        if (iframes &lt;= 0){
            switch(sprite_index){
                case sprFinalKnightRun:
                    switch(floor(image_index) mod 6){
                        case 0:
                            _gunXTo[0] = -16;
                            _gunYTo[0] = +13;
                            _gunXTo[1] = -17;
                            _gunYTo[1] = +14;
                            _gunAngleTo[0] = 255;
                            _gunAngleTo[1] = 255;
                            break;
                        case 1:
                            _gunXTo[0] = -16;
                            _gunYTo[0] = +11;
                            _gunXTo[1] = -7;
                            _gunYTo[1] = +14;
                            _gunAngleTo[0] = 250;
                            _gunAngleTo[1] = 250;
                            break;
                        case 2:
                            _gunXTo[0] = -20;
                            _gunYTo[0] = +10;
                            _gunXTo[1] = -6;
                            _gunYTo[1] = +11;
                            _gunAngleTo[0] = 245;
                            _gunAngleTo[1] = 245;
                            break;
                        case 3:
                            _gunXTo[0] = -22;
                            _gunYTo[0] = +11;
                            _gunXTo[1] = -8;
                            _gunYTo[1] = +11;
                            _gunAngleTo[0] = 245;
                            _gunAngleTo[1] = 245;
                            break;
                        case 4:
                            _gunXTo[0] = -17;
                            _gunYTo[0] = +22;
                            _gunXTo[0] = -5;
                            _gunYTo[0] = +20;
                            _gunAngleTo[0] = 250;
                            _gunAngleTo[1] = 250;
                            break;
                        case 5:
                            _gunXTo[0] = -27;
                            _gunYTo[0] = +22;
                            _gunXTo[1] = -10;
                            _gunYTo[1] = 12;
                            _gunAngleTo[0] = 255;
                            _gunAngleTo[1] = 255;
                            break;
                    }
                    break;
                case sprFinalKnightDigAttack:
                    switch(floor(image_index) mod 4){
                        case 0:
                            _gunXTo[0] = -22;
                            _gunYTo[0] = +8;
                            _gunXTo[1] = 0;
                            _gunYTo[1] = -14;
                            _gunAngleTo[0] = 235;
                            _gunAngleTo[1] = 210;
                            break;
                        case 1:
                            _gunXTo[0] = -6;
                            _gunYTo[0] = +10;
                            _gunXTo[1] = -11;
                            _gunYTo[1] = 10;
                            _gunAngleTo[0] = 210;
                            _gunAngleTo[1] = 250;
                            break;
                        case 2:
                            _gunXTo[0] = 9;
                            _gunYTo[0] = 11;
                            _gunAngleTo[0] = 330;
                            _gunXTo[1] = -25;
                            _gunYTo[1] = 14;
                            _gunAngleTo[1] = 330;
                            break;
                        case 3:
                            _gunXTo[0] = 9;
                            _gunYTo[0] = 11;
                            _gunAngleTo[0] = 330;
                            _gunXTo[1] = -25;
                            _gunYTo[1] = 14;
                            _gunAngleTo[1] = 330;
                            break;
                    }
                    break;
                case sprFinalKnightFall:
                    _gunXTo[0] = -23;
                    _gunYTo[0] = 13;
                    _gunXTo[1] = -20;
                    _gunYTo[1] = 10;
                    _gunAngleTo[0] = 340;
                    _gunAngleTo[1] = 340;
                    break;
                case sprFinalKnightJump:
                    _gunXTo[0] = -11;
                    _gunYTo[0] = -6;
                    _gunXTo[1] = -26;
                    _gunYTo[1] = -11;
                    _gunAngleTo[0] = 390;
                    _gunAngleTo[1] = 410;
                    break;
                case sprFinalKnightDropAttack:
                    _gunXTo[0] = lengthdir_x(21, image_angle+270);
                    _gunYTo[0] = lengthdir_y(21, image_angle+270) - 8;
                    _gunXTo[1] = -lengthdir_x(21, image_angle+270);
                    _gunYTo[1] = lengthdir_y(21, image_angle+270) - 8;
                    _gunAngleTo[0] = image_angle+270;
                    _gunAngleTo[1] = image_angle+270;
                    break;
                case sprFinalKnightWeakened:
                    _gunXTo[0] = -11;
                    _gunYTo[0] = 14;
                    _gunXTo[1] = -13;
                    _gunYTo[1] = 14;
                    _gunAngleTo[0] = 270;
                    _gunAngleTo[1] = 270;
                    break;
                default:
                    _gunXTo[0] = 0;
                    _gunYTo[0] = 0;
                    _gunXTo[1] = 0;
                    _gunYTo[1] = 0;
                    _gunAngleTo[0] = 0;
                    _gunAngleTo[1] = 0;
                    break;
            }
        }else{
            _gunXTo[0] = -11;
            _gunYTo[0] = 14;
            _gunXTo[1] = -13;
            _gunYTo[1] = 14;
            _gunAngleTo[0] = 270;
            _gunAngleTo[1] = 270;
        }
        gunLerpAmt ++;
        for(var i=0;i&lt;=1;i++){
            gunX[i] = lerp(gunXLast[i], _gunXTo[i], gunLerpAmt/4);
            gunY[i] = lerp(gunYLast[i], _gunYTo[i], gunLerpAmt/4);
            gunAngle[i] = lerp(gunAngleLast[i], _gunAngleTo[i], gunLerpAmt/4);
        }
    }
    ///  GUN SPRITE MANAGEMENT  \\\
    
    // Check for a collision with the player
    if (iframes &gt; 0){
        mask_index = sprFinalKnightWeakened;
    }else{
        mask_index = -1;
    }
    if (place_meeting(x, y, objPlayer)){
        scrKillPlayer();
    }else{
        // Check if the player is touching the gun
        var _sprLast, _indLast, _angLast, _gunCheck;
        if (image_xscale &gt; 0){
            _gunCheck = 0;
        }else{
            _gunCheck = 1;
        }
        _indLast = image_index;
        _angLast = image_angle;
        mask_index = sprMakerShootPropGun;
        image_yscale = 3*sign(image_xscale);
        image_xscale = 3;
        x += gunX[_gunCheck];
        y += gunY[_gunCheck];
        if (_gunCheck == 0){
            image_angle = gunAngle[0];
        }else{
            image_angle = point_direction(0, 0, -dcos(gunAngle[1]), -dsin(gunAngle[1]));
        }
        if (place_meeting(x, y, objPlayer)){
            scrKillPlayer();
        }
        mask_index = -1;
        image_index = _indLast;
        image_angle = _angLast;
        image_xscale = sign(image_yscale);
        image_yscale = 1;
        x -= gunX[_gunCheck];
        y -= gunY[_gunCheck];
        
        if (hspeed != 0){
            if (place_meeting(x, y+1, objBlock)){
                if (abs(hspeed) &lt;= 0.225){
                    hspeed = 0;
                }else{
                    hspeed -= 0.225*sign(hspeed);
                }
            }else{
                if (abs(hspeed) &lt;= 0.075){
                    hspeed = 0;
                }else{
                    hspeed -= 0.075*sign(hspeed);
                }
            }
        }
    }
}

scrFinalCalcGlowAlpha(0.05, 0.1);

with (healthbar){
    x = 704;//other.x;
    y = 96;//other.y - 96;
    hp = other.hp;
    healthScale = hp/hpMax;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other){
    x = xprevious;
    y = yprevious;
    scrMoveContactObject(sign(hspeed), 0, abs(hspeed), other);
    
    var _inst;
    _inst = instance_create(x, y, objBulletReflected);
    _inst.hspeed *= sign(x-other.x);
    
    explode = false;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take Damage
hp --;
if (hp &lt;= 0){
    action = -1;
    sprite_index = sprFinalKnightDie;
    if (vspeed &gt; -3){
        vspeed = -3;
    }
    falling = true;
    with (nametag){
        following = noone;
    }
    nametag = -4;
    //make warnings fade out incase there is still one
    with (objFinalKnightWarning){
        fadeout = true;
    }
    audio_play_sound(sndFinalKnightDie, 0, 0);
    if (!droppedGun){
        var _gunCheck;
        if (image_xscale &gt; 0){
            _gunCheck = 0;
        }else{
            _gunCheck = 1;
        }
        
        with (instance_create(x+gunX[_gunCheck], y+gunY[_gunCheck], objFinalKnightGun)){
            if (other.image_xscale == 1){
                image_angle = other.gunAngle[0];
            }else{
                image_angle = point_direction(0, 0, -dcos(other.gunAngle[1]), -dsin(other.gunAngle[1]));
                image_yscale *= -1;
            }
            type = 1; //explode when it hits a block
            vspd = -8;
        }
        droppedGun = true;
        with (objFinalBossChar_1){
            alarm[0] = 55;
        }
    }
}else{
    iframes = iframesWhenHit;
    delayFrames = 10;
    image_alpha = 0.5;
    if (action == 0.1){
        action = 0.2;
        fallSpinAngle = 0;
    }else if (action == 1.2 &amp;&amp; vspeed &gt; 0){
        if (jumps &lt; 3){
            sprite_index = sprFinalKnightFall;
            action = 1.3;
        }else{
            jumps = 0;
            sprite_index = sprFinalKnightDropAttack;
            action = 0;
        }
    }
    
    if (sprite_index == sprFinalKnightDigAttack){
        sprite_index = sprFinalKnightFall;
    }
}

if (alarm[1] &gt;= 0){
    alarm[1] = -1;
}
if (instance_exists(objFinalRNGDie) &amp;&amp; objFinalRNGDie.grow){
    objFinalRNGDie.grow = false;
    objFinalRNGDie.shrink = true;
}
with (healthbar){
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);

if (surface_exists(glowSurf))
    surface_free(glowSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _sprShown;
if (iframes &gt; 0 &amp;&amp; hp &gt; 0){
    if (image_xscale == 1){
        _sprShown = sprFinalKnightWeakened;
    }else{
        _sprShown = sprFinalKnightWeakenedFlipped;
    }
}else if (image_xscale == 1){
    _sprShown = sprite_index;
}else{
    switch (sprite_index){
        case sprFinalKnightRun:
            _sprShown = sprFinalKnightRunFlipped;
            break;
        case sprFinalKnightDie:
            _sprShown = sprFinalKnightDieFlipped;
            break;
        case sprFinalKnightDigAttack: 
            _sprShown = sprFinalKnightDigAttackFlipped;
            break;
        case sprFinalKnightFall:
            _sprShown = sprFinalKnightFallFlipped;
            break;
        case sprFinalKnightJump:
            _sprShown = sprFinalKnightJumpFlipped;
            break;
        case sprFinalKnightWeakened:
            _sprShown = sprFinalKnightWeakenedFlipped;
            break;
        default:
            _sprShown = sprFinalKnightFallFlipped;
            break;
    }
}

if (!droppedGun &amp;&amp; image_xscale &lt; 0){
    draw_sprite_ext(sprMakerShootPropGun, 0, x + gunX[1], y + gunY[1], 3, -3, point_direction(0, 0, -dcos(gunAngle[1]), -dsin(gunAngle[1])), c_white, 1);
}

if (!surface_exists(surf)){
    surf = surface_create(320, 320);
}

if (surface_exists(surf)){
    surface_set_target(surf);
    draw_clear_alpha(c_black, 0);
    
    if (hp &gt; 0){
        draw_sprite_ext(_sprShown, image_index, 160, 160, 1, image_yscale, image_angle, image_blend, 1);
    }else if (hp &lt;= 0){
        draw_sprite_ext(_sprShown, image_index, 160, 160, 1, image_yscale, image_angle, image_blend, 1);
    }
    
    surface_reset_target();
    if (iframes &gt; 0)
        draw_surface_ext(surf, x-160, y-160, 1, 1, 0, c_white, image_alpha);
    else
        draw_surface(surf, x-160, y-160);
}

if (global.finalGlowEnabled &amp;&amp; global.extraEffects &amp;&amp; drawXOff == 0){
    if (glowAlpha &gt; 0){ //no point drawing something at an alpha of 0
        if (!surface_exists(glowSurf))
            glowSurf = surface_create(256, 256);
        
        if (surface_exists(glowSurf)){
            surface_set_target(glowSurf);
            draw_clear_alpha(c_black, 0);
            
            //Gun and Knight
            draw_sprite_ext(_sprShown, image_index, 128, 128, 1, 1, image_angle, c_white, 1);
            
            surface_reset_target();
            
            if (surface_exists(glowSurf)){
                shader_set(shdFinalWhite);
                shader_set_uniform_f(global.finalGlowHandle, 256, 256, 10, glowAlpha*image_alpha);
                draw_surface(glowSurf, x-128, y-128);
                shader_reset();
            }
        }
    }
}

if (!droppedGun &amp;&amp; image_xscale &gt; 0){
    draw_sprite_ext(sprMakerShootPropGun, 0, x + gunX[0], y + gunY[0], 3, 3, gunAngle[0], c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
