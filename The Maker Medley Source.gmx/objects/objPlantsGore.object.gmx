<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprJumpRefresher</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy gore
row = 0;
yBase = y;
angInc = random_range(-2.48, -1.65);
hspeed = random_range(0.8, 1.9);
vspeed = random_range(-2, -1);
gravity = random_range(0.125, 0.149);
image_speed = 0;
audio_sound_pitch(audio_play_sound(sndPlantsLimb, 0, 0), PITCH_FLUCT);
state = 0; //0 = 1st piece, 1 = 2nd, etc.

glowLen = 20;
glowFrame = glowLen-1;
glowAlpha = 0;

//Variables set in Alarm 0 to affect drawing
drawSpr = sprCamera;  // the sprite_index of a gore object is set to the that of the enemy which created it
drawInd = 0;  // default set in enemy parent is the enemy's image_index; accounts for the automatic image_number wrap-around
glowSpr = sprCamera;
glowInd = 0;  // default set in enemy parent is the enemy's image_index
xOrig = 0;  // like changing the x origin by that amount
yOrig = 0;  // like changing the y origin by that amount

frozen = false;
fromEnemy = true;  // if false, this instance must have User Event 0 manually called

//hyper cherry
hue = 0;
sat = 255;

// for shadow
width = 1;
height = 1;
angOff = 0; // will be subtracted from image_angle
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set draw sprite/subimg, origin and position offset
// gore is spawned at the enemy's x/y position. If that does not look right, you can adjust its position here
// x/yOrig can be used to make a sprite rotate "around" a point offset from the origin. The change in relative position from this action is negated at the bottom of this code
// image_xscale and image_yscale are taken into account for the origin offset in the draw code, so base those numbers on the sprite size in the editor

// other values specific to the type of gore can be set here as well
switch(sprite_index){
    case sprCherry:
    case sprPlantsCherryHit:
        if (state == 0){  // stem
            x +=  2  *image_xscale;
            y += -4  *image_yscale;
            drawSpr = sprPlantsCherryGore;
            drawInd = image_index;
            glowInd = 4 + image_index;
            
            width = 12;
            height = 12;
            xOrig = 1;
        }else if (state == 1){
            drawSpr = sprPlantsCherry;
            glowInd = 2 + image_index;
            
            width = 22;
            height = 22;
            xOrig = 2;
        }
        glowSpr = sprPlantsCherryHit;
        if (sprite_index == sprPlantsCherryHit){
            drawSpr = glowSpr;
            drawInd = glowInd;
        }
        break;
    case sprPlantsMikuRun:
        drawInd = floor(image_index) mod 7;
        if (state == 0){
            drawSpr = sprPlantsMikuRunArm;
            x += 3*image_xscale;
            y += 4*image_yscale;
            
            //the origin is calculated based on the animation frame
            var _ang;
            switch (drawInd){
                case 0:
                    _ang = 54.78;
                break;
                case 1:
                    _ang = 60.95;
                break;
                case 2:
                    _ang = 64.54;
                break;
                case 3:
                    _ang = 111.80;
                break;
                case 4:
                    _ang = 135;
                break;
                case 5:
                    _ang = 136.74;
                break;
                case 6:
                    _ang = 142.13;
                break;
                default:
                    _ang = 0;
                break;
            }
            
            xOrig = 6*dcos(_ang - 90) + 2;
            yOrig = 6*(-dsin(_ang - 90));
            
            width = 20;
            height = 7;
            angOff = _ang;
        }else if (state == 1){
            drawSpr = sprPlantsMikuRunHead;
            y += -9*image_yscale;
            
            width = 32;
            height = 32;
            yOrig = -9;
        }
        glowSpr = drawSpr;
        glowInd = 7 + drawInd;
        break;
    case sprPlantsMikuIdle:
        drawInd = floor(image_index) mod 10;
        if (state == 0){  // arm
            drawSpr = sprPlantsMikuIdleArm;
            
            switch(floor(drawInd)){
                case 0:
                    angOff = -65;
                break;
                case 1:
                case 9:
                    angOff = -62;
                break;
                case 2:
                case 8:
                    angOff = -57;
                break;
                case 3:
                case 7:
                    angOff = -67;
                break;
                case 4:
                case 6:
                    angOff = -90;
                break;
                case 5:
                    angOff = -96;
                break;
            }
            
            xOrig = lengthdir_x(13, angOff) + 4;
            yOrig = lengthdir_y(13, angOff) - 6;
            
            width = 20;
            height = 7;
        }else if (state == 1){
            drawSpr = sprPlantsMikuIdleHead;
            yOrig = -12;
            
            width = 32;
            height = 32;
        }
        glowSpr = drawSpr;
        glowInd = 10 + drawInd;
        break;
    case sprPlantsMikuEat:
        drawInd = floor(image_index) mod 4;
        if (state == 0){
            drawSpr = sprPlantsMikuEatArm;
            xOrig = -6;
            yOrig = +3;
            
            x += 3*image_xscale;
            y += 6*image_yscale;
            angOff = -27;
            width = 16;
            height = 10;
        }else{
            drawSpr = sprPlantsMikuEatHead;
            y -= 7*image_yscale;
            xOrig = -3;
            yOrig = -5;
            
            width = 32;
            height = 32;
        }
        glowSpr = drawSpr;
        glowInd = 4 + drawInd;
        break;
    case sprPlantsGuyIdle:
    case sprPlantsGuyRunning:
        x += 24  *image_xscale;
        y += -8  *image_yscale;
        
        if (sprite_index == sprPlantsGuyIdle){
            drawSpr = sprPlantsGuyIdleArm;
            glowSpr = sprPlantsGuyIdleArmHit;
            
            if (floor(drawInd) == 1 || floor(drawInd) == 2){
                xOrig = -2;
                yOrig = 3;
            }else{
                xOrig = 3;
                yOrig = 2;
            }
            
            switch(floor(drawInd)){
                case 0:
                    width = 43;
                    height = 18;
                    angOff = 42;
                break;
                case 1:
                    width = 40;
                    height = 15;
                    angOff = 53;
                break;
                case 2:
                    width = 41;
                    height = 15;
                    angOff = 54;
                break;
                case 3:
                    width = 38;
                    height = 14;
                    angOff = 42;
                break;
            }
        }else{
            drawSpr = sprPlantsGuyRunningArm;
            glowSpr = sprPlantsGuyRunningArmHit;
            xOrig = 2;// - 2*floor(drawInd);
            yOrig = 2;
            
            if (floor(drawInd) == 2){
                width = 36;
            }else{
                width = 32;
            }
            height = 14;
            angOff = 41;
        }
        break;
    case sprPlantsIWBTGSpike:
        var _sprXOff = 0, _sprYOff = 0;  // not accounting for scale or rotation
        // keep in mind the spike sprite faces left
        if (state == 1){
            _sprXOff = -4;  // align centered shards with the spike sprite
            
            width = 32;
            height = 16;
        }else{
            _sprXOff = 2;  // align centered shards with the spike sprite
            _sprYOff = -8*(1-state);  // move each shard to correct vertical position
            
            width = 26;
            height = 13;
            angOff = -30 * (1-state);
        }
        // w/o rotations, moving an origin (x, y)  is replicated by moving the sprite (-x, -y)
        // rotating complicates this, but that is handled by the script
        // therefore, we can use this script to move a sprite  (x, y)  by providing the inputs  (-x, -y)
        /*var _translation = scrChangeOriginScaled(0, 0, -(_sprXOff), -(_sprYOff), image_angle, image_xscale, image_yscale);
        x += _translation[0];
        y += _translation[1];*/
        scrAdjustForOrigin(0, 0, (_sprXOff), (_sprYOff), image_angle, image_xscale, image_yscale);
        
        drawSpr = sprPlantsIWBTGSpikeShards;
        glowSpr = drawSpr;
        drawInd = state;
        glowInd = 3 + drawInd;
        break;
}

//account for origin change
x += xOrig  * image_xscale;
y += yOrig  * image_yscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
//DEBUG
image_angle += 2;
frozen = true;
if (keyboard_check_pressed(vk_lcontrol)){image_index ++; event_perform(ev_alarm, 0);}
*/

if (!frozen){
    if (gravity == 0){
        image_alpha -= 0.03;
        if (angInc != 0){
            if (abs(angInc) &lt; 0.2){
                angInc = 0;
            }else{
                angInc -= 0.2*sign(angInc);
            }
        }
        if (hspeed != 0){
            if (abs(hspeed) &lt; 0.15){
                hspeed = 0;
            }else{
                hspeed -= 0.15*sign(hspeed);
            }
        }
        if (image_alpha &lt;= 0){
            instance_destroy();
        }
    }else if (y &gt;= yBase){
        y = yBase;
        gravity = 0;
        vspeed = 0;
    }
    
    image_angle += angInc;
    if (glowFrame &gt; 0){
        glowFrame --;
    }
    
    if (sprite_index == sprPlantsCherryHit &amp;&amp; sat &gt; 0){
        //sat = max(sat - 2.55, 0);
        
        /*if (state == 0){
            sat = max(sat - 5, 0);
        }else if (state == 1){
            sat = max(sat - 2.55, 0);
        }*/
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadow
var _yScale = clamp((yBase - y)/40, 0, 1);
var _shadowScale = (1 + 0.4*_yScale);
var _shadowDim = scrPlantsShadow(width * _shadowScale, height * _shadowScale);

if (_shadowDim[0] &gt; 0 &amp;&amp; _shadowDim[1] &gt; 0){
    draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, yBase+height/2, _shadowDim[0], _shadowDim[1], image_angle - angOff, c_white, image_alpha * (1 - 0.2*_yScale));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing
var _xscale = image_xscale, _yscale = image_yscale, _mainBlend = c_white, _glowBlend = c_white, _angle = image_angle, _alpha = image_alpha;  // only set these if you need to override the default value

//override default values
switch(sprite_index){
    case sprPlantsCherryHit:
        _mainBlend = make_color_hsv(hue, max(sat, 0), 204);
    break;
}

var _origin = scrChangeOrigin(0, 0, xOrig, yOrig, image_angle);

draw_sprite_ext(drawSpr, drawInd, x + _origin[0]*_xscale, y + _origin[1]*_yscale, _xscale, _yscale, _angle, _mainBlend, _alpha);
if (glowFrame &gt; 0){
    var _glowAlpha = scrPlantsGlow(glowFrame, glowLen);
    draw_sprite_ext(glowSpr, glowInd, x + _origin[0]*_xscale, y + _origin[1]*_yscale, _xscale, _yscale, _angle, _glowBlend, _glowAlpha*_alpha);
}


/*  // Helps with debugging
draw_set_color(c_red);
draw_circle(x, y, 3, false);
draw_set_font(fDefault12);
draw_text(x, y-60, "W: " + string(width));
draw_text(x, y-30, "H: " + string(height));
draw_set_color(c_white);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
