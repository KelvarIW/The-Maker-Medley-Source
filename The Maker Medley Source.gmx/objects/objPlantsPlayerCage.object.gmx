<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlantsPlayerCage</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///For the ending death effect

wallDist = 28;  // 32 pixels from centered x/y position --&gt; walls of cage

//  Fake Player  \\
//x/y boundaries, based on the center of the cage

playerLeft = -wallDist + 5;
playerRight = wallDist - 6;
playerTop = -wallDist + 12;
playerBottom = wallDist - 9;

//state and position
playerAlive = true;
playerX = irandom_range(playerLeft, playerRight);
playerY = playerBottom;

//movement
hDir = choose(-1, 1);
hTime = irandom_range(3, 9);
vSpd = 0;
jumpTime = irandom_range(2, 6);
jumpStrength = 8.5;
fallFrame = 0;
grav = 0.4;
//  END Fake Player  \\

//blood
bloodLeniency = 2;
maxBlood = 400;
curBlood = 0;
bloodFrames = sprite_get_number(sprBlood);

for (var i=(maxBlood-1); i &gt;= 0; i--){
    bloodActive[i] = false;
    bloodX[i] = 0;
    bloodY[i] = 0;
    bloodHspd[i] = 0;
    bloodVspd[i] = 0;
    bloodGrav[i] = 0;
    bloodInd[i] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (playerAlive){
    if (hTime &gt; 0){
        hTime --;
        if (hTime &lt;= 0){
            hDir *= -1;
            hTime = irandom_range(5, 13);
        }
    }
    
    if (jumpTime &gt; 0){
        jumpTime --;
        if (jumpTime &lt;= 0  &amp;&amp;  (!instance_exists(objPlantsBoshyKillingSpider) &amp;&amp; collision_rectangle(x - 32, y - 32, x + 32 + 16, y, objPlantsEnemy, false, false) == noone)){
            vSpd = -(jumpStrength);
            //don't reset -- that's done when it lands
            
            //particles + audio  (from scrPlayerJump())
            if (!place_meeting(x, y, objWater)){
                repeat(irandom_range(3,5)){
                    with (instance_create(x, y+5, objMakerCirclePart)){
                        color = c_gray;
                        image_alpha = random_range(0.35, 0.55);
                        vspeed = random_range(-1.2, -0.67);
                        hspeed = random_range(-1.2, 1.2);
                        rad = random_range(2, 3.5);
                        radDec = rad/20;
                    }
                }
            }
            audio_play_sound(sndJump, 0, 0);  //audio_sound_pitch(audio_play_sound(sndJump, 0, 0), PITCH_FLUCT);
        }
    }
    
    vSpd += grav;
    playerX = clamp(playerX + 3*hDir, playerLeft, playerRight);
    playerY = clamp(playerY + vSpd, playerTop, playerBottom);
    if ((playerY &lt;= playerTop  &amp;&amp;  vSpd &lt; 0) || (playerY &gt;= playerBottom  &amp;&amp;  vSpd &gt; 0)){
        vSpd = 0;
        if (playerY &gt;= playerBottom &amp;&amp; jumpTime &lt;= 0){  // player landed
            jumpTime = irandom_range(2, 6);
        }
    }
    
    if (vSpd &gt; 0){
        fallFrame = min(fallFrame + 0.5, 6);
    }else{
        fallFrame = 0;
    }
    
    mask_index = sprPlayerMask;
    var _touchingEnemy = false;
    with (objPlantsEnemy){
        if ((object_index != objPlantsBoshy &amp;&amp; object_index != objPlantsGuy) &amp;&amp; place_meeting(x-other.playerX, y-other.playerY, other)){
            _touchingEnemy = true;
            break;
        }
    }
    
    if (_touchingEnemy  ||  place_meeting(x+playerX, y+playerY, objPlantsBoshyKillingSpider)  || (place_meeting(x+playerX, y+playerY, objPlantsEnemyBullet)  ||  place_meeting(x, y, objPlantsEnemyBullet))){  // second objPlantsEnemyBullet check prevents player surviving due to random movement
        //kill player
        //instance_create(x+playerX, y+playerY, objMakerDeathEffect);  // (replaced by blood effect)
        playerAlive = false;
        
        //make bullets switch depth relative to cage  (if relevant)
        with (objPlantsEnemyBullet){
            if (place_meeting(x - other.playerX, y - other.playerY, other)  &amp;&amp;  shadowType == 1){
                if (row &lt;= 2){
                    row = 3;
                }else{
                    row = 2;
                }
            }
        }
        
        audio_play_sound(sndDeath,0,false);
        audio_stop_sound(sndPlantsLoseNooo);
        
        if (global.autoRestart){
            instance_create(0, 0, objMakerAutoRestart);
        }else{
            with (objPlantsCtrl){
                deathEffect = true;
            }
        }
    }
    mask_index = -1;
}

if (!playerAlive){
    if (curBlood &lt; maxBlood){
        var _spawnNum = 20;
        var _spd = 0, _dir = 0;
        for (var i=curBlood; i&lt;(curBlood+_spawnNum); i++){
            bloodActive[i] = true;
            bloodX[i] = playerX;
            bloodY[i] = playerY;
            _spd = random(6);
            _dir = random(360);
            bloodHspd[i] = _spd * dcos(_dir);
            bloodVspd[i] = _spd *(-dsin(_dir));
            bloodGrav[i] = (0.1+random(0.2)) * global.grav;
            bloodInd[i] = irandom(bloodFrames-1);
        }
        curBlood += _spawnNum;
    }
    
    for (var i=0; i&lt;curBlood; i++){
        if (bloodActive[i]){
            bloodVspd[i] += bloodGrav[i];
            bloodX[i] += bloodHspd[i];
            bloodY[i] += bloodVspd[i];
            if (abs(bloodX[i]) &gt;= (wallDist-1) || abs(bloodY[i]) &gt;= (wallDist-1)){
                var _overshoot = 0;
                _overshoot = max(abs(bloodX[i]) - ((wallDist-1)+bloodLeniency), abs(bloodY[i]) - ((wallDist-1)+bloodLeniency), 0);
                
                if (_overshoot &gt; 0){
                    var _dir = point_direction(0, 0, bloodHspd[i], bloodVspd[i]);
                    bloodX[i] -= _overshoot*dcos(_dir);
                    bloodY[i] -= _overshoot*(-dsin(_dir));
                    bloodActive[i] = false;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (playerAlive){
    var _playerSpr = sprPlayerMask, _playerSubimg = (global.countPersistent * 0.5);
    if (vSpd == 0){
        _playerSpr = sprPlayerRunning;
    }else if (vSpd &lt; 0){
        _playerSpr = sprPlayerJump;
    }else{
        if (fallFrame &lt; 6){
            _playerSpr = sprPlayerPreFall;
            _playerSubimg = fallFrame;
        }else{
            _playerSpr = sprPlayerFall;
        }
    }
    //_playerSpr = sprPlayerMask;
    
    draw_sprite_ext(_playerSpr, _playerSubimg, x+playerX, y+playerY, hDir, 1, 0, c_white, 1);
}

draw_sprite(sprPlantsPlayerCage, 0, x, y);

for (var i=0; i&lt;curBlood; i++){
    draw_sprite(sprBlood, bloodInd[i], x+bloodX[i], y+bloodY[i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
