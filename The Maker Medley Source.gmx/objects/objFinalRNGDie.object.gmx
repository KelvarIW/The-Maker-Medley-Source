<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFinalBossRNG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>targetObj = objFinalBossChar_1;
grow = false;
shrink = false;
latchedOn = true;
targetSpd = -1;
appearLerp = 0;
appearChange = 0.032;
appearChangeFast = 0.055;  // used for shrinking when moving between targets
particleTimer = 0;
surf = -4;
glowAlpha = 0;
glowChange = 0.1;
trailNum = 0;
trailNumMax = 10;
appearYDiff = 96;
scaleMax = 0.7;
image_xscale = scaleMax;
image_yscale = image_xscale

// only used for the broken die in the Buffed version of P4
appearXDiff = 0;
positionXOff = 0;
part = 0;  // -1 = left; 1 = right

image_speed = 0;
if (room == rFinalBoss_3){
    image_index = 1;
}

noTrailNumber = -3000;
for(var i=trailNumMax-1;i&gt;=0;i--){
    xprev[i] = noTrailNumber;
    yprev[i] = noTrailNumber;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Snap to objects we're latched onto; Update trail positions
// Snap to objects we're latched onto
var _xOff, _yOff;
_xOff = 0;
_yOff = 0;

if (instance_exists(targetObj)){
    switch(targetObj.object_index){
        case objFinalKnight:
            _yOff = 8;
        break;
        case objFinalKurath:
            _xOff = -18;
        break;
        case objFinalP3Dribix:
            _xOff = -8;
        break;
        case objFinalBossChar_4:
            if (buff() &amp;&amp; sprite_index == sprFinalBossRNGFragment){
                if (image_index == 0){
                    _xOff = -4;
                }else{
                    _xOff =  9;
                }
            }
        break;
    }
    depth = targetObj.depth;
}

if (latchedOn &amp;&amp; instance_exists(targetObj)){
    x = targetObj.x + _xOff;
    y = targetObj.y + _yOff;
}

// Undertale sprite change
if (instance_exists(objFinalBossDraw) &amp;&amp; objFinalBossDraw.undertale){
    image_index = 1;
}

// Update trail positions
if (trailNum &gt; 0){
    for(var i=ceil(trailNum); i&gt;0; i--){
        xprev[i] = xprev[i-1];
        yprev[i] = yprev[i-1];
    }
    xprev[0] = x + appearXDiff*sin(appearLerp * pi/2);
    yprev[0] = y - appearYDiff*sin(appearLerp * pi/2);
}else if (xprev[0] != noTrailNumber){
    for(var i=(trailNumMax-1); i&gt;=0; i--){
        xprev[i] = noTrailNumber;
        yprev[i] = noTrailNumber;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(targetObj)){
    if (!latchedOn){
        var _dist;
        _dist = point_distance(x, y, targetObj.x, targetObj.y);
        if (_dist &lt;= targetSpd){
            x = targetObj.x;
            y = targetObj.y;
            latchedOn = true;
            if (targetObj == objFinalKadyCtrl){
                depth = 111;
            }
            audio_play_sound(sndMakerParachuteGrab, 0, 0);
        }else{
            var _dir;
            _dir = point_direction(x, y, targetObj.x, targetObj.y);
            x += targetSpd*dcos(_dir);
            y += targetSpd*(-dsin(_dir));
            if (targetSpd &lt; 50){
                targetSpd += 2.5;
            }
        }
        if (appearLerp &gt; 0.25){
            appearLerp = max(appearLerp - appearChangeFast, 0.25);
        }else if (appearLerp &lt; 0.25){
            appearLerp = min(appearLerp + appearChange, 1);
        }
    }else{
        if (grow &amp;&amp; shrink){
            shrink = false;  // `grow` takes priority
        }
        
        if (grow){
            if (appearLerp &lt; 1){
                appearLerp = min(appearLerp + appearChange, 1);
                if (appearLerp == 1){
                    grow = false;
                    shrink = false;  // see above (though this should be redundant)
                }
            }
        }else if (shrink){
            if (appearLerp &gt; 0){
                appearLerp = max(appearLerp - appearChange, 0);
                if (appearLerp == 0){
                    shrink = false;
                }
            }
        }
    }
}else if (gravity == 0){
    if (instance_exists(objFinalBossChar_1)){
        targetObj = objFinalBossChar_1;
        event_user(0);
    }else if (instance_exists(objFinalKurath)){
        with (objFinalKurath){
            if (!deleteWhenPossible){
                other.targetObj = objFinalKurath;
            }
        }
        event_user(0);
    }else if (instance_exists(objFinalBossChar_3)){
        targetObj = objFinalBossChar_3;
        event_user(0);
    }else if (instance_exists(objFinalBossChar_4)){
        targetObj = objFinalBossChar_4;
        event_user(0);
    }
}

image_xscale = lerp(0.4, scaleMax, sin(appearLerp*pi/2));
image_yscale = image_xscale;

// Additive circle particles (removed)
// Also manage # of trail positions
particleTimer ++;
if (latchedOn){
    /*
    if (appearLerp &gt; 0.1 &amp;&amp; !shrink){
        if ((particleTimer mod 2) == 1){
            var _inst, _dir;
            _dir = random(360);
            _inst = instance_create((x+positionXOff) + (sprite_width/4)*dcos(_dir)  + appearXDiff*appearLerp, y + (sprite_height/4)*(-dsin(_dir))  - appearYDiff*appearLerp, objFinalRNGDiePart);
            _inst.direction = irandom_range(10, 170);
            _inst.speed = 2;
            _inst.hspeed /= 3;
            if (_inst.vspeed &lt; 0){
                _inst.vspeed *= 2/3;
            }
            _inst.friction = -0.065;
            _inst.dieAlpha = image_alpha;
            _inst.image_alpha = _inst.dieAlpha;
        }
    }
    */
    if (trailNum &gt; 0){
        trailNum --;
    }
}else{  //  if (!latchedOn)
    /*
    var _partNum, _widthScale;
    if (sprite_index == sprFinalBossRNGFragment){
        _partNum = 2;
        _widthScale = 0.5;
    }else{
        _partNum = 7;
        _widthScale = 1;
    }
    
    var _inst, _dir, _placement;
    for(var i = _partNum; i &gt; 0; i --){
        _dir = random(360);
        _inst = instance_create(lerp(xprevious, x, i/_partNum) + ((sprite_width/4) * _widthScale)*dcos(_dir), lerp(yprevious, y, i/_partNum) + (sprite_height/4)*(-dsin(_dir)) - appearYDiff*appearLerp, objFinalRNGDiePart);
        _inst.direction = point_direction(x+hspeed, y+vspeed, xprevious, yprevious) + irandom_range(-10, 10);
        _inst.speed = 4;
        _inst.friction = -0.065;
        _inst.dieAlpha = image_alpha;
        _inst.image_alpha = _inst.dieAlpha;
    }
    */
    if (trailNum &lt; (trailNumMax-1)){
        trailNum = min(trailNum + 1, (trailNumMax-1));
    }
}

if (latchedOn &amp;&amp; appearLerp &lt;= 0.1){
    if (glowAlpha &gt; 0){
        glowAlpha = max(glowAlpha - glowChange, 0);
    }
}else{
    if (glowAlpha &lt; 1){
        glowAlpha = min(glowAlpha + glowChange, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw dropshadow
draw_sprite_ext(sprite_index, image_index, x  + appearXDiff*sin(appearLerp * pi/2), y - appearYDiff*sin(appearLerp * pi/2), image_xscale, image_yscale, 0, c_white, appearLerp/2 + 0.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change target
latchedOn = false;
targetSpd = 8;
grow = false;
shrink = true;
appearXDiff = 0;
appearYDiff = 96;
depth = -9;

audio_play_sound(sndMakerParachuteLost, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != rFinalBoss_2){
    instance_destroy();
}else if (persistent){
    persistent = false;
    depth = 0;
    targetObj = objFinalKurath;
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((instance_exists(objFinalRNGDiePart) &amp;&amp; !instance_exists(objFinalBossChar_4)) || trailNum &gt; 0){
    draw_set_blend_mode(bm_add);
    //Because the buffed mode will have 2 die objects in phase 4, I've chosen to draw the RNG die's particles in objFinalBossChar_4, if the object exists
    //This should not affect the Sudnep avoidance at all, since objFinalBossChar_4 is not present at that time
    if (!instance_exists(objFinalBossChar_4)){
        with (objFinalRNGDiePart){
            draw_self();
        }
    }
    
    //Draw trail
    if (trailNum &gt;= 0){
        var _imagesPerPos = 3;
        if (_imagesPerPos &gt;= 1){
            var _interpAmt, _interpVal;
            for(var i=(floor(trailNum-1)*_imagesPerPos); i&gt;0; i-=1){
                _interpVal = (i/_imagesPerPos);
                _interpAmt = _interpVal - floor(_interpVal);
                var _x1, _x2, _y1, _y2;
                _x1 = xprev[floor(_interpVal)];
                _y1 = yprev[floor(_interpVal)];
                if (_interpAmt &lt; 0.02){
                    _x2 = _x1;
                    _y2 = _y1;
                }else{
                    _x2 = xprev[ceil(_interpVal)];
                    _y2 = yprev[ceil(_interpVal)];
                }
                if ((_x1 != noTrailNumber &amp;&amp; _x2 != noTrailNumber) &amp;&amp; (_y1 != noTrailNumber &amp;&amp; _y2 != noTrailNumber)){
                    draw_sprite_ext(sprite_index, image_index, lerp(_x1, _x2, _interpAmt)  +positionXOff, lerp(_y1, _y2, _interpAmt), (1 - (_interpVal+1)/(trailNumMax+1))*image_xscale, (1 - (_interpVal+1)/(trailNumMax+1))*image_yscale, 0, c_white, 0.6);
                }
            }
        }
    }
    draw_set_blend_mode(bm_normal);
}

if (global.finalGlowEnabled &amp;&amp; global.extraEffects){
    if (!surface_exists(surf))
        surf = surface_create(256, 256);
    
    //Set up surface
    if (surface_exists(surf)){
        surface_set_target(surf);
        draw_clear_alpha(c_black, 0);
        
        draw_sprite_ext(sprite_index, image_index, 128, 128, 1, 1, 0, c_white, 1);
        
        surface_reset_target();
    }
    
    //Draw surface (or, as a failsafe, the sprite)
    var _mainAlpha = appearLerp/2 + 0.5
    if (surface_exists(surf)){
        if (glowAlpha &gt; 0){
            shader_set(shdFinalWhite);
            shader_set_uniform_f(global.finalGlowHandle, 256*image_xscale, 256*image_yscale, 20, glowAlpha);
            draw_surface_ext(surf, x-128*image_xscale  + appearXDiff*sin(appearLerp * pi/2)  +positionXOff, y-128*image_yscale  - appearYDiff*sin(appearLerp * pi/2), image_xscale, image_yscale, 0, c_white, 1);
            shader_reset();
        }
        draw_surface_ext(surf, x-128*image_xscale  + appearXDiff*sin(appearLerp * pi/2)  +positionXOff, y-128*image_yscale  - appearYDiff*sin(appearLerp * pi/2), image_xscale, image_yscale, 0, c_white, _mainAlpha);
    }else{
        draw_sprite_ext(sprite_index, image_index, x  + appearXDiff*sin(appearLerp * pi/2)  +positionXOff, y  - appearYDiff*sin(appearLerp * pi/2), image_xscale, image_yscale, 0, c_white, _mainAlpha);
    }
}else{
    draw_sprite_ext(sprite_index, image_index, x  + appearXDiff*sin(appearLerp * pi/2)  +positionXOff, y - appearYDiff*sin(appearLerp * pi/2), image_xscale, image_yscale, 0, c_white, appearLerp/2 + 0.5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
