<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTriggerMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>objAvoPar</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Call parent event
event_inherited();

//Overwrite parent defaults
timer = -30;
timerEvent = timer;
startTime = 0;
endTime = 1406.5; // --"the level name says "60s", so "60s" it will be" ~RandomFangamer--   "no" ~Kelvar
bgmSource = global.BGMStage1b;

usePracticeEnding = false;  // fight should not end when timer reaches 0
progressMarkers = 6;
progressMarker[5] = 1406.5;
progressMarker[4] = 667;
progressMarker[3] = 500;
progressMarker[2] = 350;
progressMarker[1] = 166.5;
progressMarker[0] = 0;

//specific to Beelzebub Area
angle = 45;
complete = false;
shaderAlpha = 0;
shaderCounter = 0;
spikeLaunchedLast = -1; //spikes from ceiling after spring

// final section timer
countdownTimerActive = false;
countdownTimerAlpha = -0.2;
countdownTimerSurf = -4;
countdownTimerDeathFreeze = -1;
countdownTimerWinFreeze = -1;
drawXOff = 0;  // only for the timer
drawYOff = 0;  // only for the timer
instance_create(400, 160, objBeelzTimerDraw);  // depth

with (objBetterBlock){visible = false;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (surface_exists(countdownTimerSurf)){
    surface_free(countdownTimerSurf);
}

if (audio_exists(bgmS1PurifyVictory))
    audio_stop_sound(bgmS1PurifyVictory);
global.infJump = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (active){
    if ((complete || global.dead) &amp;&amp; shaderAlpha &gt; 0){
        shaderAlpha -= 0.03;
    }else if (shaderAlpha &lt; 1){
        shaderAlpha = min(shaderAlpha + 0.02, 1);
    }
    
    shaderCounter ++;
    if (!complete){
        event_inherited();
        global.beelzFarthest = max(global.beelzFarthest, currentBossProgress);
    }
}

if (countdownTimerActive){
    if (countdownTimerAlpha &lt; 1){
        countdownTimerAlpha = min(countdownTimerAlpha + 0.035, 1);
    }
    
    if (global.dead &amp;&amp; countdownTimerDeathFreeze == -1){
        countdownTimerDeathFreeze = timerEvent;
    }
}

if (global.deathSlow &lt; 1){
    with (objBeelzP02b){
        if (friction &lt;= 0){
            friction = speed/40;
        }
    }
}

if (!global.practicing){
    if (!global.dead &amp;&amp; currentBossProgress &lt; progressMarkers - 1 &amp;&amp; timer &gt;= progressMarker[clamp(floor(currentBossProgress+1), 0, other.progressMarkers-1)]){
        currentBossProgress ++;
    }
}else{
    if (global.practiceWaypointEnd != global.beelzMax &amp;&amp; !global.dead &amp;&amp; timer &gt;= progressMarker[clamp(global.practiceWaypointEnd, 0, progressMarkers-1)] - 0.5){
        scrPracticeEnd();
        active = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Final phase countdown timer
if (countdownTimerActive &amp;&amp; countdownTimerAlpha &gt; 0){
    if (!surface_exists(global.sharedSurf)){
        global.sharedSurf = surface_create(800, 608);
    }
    
    if (surface_exists(global.sharedSurf)){
        surface_set_target(global.sharedSurf);
        draw_clear_alpha(c_black, 0);
        draw_set_font(fAttackTimer);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        
        var _duration = 0;
        if (countdownTimerDeathFreeze == -1 &amp;&amp; countdownTimerWinFreeze == -1){
            _duration = max(1406 - timerEvent, 0);
            if (_duration &lt; 100){
                draw_set_color(c_red);
            }else{
                draw_set_color(c_white);
            }
        }else if (countdownTimerDeathFreeze != -1){
            _duration = max(1406 - countdownTimerDeathFreeze, 0);
            draw_set_color(c_red);
        }else{  // if (countdownTimerWinFreeze != -1){
            _duration = max(1406 - countdownTimerWinFreeze, 0);
            draw_set_color(c_yellow);
        }
        
        scrDrawTimer(400 + drawXOff, 160 + drawYOff, floor(2*_duration), fa_center, false, 2);
        surface_reset_target();
        
        if (surface_exists(global.sharedSurf)){
            var _usingSurf2 = false;
            var _drawX = 0;
            
            if (countdownTimerAlpha &lt; 1){
                if (!surface_exists(global.sharedSurf2)){
                    global.sharedSurf2 = surface_create(800, 608);
                }
                if (surface_exists(global.sharedSurf2)){
                    surface_set_target(global.sharedSurf2);
                    draw_clear_alpha(c_black, 0);
                    _usingSurf2 = true;
                }
            }
            
            if (!_usingSurf2){
                _drawX = -view_xview;
            }
            
            //draw text
            var _outWidth = 3;
            var _prec = 16;
            var _angInc = 360/_prec;
            for (var i=0; i&lt;_prec; i++){
                draw_surface_ext(global.sharedSurf, _drawX + _outWidth*dcos(_angInc*i), _outWidth*(-dsin(_angInc*i)), 1, 1, 0, c_black, 1);
            }
            draw_surface_ext(global.sharedSurf, _drawX, 0, 1, 1, 0, c_white, 1);
            
            
            if (_usingSurf2){
                surface_reset_target();
                _usingSurf2 = false;
                
                if (surface_exists(global.sharedSurf2)){
                    draw_surface_ext(global.sharedSurf2, x-view_xview, 0, 1, 1, 0, c_white, countdownTimerAlpha);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timed attacks
switch(timerEvent){
    case 0:
        instance_create(128, 736, objBeelzP01a);
        instance_create(672, 736, objBeelzP01a);
        
        // Identifier
        scrIdentAttack(room, -1);  // contrains room information, but behaves like an attack identifier
        break;
    case 13:
        if (!global.dead){
            with (objBeelzP01a){
                vspeed = -14;
            }
        }
        break;
    case 43:
        if (!global.dead){
            instance_create(112, -144, objBeelzP01b);
            instance_create(688, -144, objBeelzP01b);
        }
        break;
    case 55:
        with (objBeelzP01b){
            var _proj;
            var _num;
            if (buff()){
                _num = 24;
            }else{
                _num = 16;
            }
            var _inc = 360/_num;
            for(var i=0;i&lt;_num;i++){
                _proj = instance_create(x, y, objMakerFruit);
                _proj.direction = (i+0.5) * _inc;
                if (!buff()){
                    _proj.speed = 5*global.deathSlow;
                }else{
                    _proj.speed = 4*global.deathSlow;
                    if (!global.dead){
                        _proj.gravity = 0.085;
                    }
                }
            }
            vspeed = 24;
            gravity = 0;
        }
        break;
    case 84:
        instance_create(100, -36, objBeelzP01d);
        break;
    case 96:
        instance_create(700, -36, objBeelzP01d);
        break;
    case 126:
        instance_create(400, -48, objBeelzP01c);
        break;
    case 334:
        if (!global.practicing || global.practiceWaypointEnd &gt; 2){
            instance_create(400, -32, objBeelzP02a);
        }
        break;
    case 500:
        instance_create(400, -48, objBeelzP02c);
        break;
    case 512:
        for(var i=0;i&lt;25;i++)
            instance_create(16+i*32, -16, objBeelzP02b);
        break;
    case 667:
        if (instance_exists(objPlayer)){
            var _inst;
            _inst = instance_create(objPlayer.x, objPlayer.y, objMakerMessage);
            _inst.message = "You can jump infinitely";
            global.infJump = true;
            if (!instance_exists(objBeelzP02b)){
                for(var i=0;i&lt;25;i++){
                    instance_create(16+i*32, -16, objBeelzP02b);
                }
            }
        }
    case 669.5:
    case 672:
    case 680:
    case 682.5:
    case 684:
    case 692:
    case 694:
    case 696:
    case 699:
    case 701:
        with (objBeelzP02b){
            if (x == 16 + 32*(other.spikeLaunchedLast+1) || x == 784 - 32*(other.spikeLaunchedLast+1)){
                vspeed = 16*global.deathSlow;
                if (global.dead){
                    friction = 16/40;
                }
            }
        }
        spikeLaunchedLast ++;
        break;
    case 709:
        if (!global.dead){
            var _inst;
            _inst = instance_create(400, -48, objBeelzP02b);
            _inst.image_xscale = 3;
            _inst.image_yscale = -3;
            _inst.depth = -9;
            _inst.vspeed = 12*global.deathSlow;
            instance_create(877, 429, objBeelzP03a);
            audio_play_sound(sndMakerExclamation, 0, 0);
            break;
        }
    case 1406:
        if (!global.dead){
            var _inst;
            _inst = instance_create(-4, 304, objMakerLaser);
            _inst.hspeed = 3*global.deathSlow;
            _inst.image_xscale = 19;
            _inst.image_angle = 90;
            
            usePracticeSystem = false;  // prevent practice mode from ending the fight when the player should die
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start for Practice Mode
if (global.practicing){
    if (global.practiceWaypointStart == 1){
        instance_create(100, 80, objBeelzP01d);
        instance_create(700, 80, objBeelzP01d);
        with (objBeelzP01d){
            movementSine = pi/2;
            event_perform(ev_step, 0);
        }
    }
    if (global.practiceWaypointStart == 2){
        timer -= 16;
        progressMarker[clamp(global.practiceWaypointStart, 0, progressMarkers-1)] = timer;
    }
    
    //Remove tiles that should have been destroyed
    if (global.practiceWaypointStart &gt;= 1){
        with (objBeelzebubTiles){
            if (xstart &lt;= 224 || xstart &gt;= 544)
                event_user(0);
        }
        with (objMakerHeartProp){
            if (gravity == 0){
                event_user(0);
            }
        }
        with (objBlock){
            if ((x &lt;= 224 || x &gt;= 544) &amp;&amp; (x &gt; -32 &amp;&amp; x &lt; 800)){
                instance_destroy();
            }
        }
        audio_play_sound(sndMakerSamplePunch, 0, 0);
    }
    shaderCounter = max(timer*2, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (surface_exists(countdownTimerSurf)){
    surface_free(countdownTimerSurf);
}

if (audio_exists(bgmS1PurifyVictory)){
    audio_stop_sound(bgmS1PurifyVictory);
}
global.infJump = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tile Hueshift effect
if (global.hueshiftEnabled &amp;&amp; shaderAlpha &gt; 0){
    if (!surface_exists(global.sharedSurf)){
        global.sharedSurf = surface_create(800, 608);
    }
    if (surface_exists(global.sharedSurf)){
        surface_set_target(global.sharedSurf);
        draw_clear_alpha(c_black, 0);
        
        // tiles (but not props)
        if (view_xview == 0 &amp;&amp; view_yview == 0){
            with (objBeelzebubTiles){
                if (!broken){draw_sprite_ext(sprS1PurifyBlocks, tile, x, y, 1, 1, image_angle, c_white, 1);}
            }
            with (objBeelzebubTiles){
                if (broken){draw_sprite_ext(sprS1PurifyBlocks, tile, x, y, 1, 1, image_angle, c_white, 1);}
            }
        }else{
            with (objBeelzebubTiles){
                if (!broken){draw_sprite_ext(sprS1PurifyBlocks, tile, x - view_xview, y - view_yview, 1, 1, image_angle, c_white, 1);}
            }
            with (objBeelzebubTiles){
                if (broken){draw_sprite_ext(sprS1PurifyBlocks, tile, x - view_xview, y - view_yview, 1, 1, image_angle, c_white, 1);}
            }
        }
        surface_reset_target();
        
        if (surface_exists(global.sharedSurf)){
            shader_set(shdHueShift);
            shader_set_uniform_f(global.hueshiftHandle, shaderCounter*pi/800);
            
            draw_set_alpha(shaderAlpha);
            draw_surface(global.sharedSurf, 0, 0);
            draw_set_alpha(1);
            
            shader_reset();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
