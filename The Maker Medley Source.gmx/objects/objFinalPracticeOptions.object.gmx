<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSlipBlockMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = -4;
ltgray = make_color_rgb(163, 173, 196);
dkgray = make_color_rgb(16, 30, 41);
fadeout = false;

if (!global.practicing || !(global.practiceWaypointStart == 0 || global.practiceWaypointStart == 8)){
    instance_destroy();
}

// [PHASE 1 DEVS]
//  NOTE: You CAN have the same dev appear twice when using the practice mode
//       (This will never occur in a non-practice playthrough)
buttonSelected[1, 2] = 0;
buttonClicked[1, 2] = 0;
for (var i=2; i&gt;=0; i--){
    buttonSelected[0, i] = 0;
    buttonClicked[0, i] = 0;
    buttonSelected[1, i] = 0;
    buttonClicked[1, i] = 0;
    finalP1Name[i] = scrGetAttackInfo(rFinalBoss_1, i, 0);
}

// [PHASE 4 ATTACKS]
// 
// 
P4Attacks = 10;
P4DragXOff = 0;
P4DragYOff = 0;
P4DraggingScale = 2;
P4Dragging = -1;
P4Selected = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf)){
    surface_free(surf);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> if (fadeout){
    image_alpha -= 0.025;
    if (image_alpha &lt;= 0){
        instance_destroy();
    }
    
    // Phase 1
    // all buttons should appear normal except for those corresponding to the chosen devs (which should appear pressed)
    for (var i=0; i&lt;=2; i++){
        if ((global.practiceFinalBossVal[0]-1) == i){
            buttonSelected[0, i] = true;
            buttonClicked[0, i] = true;
            textBlend[0, i] = c_ltgray;
        }else{
            buttonSelected[0, i] = false;
            buttonClicked[0, i] = false;
            textBlend[0, i] = c_white;
        }
        if ((global.practiceFinalBossVal[1]-1) == i){
            buttonSelected[1, i] = true;
            buttonClicked[1, i] = true;
            textBlend[1, i] = c_ltgray;
        }else{
            buttonSelected[1, i] = false;
            buttonClicked[1, i] = false;
            textBlend[1, i] = c_white;
        }
    }
    
    //Phase 4
    P4Selected = -1;
    P4Dragging = -1;
}else{
    if (room == rFinalBoss_1){
        if (mouse_x &gt;= 180 &amp;&amp; mouse_x &lt; 620 &amp;&amp; mouse_y &gt;= 240 &amp;&amp; mouse_y &lt; 328){ //in range of buttons
            mask_index = sprMakerPracticeSuboptionButton;
            if (mouse_check_button_pressed(mb_right) &amp;&amp; (global.practiceFinalBossVal[0] != 0 || global.practiceFinalBossVal[1] != 0)){
                global.practiceFinalBossVal[0] = 0;
                global.practiceFinalBossVal[1] = 0;
                audio_play_sound_nogroup(sndMakerMenuRelease, 0, 0);
            }
            
            var _buttonXOff = view_xview + (400-ceil(496/2));
            var _buttonYOff = view_yview + (352-184);
            for (var j=0; j&lt;=1; j++){
                for (var i=0; i&lt;=2; i++){
                    if (global.practiceFinalBossVal[j] != (i+1) &amp;&amp; place_meeting(_buttonXOff + (248 + 156*(i-1)), _buttonYOff + (88 + 56*j), objMouseClickCheck)){
                        if (!buttonSelected[j, i]){
                            audio_play_sound_nogroup(sndMakerMenuSelect, 0, 0);
                        }
                        buttonSelected[j, i] = true;
                        
                        if (mouse_check_button_pressed(mb_left)){
                            if (!buttonClicked[j, i]){
                                // only one button can be held down at a time
                                for (var jj=0; jj&lt;=1; jj++){
                                    for (var ii=0; ii&lt;=2; ii++){
                                        buttonClicked[jj, ii] = false;
                                    }
                                }
                                buttonClicked[j, i] = true;
                                audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
                            }
                            global.practiceFinalBossVal[j] = (i+1); //  "+1" because 0 is the default value
                        }else{
                            if (!buttonSelected[j, i]){
                                audio_play_sound_nogroup(sndMakerMenuSelect, 0, 0);  // don't play select and click SFX on the same frame
                            }
                        }
                    }else{
                        buttonSelected[j, i] = false;
                    }
                }
            }
            mask_index = -1;
        }else{  // none can be selected (though one might still be clicked)
            for (var i=0; i&lt;=2; i++){
                buttonSelected[0, i] = false;
                buttonSelected[1, i] = false;
            }
        }
        
        if (!mouse_check_button(mb_left)){  // none can be clicked
            for (var i=0; i&lt;=2; i++){
                buttonClicked[0, i] = false;
                buttonClicked[1, i] = false;
            }
        }
    }else if (room == rFinalBoss_4){
        var _surfX, _surfY, _buttonRowLeft, _buttonRowTop;
        _surfX = 400-(480/2);
        _surfY = 608 + 200;
        _buttonRowLeft = 156;
        _buttonRowTop = 52;
        
        var _P4SelectedPrev = P4Selected;
        if (P4Dragging != -1 &amp;&amp; P4DraggingScale &gt; 1){
            P4DraggingScale = max(P4DraggingScale - 0.24, 1);
        }
        P4Selected = -1;
        
        if (P4Dragging == -1 &amp;&amp; mouse_y &gt;= _surfY + 14 &amp;&amp; mouse_y &lt; _surfY + 76){  // in range of all [2 or 3] rows of buttons
            if (mouse_y &gt;= (_surfY  +  _buttonRowTop)){  // bottom row
                for(var i=(P4Attacks-1) + 1; i&gt;=0; i--){
                    if (mouse_x &gt;= (_surfX + _buttonRowLeft) + 29*i &amp;&amp; mouse_x &lt; (_surfX + _buttonRowLeft + 24) + 29*i){
                        P4Selected = i;
                        if (mouse_check_button_pressed(mb_left)){
                            P4Dragging = i;
                            P4DragXOff = ((_surfX  +  (_buttonRowLeft + 12)) + 29*i) - mouse_x;
                            P4DragYOff = (808 + (_buttonRowTop  +  12)) - mouse_y;
                            P4DraggingScale = 2;
                            var _snd = audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
                            audio_sound_pitch(_snd, 1 + random_range(-0.025, 0.025));
                        }
                        break;
                    }
                }
                if (P4Selected != _P4SelectedPrev &amp;&amp; P4Selected != -1){
                    var _snd = audio_play_sound_nogroup(sndMakerMenuSelect, 0, 0);
                    audio_sound_pitch(_snd, 1 + random_range(-0.025, 0.025));
                }
            }else if (mouse_y &lt; (_surfY  +  _buttonRowTop)){ //top row
                for(var i=(P4Attacks-1); i&gt;=0; i--){
                    if (global.practiceFinalBossVal[i] &gt; 0 &amp;&amp; mouse_x &gt;= (_surfX + _buttonRowLeft) + 29*i &amp;&amp; mouse_x &lt; (_surfX  +  (_buttonRowLeft + 24)) + 29*i){
                        P4Selected = 100+i; //the range of values here needs to be different than the range in the previous conditional
                        if (mouse_check_button_pressed(mb_left) || mouse_check_button(mb_right)){
                            global.practiceFinalBossVal[i] = 0;
                            var _snd = audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
                            audio_sound_pitch(_snd, 0.85 + random_range(-0.025, 0.025));
                        }
                        break;
                    }
                }
                if (P4Selected != _P4SelectedPrev &amp;&amp; P4Selected != -1){
                    var _snd = audio_play_sound_nogroup(sndMakerMenuSelect, 0, 0);
                    audio_sound_pitch(_snd, 1 + random_range(-0.025, 0.025));
                }
            }
        }else if (P4Dragging != -1 &amp;&amp; !mouse_check_button(mb_left)){
            var _closestBox = clamp(round(((mouse_x + P4DragXOff) - (_surfX  +  (_buttonRowLeft + 12))) / 29), 0, P4Attacks-1);
            
            var _hDist = (mouse_x + P4DragXOff) - ((_surfX  +  (_buttonRowLeft + 12)) + 29*_closestBox);
            var _vDist = (mouse_y + P4DragYOff) - (_surfY + 24);
            _vDist = max(abs(_vDist) - 12, 0) * sign(_vDist); //vertical leniency
            
            if (sqrt(sqr(_hDist) + sqr(_vDist)) &lt;= 18){
                global.practiceFinalBossVal[_closestBox] = P4Dragging+1; //we have to add 1 so choosing the first attack will not set it to "0", since "0" is used to represent an empty slot
                var _snd = audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
                audio_sound_pitch(_snd, 0.7 + random_range(-0.025, 0.025));
            }
            P4Dragging = -1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf)){
    surface_free(surf);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rFinalBoss_1){
    if (!surface_exists(surf)){
        surf = surface_create(496, 184);
        if (surface_exists(surf)){
            surface_set_target(surf);
            draw_clear_alpha(ltgray, 1);
            
            //Border Edges
            draw_sprite_ext(sprMakerSettingsBorder, 0, 16, 0, 62, 2, 0, c_white, 1);
            draw_sprite_ext(sprMakerSettingsBorder, 0, 16, 184, 62, -2, 0, c_white, 1);
            draw_sprite_ext(sprMakerSettingsBorder, 1, 0, 16, 2, 23, 0, c_white, 1);
            draw_sprite_ext(sprMakerSettingsBorder, 1, 496, 16, -2, 23, 0, c_white, 1);
            
            //Border Corners
            draw_sprite_ext(sprMakerSettingsBorder, 2, 0, 0, 2, 2, 0, c_white, 1);
            draw_sprite_ext(sprMakerSettingsBorder, 2, 0, 184, 2, 2, 90, c_white, 1);
            draw_sprite_ext(sprMakerSettingsBorder, 2, 496, 0, 2, 2, 270, c_white, 1);
            draw_sprite_ext(sprMakerSettingsBorder, 2, 496, 184, 2, 2, 180, c_white, 1);
            
            //Text (aside from buttons)
            draw_set_color_write_enable(true, true, true, false);
            draw_set_color(c_white);
            draw_set_valign(fa_bottom);
            
            draw_set_halign(fa_center);
            draw_set_font(fDefault24);
            draw_text_outline((496/2), 54, "Dev Appearances", 3, dkgray, 4);
            
            draw_set_halign(fa_left);
            draw_set_font(fDefault12);
            draw_text_outline(32, 72, "First:", 2, dkgray, 4);
            draw_text_outline(32, 128, "Second:", 2, dkgray, 4);
            
            draw_set_color_write_enable(true, true, true, true);
            
            surface_reset_target();
        }
    }
    if (surface_exists(surf)){
        surface_set_target(surf);
        
        draw_set_color_write_enable(true, true, true, false);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_font(fDefault12);
        
        //Buttons and text
        var _index = 0, _blend = c_white;
        for (var j=0; j&lt;=1; j++){
            for (var i=0; i&lt;=2; i++){
                // Button index
                if (global.practiceFinalBossVal[j] == (i+1)){
                    _index = 2;
                }else{
                    // button behavior
                    if (buttonSelected[j, i]){
                        if (buttonClicked[j, i]){
                            _index = 2;
                        }else{
                            _index = 1;
                        }
                    }else{
                        _index = 0;
                    }
                }
                
                // Button text col
                if (_index == 2){
                    _blend = c_ltgray;
                }else{
                    _blend = c_white;
                }
                draw_sprite(sprMakerPracticeSuboptionButton, _index, 248 + 156*(i-1), 88 + 56*j);
                
                draw_set_color(_blend);
                if (i == 0){
                    draw_text_transformed_outline(248 + 155*(i-1), 88 + 56*j, finalP1Name[i], 2*0.8, dkgray, 8, 0.8, 0.8, 0);
                }else{
                    draw_text_outline(248 + 155*(i-1), 88 + 56*j, finalP1Name[i], 2, dkgray, 8);
                }
                draw_set_color(c_white);
            }
        }
        
        draw_set_color_write_enable(true, true, true, true);
        surface_reset_target();
        
        draw_surface_ext(surf, 400-(496/2), 352-184, 1, 1, 0, c_white, image_alpha);
    }
}else if (room == rFinalBoss_4){
    var _buttonRowLeft, _buttonRowTop;
    _buttonRowLeft = 156;
    _buttonRowTop = 52;
    
    if (!surface_exists(surf)){
        surf = surface_create(480, 90);
        if (surface_exists(surf)){
            surface_set_target(surf);
            draw_clear_alpha(ltgray, 1);
            
            //Divider lines
            draw_set_color(dkgray);
            //draw_line_width(151 - 0.5, 8 - 0.5, 151 - 0.5, 82 - 0.5, 2);
            draw_line_width(151 - 0.5, 8 - 0.5, 151 - 0.5, (82) - 0.5, 2);
            
            //draw_line_width(7 - 0.5, 44 - 0.5, (480-8) - 0.5, 44 - 0.5, 2);
            draw_line_width(7 - 0.5, 45 - 0.5, (480-8) - 0.5, 45 - 0.5, 2);
            draw_set_color(c_white);
            
            //Border Edges
            draw_sprite_ext(sprMakerSettingsBorder, 0, 7, 0, 58.125, 1, 0, c_white, 1);    // top
            draw_sprite_ext(sprMakerSettingsBorder, 0, 7, 90, 58.125, -1, 0, c_white, 1);   // bottom
            draw_sprite_ext(sprMakerSettingsBorder, 1, 0, 8, 1, 9.25, 0, c_white, 1);    // left
            draw_sprite_ext(sprMakerSettingsBorder, 1, 480, 8, -1, 9.25, 0, c_white, 1);    //right
            
            //Border Corners
            draw_sprite_ext(sprMakerSettingsBorder, 2, 0, 0, 1, 1, 0, c_white, 1);     // TL
            draw_sprite_ext(sprMakerSettingsBorder, 2, 0, 90, 1, 1, 90, c_white, 1);     // BL
            draw_sprite_ext(sprMakerSettingsBorder, 2, 480, 0, 1, 1, 270, c_white, 1);    // TR
            draw_sprite_ext(sprMakerSettingsBorder, 2, 480, 90, 1, 1, 180, c_white, 1);    // BR
            
            //connecting lines (buffed only)
            for (var i = 0; i &lt; P4Attacks; i++){
                draw_set_color(dkgray);
                draw_line_width((_buttonRowLeft + (29*i + 12)) - 0.5, 26 - 0.5, (_buttonRowLeft + (29*i + 12)) - 0.5, 26 + 0.5, 2);
                draw_set_color(c_white);
            }
            
            //Text (aside from buttons)
            draw_set_color_write_enable(true, true, true, false);
            
            draw_set_halign(fa_right);
            draw_set_valign(fa_middle);
            draw_set_font(fDefault18);
            draw_text_outline(147, 29, "  ORDER:", 3, dkgray, 4);
            draw_text_outline(147, 67, "ATTACKS:", 3, dkgray, 4);
            
            draw_set_color_write_enable(true, true, true, true);
            
            surface_reset_target();
        }
    }
    if (surface_exists(surf)){
        surface_set_target(surf);
        
        draw_set_color_write_enable(true, true, true, false);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_color(c_white);
        draw_set_font(fDefault12);
        
        //Location where we change from drawing "?" to "-"
        var _highestSet = -1;
        for (var i = P4Attacks-1; i&gt;=0; i--){
            if (global.practiceFinalBossVal[i] &gt; 0){
                _highestSet = i;
                break;
            }
        }
        /*if (buff() &amp;&amp; ((_highestSet mod 2) == 0)){
            _highestSet += 1;  // (removed) dual-attack mode must have attacks in pairs
        }*/
        
        // TOP ROW \\
        // icons and required "?" slots
        if (_highestSet &gt;= 0){
            for (var i = 0; i &lt;= min(_highestSet, P4Attacks-1); i++){
                if (global.practiceFinalBossVal[i] == P4Attacks+1){  // user-placed "?" slot
                    draw_sprite(sprFinalP4AttackIcon, (P4Attacks+1) - 1, _buttonRowLeft + 29*i + 12, 26);
                }else if (global.practiceFinalBossVal[i] == 0){  // mandated undefined slot
                    draw_sprite_ext(sprFinalP4AttackIcon, P4Attacks, _buttonRowLeft + 29*i + 12, 26, 1, 1, 0, c_gray, 1);
                }else{ //user-placed attack
                    draw_sprite(sprFinalP4AttackIcon, global.practiceFinalBossVal[i] - 1, _buttonRowLeft + 29*i + 12, 26);
                }
            }
        }
        // "-" (undefined) slots
        for (var i = max(_highestSet+1, 0); i &lt;= (P4Attacks-1); i++){
            draw_sprite_ext(sprFinalP4AttackIcon, (P4Attacks+1), _buttonRowLeft + 29*i + 12, 26, 1, 1, 0, c_gray, 1);
        }
        
        // (removed) Dual-attack only: Define attack pairs
        /*if (buff()){
            draw_set_color(dkgray);
            for (var i = 0; i &lt; P4Attacks; i+= 2){
                draw_rectangle(_buttonRowLeft  +  (29*i - 0)  - 0.5, (14 - 0)  - 0.5, _buttonRowLeft  +  (29*i + 52 + 0)  - 0.5, (14 + 23 + 0)  - 0.5, true);
                draw_rectangle(_buttonRowLeft  +  (29*i - 1)  - 0.5, (14 - 1)  - 0.5, _buttonRowLeft  +  (29*i + 52 + 1)  - 0.5, (14 + 23 + 1)  - 0.5, true);
            }
            draw_set_color(c_white);
        }*/
        
        // repeat symbol
        draw_sprite(sprFinalP4AttackIcon, (P4Attacks+2), _buttonRowLeft + 29*(P4Attacks) + 12, 26);
        
        // BOTTOM ROW \\
        //attack option icons
        for(var i=0; i &lt; (P4Attacks+1); i++){  // the `+1` in `(P4Attacks+1)` is for the "?" (random) option
            draw_sprite(sprFinalP4AttackIcon, i, _buttonRowLeft + 29*i + 12, 26 + 38);
        }
        if (P4Dragging &gt;= 0 &amp;&amp; P4Dragging &lt; (P4Attacks+1)){
            draw_sprite_ext(sprFinalP4AttackIcon, P4Dragging, _buttonRowLeft + 29*P4Dragging + 12, _buttonRowTop + 12, 1, 1, 0, c_gray, 1);
        }
        
        //highlight selected slot (if there is one)
        if (P4Selected != -1){
            draw_set_color(c_white);
            draw_set_alpha(0.2);
            draw_rectangle(145 + 29*(P4Selected mod 100) + 12   + 0.5, (_buttonRowTop) - 38*(P4Selected div 100)  + 0.5, 169 + 29*(P4Selected mod 100) + 11   - 0.5, ((_buttonRowTop + 24) - 38*(P4Selected div 100))  - 0.5, false);
            draw_set_alpha(1);
        }
        
        draw_set_color_write_enable(true, true, true, true);
        surface_reset_target();
        
        draw_surface_ext(surf, 400-(480/2), 608 + 200, 1, 1, 0, c_white, image_alpha);
    }
    if (P4Dragging &gt;= 0 &amp;&amp; !fadeout){
        draw_sprite_ext(sprFinalP4AttackIcon, P4Dragging, mouse_x+P4DragXOff*P4DraggingScale, mouse_y+P4DragYOff*P4DraggingScale, P4DraggingScale, P4DraggingScale, 0, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
