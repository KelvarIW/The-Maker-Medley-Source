<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFinalTralexBartenderSlam</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
attack = 1;

surf = -4;
glowSurf = -4;
glowAlpha = 0;

animFrame = 0;
backGlow = 0;
backGlowAng = -pi/2;
backScaleMult = 0;
shootable = false;
visualEffectSine = 0;
counter = -41;
yBase = ystart;

healthbar = noone;
nametag = noone;

shieldAlpha = 0;
shieldScale = 1;
eyeCounter = 5;

hoverCounter = 0;
moveDir = 0;
shurikenSpawnX = 0;

moveLimit = 3;
distToPlayer = 0;
targetX = 0;

cautionSignCounter = -1;
cautionSignX = 0;
initialSlamLaserScale = 0;
initialSlamLaserIndAlphaMult = 0;
moveTrailVal[4] = 0; //initial movement after slam; x1, y1, x2, y2, alpha

//Take the die
with (objFinalRNGDie){
    //Mr. Scribble uses an offscreen spike to hold the die until Tralex spawns
    if (instance_exists(targetObj) &amp;&amp; targetObj.object_index == objMakerSpikeUp){
        instance_destroy(targetObj);
    }
    targetObj = other.object_index;
    latchedOn = true;
    appearLerp = 0;
    grow = false;
    shrink = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
    
if (surface_exists(glowSurf))
    surface_free(glowSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take the die
with (objFinalRNGDie){
    event_user(0);
    targetObj = other.object_index;
    grow = true;
    shrink = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (initialSlamLaserScale &gt; 0){
    initialSlamLaserScale -= 1/6;
}
if (moveTrailVal[4] &gt; 0){
    moveTrailVal[4] -= 0.1;
}

if (attack == 1 &amp;&amp; counter &gt;= 70 &amp;&amp; sprite_index == sprFinalTralexBartenderSlam &amp;&amp; animFrame &lt; 3){
    animFrame += 1/3;
}

if (attack == 1){
    if (!global.dead || !(counter+1 == -40 || counter+1 == 70 || counter+1 == 150)){
        counter ++;
    }
    
    //Warning
    if (counter == -40){
        if (instance_exists(objFinalP3Player)){
            x = objFinalP3Player.x;
            cautionSignX = x;
            cautionSignCounter = 0;
        }
    }
    if (counter == 70){
        if (instance_exists(objFinalP3UndertaleWindow)){
            y += (objFinalP3UndertaleWindow.botY - bbox_bottom);
        }else{
            y += (480 - bbox_bottom);
        }
        cautionSignCounter = -1; //make signs disappear
        initialSlamLaserScale = 1;
        initialSlamLaserIndAlphaMult = 0;
        audio_sound_pitch(audio_play_sound(sndMakerSamplePunch, 0, 0), 1.2);
        
        //BUFF - Shuriken shockwaves
        if (buff()){
            var _inst;
            _inst = instance_create(cautionSignX, bbox_bottom, objFinalTralexShockwave);
            _inst.hDir = 1;
            _inst = instance_create(cautionSignX, bbox_bottom, objFinalTralexShockwave);
            _inst.hDir = -1;
        }
        
        //canes
        with (objFinalTralexCane){
            direction = finalAngle;
            speed = 30;
            movement = 1;
            trailPieces = 0;
        }
    }
    if (counter &gt;= 150){
        if (sprite_index != sprFinalTralexBartenderStand){
            sprite_index = sprFinalTralexBartenderStand;
            animFrame = 0;
            
            with (objFinalTralexCane){
                movement = 3;
                xstart = x;
                ystart = y;
            }
        }else{
            animFrame += 1/3;
            if (animFrame &gt;= 3){
                animFrame = 0;
                moveTrailVal[0] = x; //x1
                moveTrailVal[1] = y; //y1
                if (!global.dead &amp;&amp; instance_exists(objFinalP3Player)){
                    x = objFinalP3Player.x;
                    y = 160;
                }else{
                    y = -41;
                }
                yBase = y;
                moveTrailVal[2] = x; //x2
                moveTrailVal[3] = y; //y2
                moveTrailVal[4] = 1; //alpha
                
                sprite_index = sprFinalTralexBartender;
                counter = -15 - 1; //easy adjustment
                attack = 2;
                alarm[0] = 1;
            }
        }
        
    }
}else if (attack == 2){
    if (!global.dead || !(counter+1 == -15 || counter+1 == 60 || counter+1 == 90 || counter+1 == 120 || counter+1 == 150 || counter+1 == 180 || counter+1 == 210 || counter+1 == 270))
        counter ++;
    
    //movement
    if (counter &lt;= 37){
        if (instance_exists(objFinalP3Player)){
            x = objFinalP3Player.x;
        }
    }else{
        x += moveDir;
    }
    
    //actions
    if (counter == -15){
        var _inst;
        _inst = instance_create(-23*3, 0, objFinalTralexBlaster);
        _inst.image_angle = 90
        _inst = instance_create(800 + 23*3, 0, objFinalTralexBlaster);
        _inst.image_angle = -90;
        audio_play_sound(sndFinalTralexLaserCharge, 0, 0);
    }else if (counter == 30){
        if (instance_exists(objFinalP3Player)){
            with (objFinalTralexBlaster){
                // the following is redundant for the first blast, but needed for the rest
                // there used to be multiple blasts
                laserScaleShrink = false;
                laserScale = 1;
                laserScaleAppearanceMult = 0;
                attack = 0;
            }
        }else{
            counter = 0;
        }
    }else if (counter == 37){
        with (objFinalTralexBlaster){
            attack = 1;
            laserScale = 1;
            laserScaleAppearanceMult = 0;
        }
        if (x &lt; 400){
            moveDir = 1;
        }else if (x &gt; 400){
            moveDir = -1;
        }else{
            moveDir = choose(1, -1);
        }
        shurikenSpawnX = 400 + 440*moveDir; //-40 or 840
        
        var _snd = audio_play_sound(sndMakerSampleBlaster, 0, 0);
        audio_sound_pitch(_snd, 0.36);
        audio_sound_gain(_snd, 1.2, 0);
    }
    
    // Stop if at the end of the window
    if (moveDir &gt; 0 &amp;&amp; x &gt;= 588){
        moveDir = 0; //moveDir *= -1;
    }else if (moveDir &lt; 0 &amp;&amp; x &lt;= 212){
        moveDir = 0; //moveDir *= -1;
    }
    
    //stars
    if (counter == 30){
        with (objFinalRNGDie){
            grow = true;
            shrink = false;
        }
    }
    if (counter == 60 || counter == 90 || counter == 120 || counter == 150 || counter == 180 || counter == 210){
        instance_create(shurikenSpawnX, 444, objFinalTralexStar);
        
        if (buff() &amp;&amp; (counter mod 60 == 30)){
            instance_create((800 - shurikenSpawnX), 444, objFinalTralexStar);
        }
    }
    if (counter == 210){
        with (objFinalRNGDie){
            grow = false;
            shrink = true;
        }
    }
    if (counter == 230){
        with (objFinalTralexBlaster){
            laserScaleShrink = true;
        }
        if (global.practicing &amp;&amp; global.practiceWaypointEnd == 7){
            //scrPracticeEnd();
        }else{
            instance_create(0, 0, objFinalSudnepCtrl);
        }
    }
    if (counter == 280){
        with (objFinalTralexBlaster){
            attack = 2;
        }
        moveDir = 0;
        attack = 3;
        if (global.practicing &amp;&amp; global.practiceWaypointEnd == 7){
            scrPracticeEnd();
        }else{
            //instance_create(0, 0, objFinalSudnepCtrl);
        }
        with (objFinalBossChar_3){
            attack = 4;
        }
        counter = 0;
    }
}else if (attack == 3){
    vspeed -= 0.16;
    if (bbox_bottom &lt; -160){
        attack = 4;
        speed = 0;
        counter = 0;
    }
}else if (attack == 4){
    if (!global.dead){
        counter ++;
        if (counter &gt;= 1){
            with (objFinalRNGDie){
                instance_destroy();
            }
            attack = -1;
            if (bbox_bottom &lt;= -48){
                instance_destroy();
            }
        }
    }
}

if (attack == 2){
    hoverCounter ++;
    y = yBase + 20*sin(hoverCounter * 2*pi/80);
}

if (!instance_exists(nametag) &amp;&amp; (attack &gt; 1 || counter &gt;= 70)){
    nametag = scrFinalBossNametag(xprevious, yprevious-56, 8);
    nametag.fadeInAmt = 0.06;
}

backGlowAng += pi/40;
backGlow = (sin(backGlowAng)/2 + 0.5);
if (attack &gt;= 0 &amp;&amp; backScaleMult &lt; 1){
    backScaleMult = min(backScaleMult+0.025, 1);
}
if (cautionSignCounter &gt;= 0 &amp;&amp; attack == 1){
    cautionSignCounter ++;
    
    if (cautionSignCounter mod 2 == 1){
        initialSlamLaserIndAlphaMult = random_range(0.75, 1); //multiplier
    }
    if (cautionSignCounter &lt;= 7*5 &amp;&amp; cautionSignCounter mod 7 == 0){
        audio_sound_pitch(audio_play_sound(sndMakerExclamation, 0, 0), random_range(1.25, 1.35));
    }
}

image_index = (floor(animFrame) mod (image_number/4)) + ((image_number/4) * floor(global.count/5));
if (initialSlamLaserScale &gt; 0){
    var _col = collision_rectangle(x-25*initialSlamLaserScale, 0, x+25*initialSlamLaserScale, 608, objFinalP3Player, true, true);
    if (_col != noone){
        with (_col){
            event_user(0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFinalP3Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other){
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw slam laser
if (initialSlamLaserScale &gt; 0){
    draw_sprite_ext(sprFinalTralexLaser, 0, cautionSignX, 0, bbox_bottom/32, initialSlamLaserScale, 270, c_white, 1);
}else if (attack == 1 &amp;&amp; cautionSignCounter &gt; 0){
    draw_set_color(c_white);
    
    var _progress = sin(min(cautionSignCounter / 105, 1) * pi/2); //cautionSignCounter maxes at 110 when I wrote this comment
    var _alpha = min(cautionSignCounter/40, 1);
    
    //very transparent; constant size
    draw_set_alpha(0.2 * _alpha * initialSlamLaserIndAlphaMult);
    draw_rectangle(cautionSignX + lerp(-96, 0, _progress) - 48, 0, cautionSignX + lerp(-96, 0, _progress) + 48, 480, false);
    draw_rectangle(cautionSignX + lerp(+96, 0, _progress) - 48, 0, cautionSignX + lerp(+96, 0, _progress) + 48, 480, false);
    
    //moderately transparent; increasing size
    draw_set_alpha(0.5 * _alpha * initialSlamLaserIndAlphaMult);
    draw_rectangle(cautionSignX + lerp(-96, 0, _progress) - lerp(0, 48, _progress), 0, cautionSignX + lerp(-96, 0, _progress) + lerp(0, 48, _progress), 480, false);
    draw_rectangle(cautionSignX + lerp(+96, 0, _progress) - lerp(0, 48, _progress), 0, cautionSignX + lerp(+96, 0, _progress) + lerp(0, 48, _progress), 480, false);
    
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
    
if (surface_exists(glowSurf))
    surface_free(glowSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i=0; i&lt;6 &amp;&amp; cautionSignCounter &gt; 7*i; i++){
    if (cautionSignCounter - 7*i &lt; 20){
        draw_sprite_ext(sprUndertaleDangerTriangle, max(((global.count mod 78)*14/50 - 47), 0), cautionSignX, 59 + 80*i, max(3 - 2*(cautionSignCounter-7*i)/20, 1), max(3 - 2*(cautionSignCounter-7*i)/20, 1), 0, c_white, min((cautionSignCounter-7*i)/20, 1));
    }else if (cautionSignCounter - 7*i &lt; 38){
        draw_sprite_ext(sprUndertaleDangerTriangle, max(((global.count mod 78)*14/50 - 47), 0), cautionSignX, 59 + 80*i, 1, 1, 0, c_white, 1);
    }else if (cautionSignCounter - 7*i &lt; 78){
        draw_sprite_ext(sprUndertaleDangerTriangle, max(((global.count mod 78)*14/50 - 47), 0), cautionSignX, 59 + 80*i, 1, 1, 0, c_white, 1 - ((cautionSignCounter - 7*i) - 38)/40);
    }
}

if (moveTrailVal[4] &gt; 0){
    for (var i=0; i&lt;9; i++){
        draw_sprite_ext(sprite_index, image_index, lerp(moveTrailVal[0], moveTrailVal[2], i/9), lerp(moveTrailVal[1], moveTrailVal[3], i/9), image_xscale, image_yscale, image_angle, c_red, moveTrailVal[4] * 0.5);
    }
}

if (!surface_exists(surf))
    surf = surface_create(160, 256);

if (surface_exists(surf)){
    surface_set_target(surf);
    draw_clear_alpha(c_black, 0);
    draw_sprite_ext(sprite_index, image_index, 80, 128, 1, 1, image_angle, image_blend, 1);
    surface_reset_target();
    
    if (surface_exists(surf)){
        draw_surface_ext(surf, x-80*image_xscale, y-128*image_yscale, image_xscale, image_yscale, 0, c_white, 1);
    }
}

if (global.finalGlowEnabled &amp;&amp; global.extraEffects){
    if (glowAlpha &gt; 0){ //no point drawing something at an alpha of 0
        if (!surface_exists(glowSurf))
            glowSurf = surface_create(160, 256);
        
        if (surface_exists(glowSurf)){
            surface_set_target(glowSurf);
            draw_clear_alpha(c_black, 0);
            draw_sprite_ext(sprite_index, image_index, 80, 128, image_xscale, image_yscale, image_angle, image_blend, 1);
            surface_reset_target();
            
            if (surface_exists(glowSurf)){
                shader_set(shdFinalWhite);
                shader_set_uniform_f(global.finalGlowHandle, 160, 256, 10, glowAlpha*image_alpha);
                draw_surface(glowSurf, x-80, y-128);
                shader_reset();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
