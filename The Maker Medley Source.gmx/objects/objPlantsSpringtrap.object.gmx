<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlantsSpring2</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objPlantsPlant</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wall-Nut
event_inherited();
springAnim = false;
springTimer = 12;
growingTimer = -12;

//scale oscillation
animTime = pi * 5/4;
stretchXFluct = 0.105;
stretchYFluct = 0.12;
stretchX = 1 + stretchXFluct * (cos(animTime)/2 + 0.5);
stretchY = 1 + stretchYFluct * (sin(animTime)/2 + 0.5);

bounces = 3;
hp = 2*bounces;
bouncesShown = 0;
surf = noone;
sprite_index = sprPlantsSpring2;
image_speed = 0;

alarm[0] = 1;
arrowFlicker = false;  // used when non-integer number of bounces

scrPlantsGoreInit(3);
snd = audio_play_sound(sndMakerSampleSpring, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage flickering
arrowFlicker = !arrowFlicker;
alarm[0] = irandom_range(3, 5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    if (!dead){
        if (growing){
            growingTimer ++;
            if (growingTimer &gt;= 63){
                growing = false;
            }
        }
        var _springAnimSpd = 1/4;
        if (!growing || (growingTimer - 12) &gt; 14){
            //test for collisions
            if (!springAnim){
                if (image_index &gt; 0){
                    image_index -= _springAnimSpd;
                    if (image_index &lt; 1){
                        image_index = 0;
                    }
                }
                
                if (image_index &lt; 1){
                    if (place_meeting(x, y, objPlantsEnemy) || place_meeting(x, y, objPlantsEnemyBullet)){
                        var _stren = 0;
                        var _rightX = x + 16;
                        with (objPlantsEnemy){
                            if (row == other.row &amp;&amp; !dead &amp;&amp; scrPlantsEnemyPushable(id) &amp;&amp; xprevious &gt;= other.x &amp;&amp; (bbox_left+hspeed) &lt; _rightX){
                                other.springAnim = true;
                                break;
                            }
                        }
                        if (!springAnim){
                            with (objPlantsEnemyBullet){
                                if (row == other.row &amp;&amp; !collided &amp;&amp; xprevious &gt;= other.x &amp;&amp; (bbox_left+hspeed) &lt; _rightX){
                                    other.springAnim = true;
                                    break;
                                }
                            }
                        }
                        if (springAnim){
                            springTimer = 0;
                            bounces --;
                            hp = 2*bounces;
                            if (bounces &lt;= 0){
                                inheritGore = false;
                                event_user(2);
                                inheritGore = true;
                                
                                var _snd = audio_play_sound(sndMakerSampleGlass, 0, 0);
                                audio_sound_pitch(_snd, PITCH_FLUCT);
                            }else{
                                bouncesShown = min(bounces, bouncesShown);
                            }
                            var _snd = audio_play_sound(sndMakerSpring, 0, 0);
                        }
                    }
                }
            }
            if (springAnim){
                springTimer ++;
                if (image_index+_springAnimSpd &gt;= sprite_get_number(sprPlantsSpring2)){
                    springAnim = false;
                }else{
                    image_index = 1 + (springTimer-1)*_springAnimSpd;
                }
                
                var _stren = 0, _rightX = x+16;
                if (floor(image_index) == 1){
                    _stren = 16;
                    _rightX = x+32;
                }else if (floor(image_index) == 2){
                    _stren = 10;
                    _rightX = x+42;
                }else if (floor(image_index) == 3){
                    _stren = 6;
                    _rightX = x+48;
                }
                with (objPlantsEnemy){
                    if (row == other.row &amp;&amp; scrPlantsEnemyPushable(id) &amp;&amp; xprevious &gt;= other.x &amp;&amp; (bbox_left+hspeed) &lt; _rightX &amp;&amp; place_meeting(x+hspeed, y+vspeed, other)){
                        x -= (bbox_left - _rightX);
                        pushAmt = _stren*pushWeightMult;
                    }
                }
                
                with (objPlantsEnemyBullet){
                    if (row == other.row &amp;&amp; !collided &amp;&amp; xprevious &gt;= other.bbox_right - 12 &amp;&amp; place_meeting(x+hspeed, y+vspeed, other)){
                        x -= (bbox_left - _rightX);
                        hspeed = _stren - min(abs(hspeed), _stren/2);
                        vspeed = -abs(vspeed);
                        gravity = 0.125;
                        collided = true;
                    }
                }
            }
        }
        if (!growing &amp;&amp; bouncesShown &lt; bounces){
            bouncesShown = min(bouncesShown + 1/8, bounces);
        }
    }else if (growing &amp;&amp; crushed){
        if (growingTimer &gt; 48){
            growingTimer = 48 - (growingTimer - 48);
        }
        
        if (growingTimer &gt; 10){
            growingTimer = max(growingTimer-10, 16);
        }else if (growingTimer &gt; 0){
            growingTimer --;
        }
    }else if (growing &amp;&amp; growingTimer &lt; 60){
        if (growingTimer &gt;= 50){
            growingTimer ++;
        }else{
            growingTimer = min(growingTimer-1, 12);
        }
    }
    
    //if (!growing){
        animTime += (pi/96) * animMult;
        stretchX = 1 + stretchXFluct * (cos(animTime)/2 + 0.5);
        stretchY = 1 + stretchYFluct * (sin(animTime)/2 + 0.5);
    //}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw hole
if (growingTimer &lt; 47){
    var _scale;
    if (growingTimer &lt;= 37){
        _scale = clamp((growingTimer+12)/12, 0, 1);
    }else{
        _scale = 1 - (growingTimer-37)/10;
    }
    draw_sprite_ext(sprPlantsHole, 0, x, y+26, _scale*3/4, _scale*3/4, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw shadow
if (deathShadowMult &gt; 0){
    if (growingTimer &gt; 37){
        var _shadowMult = deathShadowMult;
        
        //shadow
        if (growing){
            var _height = ((32+8.54) - (30 * sin((growingTimer-13) * (pi/70))))/40.54;
            _shadowMult *= 1 + 0.3*_height;
        }
        
        var _shadowDim = scrPlantsShadow(32, 32, _shadowMult);
        draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, y+26, _shadowDim[0], _shadowDim[1], 0, c_white, 1 - 2*(_shadowMult-1));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Break into pieces
var _y = 32 - 30 * sin((growingTimer-13) * (pi/70));
if (!growing || _y &lt; 48){
    for(var i=0; i&lt;goreAmt; i++){
        gore[i] = instance_create(x, y, objPlantsParts);
        gore[i].image_xscale = stretchX;
        gore[i].image_yscale = stretchY;
        gore[i].y += _y;
    }
    gore[0].sprite_index = sprPlantsSpringShards;
    gore[0].image_index = 0;
    gore[1].sprite_index = sprPlantsSpringShards;
    gore[1].image_index = 1;
    gore[2].sprite_index = sprPlantsSpring2;
    
    if (springAnim){
        gore[2].image_speed = 1/4;
        gore[2].image_index = 1;
        gore[2].angIncMag /= 5;
        if (springTimer &lt; 4){
            gore[2].hspeed = 7.5;
        }else{
            gore[2].hspeed = 2.25;
        }
    }
    
    if (growing){
        if (growingTimer &lt; 48 &amp;&amp; _y &lt; 48 &amp;&amp; _y &gt; 16){
            if (floor(_y-16) &gt; 12){
                with (gore[0]){
                    growing = true;
                    val1 = 34 - floor(_y-16);
                    //scrAdjustForOrigin(0, 0, 10, val1/2, image_angle, 2, 2);
                }
            }
            if (floor(_y-16) &lt; 18){
                with (gore[1]){
                    growing = true;
                    //scrAdjustForOrigin(0, 0, 10, val1/2, image_angle, 2, 2);
                    val1 = 18 - floor(_y-16);
                }
            }else{
                instance_destroy(gore[1]);
            }
            with (gore[2]){
                growing = true;
                val1 = 32 - (_y-16);
                //scrAdjustForOrigin(0, 0, -5, 16, image_angle, image_xscale, image_yscale);
            }
        }
    }
    
    //adjust gore position
    //sprPlantsSpring
    with (gore[0]){
        var _yOrigTo;
        if (growing){
            _yOrigTo = (val1/2);
        }else{
            _yOrigTo = 11;
        }
        
        var _rotCoords = scrChangeOrigin(10, _yOrigTo, 16, 18, image_angle, image_xscale, image_yscale);
        x += _rotCoords[0];
        y += _rotCoords[1];
    }
    with (gore[1]){
        var _yOrigTo;
        if (growing){
            _yOrigTo = (val1/2);
        }else{
            _yOrigTo = 11;
        }
        
        var _rotCoords = scrChangeOrigin(10, _yOrigTo, 16, 2, image_angle, image_xscale, image_yscale);
        x += _rotCoords[0];
        y += _rotCoords[1];
    }
    
    with (gore[2]){
        var _sprWidth = 43 * floor(image_index+1)/4;
        var _xOrigCur = -5;
        var _yOrigTo;
        
        if (growing){
            _yOrigTo = (val1/2);
        }else{
            _yOrigTo = 16;
        }
        
        scrAdjustForOrigin(_xOrigCur, 16, (_sprWidth/2), _yOrigTo, image_angle, image_xscale, image_yscale);
    }
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage
// Since this is a limited-use plant, bounces are subtracted when hit, and the HP is determined based on that value
bounces -= 0.5;
hp = 2*bounces;
bouncesShown = min(bounces, bouncesShown);

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw plant
if (!dead || crushed){
    var subimg;
    subimg = 2*min(bounces, bouncesShown);
    if (bouncesShown == bounces &amp;&amp; bounces != floor(bounces)){  // bounces is not an integer  =&gt;  spring has a "partial" bounce because it was damaged by a spike
        // flickering light = one hit from "losing" the bounce
        if (!arrowFlicker){
            subimg ++;
        }
    }
    
    if (growing){
        if (instance_exists(objPlantsCtrl)){
            var _dim = objPlantsCtrl.smallSurfDim;
            if (!surface_exists(objPlantsCtrl.smallSurf)){
                objPlantsCtrl.smallSurf = surface_create(_dim, _dim);
            }
            if (surface_exists(objPlantsCtrl.smallSurf)){
                surface_set_target(objPlantsCtrl.smallSurf);
                draw_clear_alpha(c_black, 0);
                
                var _y = 32 - 30 * sin((growingTimer-13) * (pi/70));
                draw_sprite_ext(sprPlantsSpring, subimg, 32, 32+_y, stretchX, stretchY, 0, c_white, 1);
                draw_sprite_ext(sprPlantsSpring2, image_index, 32, 32+_y, stretchX, stretchY, 0, c_white, 1);
                draw_set_blend_mode(bm_subtract);
                draw_sprite_ext(sprPlantsHoleMask, 0, 32 - (x - xstart), (32 + 26), 0.75, 0.75, 0, c_white, 1);
                draw_set_blend_mode(bm_normal);
                surface_reset_target();
                
                if (surface_exists(objPlantsCtrl.smallSurf)){
                    draw_surface_part(objPlantsCtrl.smallSurf, 0, 0, 96, 64, x-32, y-32);
                }
            }
        }
    }else{
        scrPlantsCrushStart(64, 96);
        //8.54 = 32 - 30*sin(pi * (63-13)/70);
        draw_sprite_ext(sprPlantsSpring, subimg, x, y+8.54, stretchX, stretchY, 0, c_white, 1);
        draw_sprite_ext(sprPlantsSpring2, image_index, x, y+8.54, stretchX, stretchY, 0, c_white, 1);
        scrPlantsCrushEnd(crushTimer);
    }
}else{
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
