<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMrScribbleFacelessUndertale</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objFinalBossScribbleParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialize
event_inherited();
// Overwrite Parent Defaults
currentHPVal = 3;
facelessSprite = sprMrScribbleFacelessUndertale;

//attacks
delayFrames = 0;
counter = 0;
attack = 0;
if (global.practicing &amp;&amp; global.practiceWaypointStart == 6){
    attack = 2;
}

//movement
xCent = 400;
yCent = 160;
hspeed = random_range(3, 5);
vspeed = random_range(2.3, 3.72);
movementTimer = 0;

//music
with (objWorld){
    playIntro = true;
    playMusic = false;
    musicToPlay = global.BGMBoss4Main3;
    alarm[2] = 20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delay before ending Dribix practice mode
scrPracticeEnd();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (delayFrames &gt; 0 &amp;&amp; !global.dead){
    delayFrames --;
}else if (delayFrames &lt;= 0){
    switch(attack){
        case 0:
            if (!(counter+1 == 1 || counter+1 == 60 || ((counter+1) &gt;= 80 &amp;&amp; (counter+1) &lt;= 190 &amp;&amp; (counter+1) mod 8 == 0) || counter+1 == 300) || !global.dead){
                counter ++;
            }
            if (counter == 1){
                hspeed = random_range(3, 5.5);
                vspeed = random_range(3, 5.5);
            }
            if (counter == 60){
                with (objFinalRNGDie){
                    shrink = false;
                    grow = true;
                }
            }else if (counter == 210){
                with (objFinalRNGDie){
                    shrink = true;
                    grow = false;
                }
            }
            
            if (counter == 60){
                for (var i=-2; i&lt;=2; i++;){
                    with (instance_create(400 + 114*i, 320, objMakerDangerTriangle)){
                        sprite_index = sprUndertaleDangerTriangle;
                        
                        image_alpha = 0;
                        alphaIncAmt = 0.1;
                        alphaDecAmt = 0.05;
                        alarm[0] = 20;
                    }
                }
            }
            if (counter &gt;= 80 &amp;&amp; counter &lt;= 190 &amp;&amp; counter mod 8 == 0){
                repeat(2){
                    with (instance_create(400 + irandom_range(-330, 330), 290, objUndertaleProj)){
                        index = 0;
                        direction = 270 + irandom_range(-45, 45);
                        event_user(0);
                    }
                }
                audio_play_sound(sndFinalKirbySlash, 0, 0);
            }
            
            if (counter == 300){
                if (instance_exists(objFinalP3Player)){
                    var _spawnX, _spawnY;
                    if (objFinalP3Player.x &gt; 400){
                        _spawnX = 861;
                    }else{
                        _spawnX = -61;
                    }
                    _spawnY = 224;
                    
                    instance_create(_spawnX, _spawnY, objFinalP3Dribix);
                }
                attack = -1;
                counter = 0;
            }
            break;
        case 1:
            if (!(counter+1 == 95 || counter+1 == 315) || !global.dead){
                counter ++;
            }
            
            if (counter == 60){
                for (var j=-1; j&lt;=1; j++){
                    with (instance_create(59 + 30, 390 + 40*j, objMakerDangerProp)){
                        sprite_index = sprFinalP3DangerL;
                        image_xscale = 1.5;
                        image_yscale = image_xscale;
                        
                        image_alpha = 0;
                        alphaIncAmt = 0.085;
                        alphaDecAmt = 0.05;
                        alarm[0] = 35;
                    }
                    with (instance_create(800 - (59 + 30), 390 + 40*j, objMakerDangerProp)){
                        sprite_index = sprFinalP3DangerR;
                        image_xscale = 1.5;
                        image_yscale = image_xscale;
                        
                        image_alpha = 0;
                        alphaIncAmt = 0.085;
                        alphaDecAmt = 0.05;
                        alarm[0] = 35;
                    }
                }
            }
            
            if (counter == 95){
                var _repeat = 1;
                var _num = 5;
                var _mult = 1;
                var _spd = 4.5;
                if (buff()){
                    //_repeat = 2;
                    //_num = 3;
                    _mult = 0.8;
                    _spd = 4.5;
                }
                
                var _angInc = 360/_num;
                repeat(_repeat){
                    for(var i=0; i&lt;_num; i++;){
                        with (instance_create(-80, 390, objUndertaleProj)){
                            index = 2;
                            rotDir = 135 + _angInc*i;
                            indexBase = 20;
                            centerSpd = _spd;
                            rotDirInc *= _mult;
                            event_user(0);
                        }
                    }
                    for(var i=0; i&lt;_num; i++;){
                        with (instance_create(880, 390, objUndertaleProj)){
                            index = 2;
                            rotDir = 135 + _angInc*i;
                            indexBase = 20;
                            centerSpd = _spd;
                            rotDirInc *= _mult;
                            event_user(0);
                        }
                    }
                    //_mult *= -1;
                }
                audio_play_sound(sndMakerSampleMagic, 0, 0);
            }
            
            if ((!buff() &amp;&amp; counter == 288) || (buff() &amp;&amp; counter == 256)){
                with (objFinalP3Dribix){
                    attack = 1;
                    sndCount = 0;
                    alarm[4] = 1;
                }
                attack = -1;
                counter = 0;
            }
            break;
        case 2:
            if (!global.dead || !(counter+1 == 31 || counter+1 == 61 || counter+1 == 220 || counter+1 == 240 || (((counter+1) - 60) mod 15 == 1 &amp;&amp; (counter+1) &gt; 60 &amp;&amp; (counter+1) &lt;= 121))){
                counter ++;
            }
            if (!global.dead &amp;&amp; counter == 1){
                if (global.practicing &amp;&amp; global.practiceWaypointEnd == 6){
                    alarm[0] = 64;  // delay before ending Dribix practice mode
                    attack = -1;
                }
            }
            if (counter == 31){
                var _inst = instance_create(400, -80, objMakerSpikeUp);
                with (objFinalRNGDie){
                    event_user(0);
                    targetObj = _inst;
                }
                scrFinalUpdateFarthest();
            }
            
            if ((counter-60) mod 15 == 1 &amp;&amp; counter &gt; 60 &amp;&amp; counter &lt;= 121){
                var _num;
                if (buff()){
                    _num = 3;
                }else{
                    _num = 2 + (((counter-60) mod 30) div 15);
                }
                
                repeat(_num){
                    instance_create(irandom_range(64, 736), irandom_range(96, 208), objFinalTralexCane);
                }
            }
            if (counter == 220 &amp;&amp; !global.dead){
                if (instance_exists(objFinalP3Player)){
                    instance_create(objFinalP3Player.x, -74, objFinalTralexBartender);
                }
            }
            if (counter == 240 &amp;&amp; !global.dead){ //"!global.dead" check should be unnecessary
                attack = -1;
                counter = 0;
            }
            break;
        case 3:
            if (!(counter+1 == 40 || counter+1 == 100) || !global.dead){
                counter ++;
            }
            if (counter == 100 &amp;&amp; !global.dead){
                with (objFinalTralexBartender){
                    event_perform(ev_alarm, 0);
                }
            }
            break;
    }
}

if (attack &lt; 4){
    movementTimer ++;
    xCent = 400 + 180*sin(pi * movementTimer/120);
    var _yAmp = 44;
    if (instance_exists(objFinalTralexBartender) &amp;&amp; objFinalTralexBartender.attack == 2){
        // allows the player to hit the boss while the player is are trapped between the lasers
        if (instance_exists(objFinalTralexBartender)){
            xCent = lerp(xCent, objFinalTralexBartender.x, 0.5);
        }
    }else{
        if (instance_exists(objFinalP3Player)){
            xCent = lerp(xCent, objFinalP3Player.x, 0.20);
        }
    }
    var _yHover = _yAmp * sin(pi * movementTimer/37.4);
    var _ySign = sign(_yHover);
    if (_ySign == 0){
        _ySign = 1;
    }
    yCent = 192 + max(abs(_yHover), _yAmp/3) * _ySign;
    
    var _reverseAmt = 0.04;
    var _accelAmt = 0.055;
    var _limitDist = 44;
    var _limitCorrection = 0.22;
    var _glideDist = 12;
    
    var _xDisplace = (x - xCent);
    var _hMoveDir = sign(hspeed);
    var _hMoveMag = abs(hspeed);
    var _xSide = sign(_xDisplace);
    var _xDist = abs(_xDisplace);
    
    
    if (_xDist &gt; _limitDist){  // prevent moving too far away from target
        hspeed += _limitCorrection * (-_xSide);
    }else if (_xDist &gt; _glideDist){
        if (_xSide == _hMoveDir &amp;&amp; abs(_xDist) &gt;= (10 - abs(hspeed))){  // moving away from target
            hspeed += _reverseAmt * (-_xSide);
        }else{  // moving towards target
            hspeed += _accelAmt * (-_xSide);
        }
    }
    
    var _yDisplace = (y - yCent);
    var _vMoveDir = sign(vspeed);
    var _vMoveMag = abs(vspeed);
    var _ySide = sign(_yDisplace);
    var _yDist = abs(_yDisplace);
    
    if (_yDist &gt; _limitDist){  // prevent moving too far away from target
        vspeed += _limitCorrection * (-_ySide);
    }else if (_yDist &gt; _glideDist){
        if (_ySide == _vMoveDir &amp;&amp; abs(_yDist) &gt;= (10 - abs(vspeed))){  // moving away from target
            vspeed += _reverseAmt * (-_ySide);
        }else{  // moving towards target
            vspeed += _accelAmt * (-_ySide);
        }
    }
    
    // don't move too close to player
    if (abs(vspeed) &gt; 4){
        vspeed = 4*sign(vspeed);
    }
    
    // cap speed
    var _spdCap = 8;
    if (speed &gt;= _spdCap){
        speed = _spdCap;
    }
}else if (attack == 4){
    if (hspeed == 0){
        hspeed = -1;
    }else if (abs(hspeed) &lt; 1){
        hspeed = sign(hspeed);
    }else{
        hspeed += 0.1*sign(hspeed);
    }
    vspeed = max(vspeed - 0.2);
    if (bbox_bottom+vspeed &lt; -24){
        attack = 5;
        counter ++;
    }
}else if (attack == 5){
    counter ++;
    if (counter &gt; trailPieces){ //trail shouldn't be visible
        instance_destroy();
    }
}

// manage visual effects  +  iframe generousity
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_blend == c_white){
    if (bbox_bottom &gt; 0 &amp;&amp; image_alpha &gt;= 1){
        if (iframes &gt; 0){
            if (iframes &lt;= iframesWhenHit/3){
                storedHit = true;
            }
        }else{
            scrFinalScribbleDamage();
        }
    }
    with (other){
        x = xprevious;
        y = yprevious;
        scrMoveContactObject(sign(hspeed), 0, abs(hspeed), other);
        scrMoveContactObject(0, sign(vspeed), abs(vspeed), other);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
