<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSign</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-199</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xoff = 0;
yoff = 0;
floorYOff = 0;
floorNum = 0;
rise = false; //Flappy
risen = false; //Flappy
text = "";
textDelay = 1;
textLength = 0;
textTimer = 0; //affects sound as well
textPosition = 0;
subMessage = 0; //-1 = stop typing
image_alpha = 0;
roomStart = room;
event_perform(ev_other, ev_room_start); //set floor number
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change text
//Period/Exclamation = 32 frames
//Question mark = 48 frames
//Comma = 20 frames
if (textDelay == 0){ //skip over the space which follows the punctuation mark
    textPosition ++;
}
switch(room){
    case rStage1to2Transition:
        if (textDelay == 0){
            switch(subMessage){
                case 0.3:
                    text += "#You probably weren't expecting to see#NANG commentary in a game named after I Wanna Maker,";
                    textPosition ++;
                    break;
                case 0.6:
                    text += "#but that's how we do things around here.";
                    textPosition ++;
                    break;
                case 1:
                    text = "Unfortunately, you don't get any TNT.";
                    textPosition = 0;
                    break;
                case 1.3:
                    text += " Sorry.";
                    break;
                case 1.6:
                    text += "#You will actually have to play each stage.";
                    break;
                case 2:
                    text = "It seems that the elevator is ready now.";
                    textPosition = 0;
                    break;
                case 2.5:
                    text += "#You're free to go!";
                    break;
            }
            textLength = string_length(text);   
            textDelay = 1;
        }else{
            switch(subMessage){
                case 0:
                    alarm[1] = 38;
                    subMessage = 0.3;
                    break;
                case 0.3:
                    alarm[1] = 32;
                    subMessage = 0.6;
                    break;
                case 0.6:
                    alarm[1] = 55;
                    subMessage = 1;
                    break;
                case 1:
                    alarm[1] = 48;
                    subMessage = 1.3;
                    break;
                case 1.3:
                    alarm[1] = 28;
                    subMessage = 1.6;
                    break;
                case 1.6:
                    subMessage = -1;
                    with (objS2IntroCtrl)
                        alarm[0] = 60;
                    break;
                case 2:
                    alarm[1] = 40;
                    subMessage = 2.5;
                    break;
                case 2.5:
                    with (objS2IntroCtrl){
                        waiting = true;
                    }
                    subMessage = -1;
                    break;
            }
            textDelay = 0;
        }
    break;
    case rStage02Klamy:
        if (textDelay != 0){
            textDelay = 0;
            textPosition ++;
            alarm[1] = 20;
        }else{
            textDelay = 1;
            text += " Pressing Control + Restart will completely#reset the room.";
            textLength = string_length(text);
            subMessage = -1;
        }
    break;
    case rStage02Shark1:
        if (textDelay != 0){
            textDelay = 0;
            textPosition ++;
            alarm[1] = 32;
        }else{
            textDelay = 1;
            text += " Now they label them the second most hated element of fangames in Fangame Feud.";
            textLength = string_length(text);
            subMessage = -1;
        }
    break;
    case rStage02Shark2:
        if (textDelay != 0){
            textDelay = 0;
            textPosition ++;
            alarm[1] = 40;
        }else{
            textDelay = 1;
            text += "#WHAT WAS HE THINKING!?";
            textLength = string_length(text);
            subMessage = -1;
        }
    break;
    case rStage02Erik:
        if (textDelay != 0){
            textDelay = 0;
            textPosition ++;
            alarm[1] = 20;
        }else{
            text += " but I think you can handle it."
            textLength = string_length(text);
            subMessage = -1;
            textDelay = 1;
        }
    break;
    case rStage02Abstr4ktNew:
        if (textDelay == 0){
            textDelay = 1;
            switch(floor(subMessage)){
                case 0:
                    if (subMessage == 0.0 || subMessage == 0.6){
                        text += "#";
                    }else{
                        text += " ";
                    }
                    textPosition += 1;
                    
                    if (subMessage == 0.6 || subMessage == 0.7){
                        if (subMessage == 0.6){
                            text += "Jump";
                        }else{
                            text += "Jump.";
                        }
                        //textDelay = 0.75;
                    }else if ((floor(subMessage * 10) mod 2) == 0){
                        text += "Up.";
                        //textDelay = 0.3;
                    }else{
                        text += "Down.";
                        //textDelay = 0.5;
                    }
                    
                    if (subMessage &lt; 0.7){
                        subMessage += 0.1;
                    }else{
                        subMessage = -1;
                    }
                break;
                //Hard path commentary (Suggestion by Essisten)
                
                //Player succeeds
                case 2:
                    text += " I'm impressed."
                break;
                case 3:
                    text += "#I really didn't think you would make it."
                    subMessage = -2;
                break;
                
                //Player dies
                case 5:
                    text += " there's a much easier way to get to that spot."
                    subMessage = -2;
                break;
            }
            textLength = string_length(text);
        }else{
            switch(subMessage){
                case 0:
                    alarm[1] = 54;
                break;
                case 0.1: // Up 1
                case 0.2:  // Down 1
                case 0.3: // Up 2
                case 0.4: // Down 2
                case 0.5: // Up 3
                    alarm[1] = 24;
                break;
                case 0.6: // Down 3
                    alarm[1] = 40;
                break;
                case 0.7: // Jump
                case 0.8: // Jump
                    alarm[1] = 14;
                break;
                case 1:
                    alarm[1] = 20;
                    subMessage = 2;
                break;
                case 2:
                    alarm[1] = 40;
                    subMessage = 3;
                break;
                case 4:
                    alarm[1] = 20;
                    subMessage = 5;
                break;
            }
            textDelay = 0;
            textPosition ++;
        }
    break;
    case rStage02Vovka:
        if (textDelay != 1){
            textDelay = 1;
            switch(subMessage){
                case 0:
                    text += "#Try holding Jump to slow your movement.";
                    textLength = string_length(text);
                    subMessage = -1;
                    break;
            }
        }else{
            switch(subMessage){
                case 0:
                    alarm[1] = 40;
                break;
            }
            textDelay = 0;
            textPosition ++;
        }
    break;
    case rStage02Telejump: //doesn't follow the punctuation rules I wrote because I don't want it to :)
        if (textDelay != 0){
            textDelay = 0;
            textPosition ++;
            alarm[1] = 44;
        }else{
            textDelay = 1;
            text += "#You're welcome.";
            textLength = string_length(text);
            subMessage = -1;
        }
    break;
    case rStage02Flappy:
        if (textDelay != 1){
            textDelay = 1;
            switch(subMessage){
                case 0:
                    text += " so I'll be going now.";
                    textLength = string_length(text);
                    subMessage = 0.5;
                break;
                case 0.5:
                    text = "k bye";
                    textLength = string_length(text);
                    rise = true;
                    textPosition = 0;
                    subMessage = -1;
                break;
            }
        }else{
            switch(subMessage){
                case 0:
                    alarm[1] = 20;
                break;
                case 0.5:
                    alarm[1] = 60;
                break;
            }
            textDelay = 0;
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Message
switch(room){
    case rStage1to2Transition:
        text = "";
        subMessage = -1;
        break;
    case rStage02Shark1:
        text = "So it begins.";
        subMessage = -1;
        break;
    case rStage02Shark2:
        text = "AIDS Needle in a beginner game!?";
        break;
    case rStage02Erik:
        text = "This room is a little long,";
        break;
    case rStage02Klamy:
        text = "Remember:";
        break;
    case rStage02Abstr4ktNew:
        text = "Here's a hint:";
        break;
    case rStage02Vovka:
        text = "Having trouble maneuvering between the spikes?";
        break;
    case rStage02Telejump:
        text = "I lowered the gravity in this room to make it easier for you.";
        break;
    case rStage02Flappy:
        text = "You'll need to focus in this room,";
        break;
}

textPosition = 0;
textTimer = 0;
textLength = string_length(text);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (textPosition &lt; textLength &amp;&amp; textDelay != 0){
    textTimer ++;
    if ((textTimer mod textDelay) == 0){
        textPosition ++;
        if (textPosition &gt;= textLength){
            audio_play_sound(sndS2NANGText, 0, 0);
            textPosition = textLength;
            if (subMessage &gt;= 0){
                alarm[1] = 1;
            }
        }
    }
    if (!(room == rStage02Abstr4ktNew &amp;&amp; floor(subMessage) == 0 &amp;&amp; subMessage != 0.0)){
        if (textTimer mod (textDelay*3) == 0 &amp;&amp; textPosition != textLength){
            audio_play_sound(sndS2NANGText, 0, 0);
        }
    }
}

if (!rise){
    if (instance_exists(objPlayer) &amp;&amp; objPlayer.y &lt; (view_yview + 216) &amp;&amp; !(room == rStage1to2Transition || room == rStage02Shark1 || room == rStage02Shark2 || room == rStage02Vovka || room == rStage02Telejump || room == rStage02Flappy)){
        if (yoff &gt; -100){
            yoff -= 2;
            if (yoff &lt; -100){
                yoff = -100;
            }
        }
    }else{
        yoff += 2;
        if (yoff &gt; 0){
            yoff = 0;
        }
    }
}else if (!risen){
    if (yoff &gt; -105){
        yoff -= 1.5;
    }else{
        risen = true;
    }
}
if (floorYOff &lt; 0){ //only for when the Ctrl object is created in rStage02Shark1
    floorYOff += 2;
    if (floorYOff &gt; 0)
        floorYOff = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != roomStart){
    instance_destroy();
}else{
    switch(room){
        case rStage02Shark1:
            floorNum = 1;
            break;
        case rStage02Shark2:
            floorNum = 2;
            break;
        case rStage02Erik:
            floorNum = 3;
            break;
        case rStage02Klamy:
            floorNum = 4;
            break;
        case rStage02Abstr4ktNew:
            floorNum = 5;
            // reset after hard route commentary
            if (subMessage == -2 || subMessage &gt;= 1 || global.roomSaveTo == 3){
                text = "";
                subMessage = 0;
                event_perform(ev_alarm, 0); //"I imagine a TAS..."
                textDelay = 0;
                while (subMessage != -1){
                    event_perform(ev_alarm, 1);
                    textDelay = 0;
                    textPosition = textLength;
                }
                alarm[0] = -1;
                alarm[1] = -1;
            }
            break;
        case rStage02Vovka:
            floorNum = 6;
            break;
        case rStage02Telejump:
            floorNum = 7;
            break;
        case rStage02Flappy:
            floorNum = 8;
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.screenshotMode){exit;}


var _xoff, _yoff;
if (instance_exists(objMakerTeleTransition)){
    _xoff = 0;
    _yoff = 0;
}else{
    _xoff = view_xview;
    _yoff = view_yview;
}

if (!risen){
    draw_set_color(c_black);
    draw_rectangle(_xoff+144, yoff + 8, _xoff+656, 96 + yoff, false);
    draw_set_color(c_ltgray);
    draw_line_width(_xoff+144, yoff + 8, _xoff+656, yoff + 8, 3); //top
    draw_line_width(_xoff+144, yoff + 6, _xoff+144, yoff + 97, 3); //left
    draw_line_width(_xoff+144, yoff + 96, _xoff+656, yoff + 96, 3); //bottom
    draw_line_width(_xoff+656, yoff + 6, _xoff+656, yoff + 97, 3); //right
    draw_set_color(c_white);
    draw_set_font(fDefault12);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    t_str = string_copy(text, 0, textPosition);
    draw_text_ext(_xoff+156, yoff + 16, t_str, 18, 488);
}

//Floor sign
draw_set_font(fDefault18);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text_outline(_xoff+65, _yoff + floorYOff + 35, string("Floor"), 4, c_black, 24);
draw_text_outline(_xoff+65, _yoff + floorYOff + 80, string(floorNum), 4, c_black, 24);

//Transition-specific
if (room == rStage1to2Transition){
    draw_set_font(fDefault18);
    draw_line_width(368, 128, 432, 128, 2); //top
    draw_line_width(368, 127, 368, 193, 2); //left
    draw_line_width(368, 192, 432, 192, 2); //bottom
    draw_line_width(432, 127, 432, 193, 2); //right
    draw_text(400, 160, "2");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
