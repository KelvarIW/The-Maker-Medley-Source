<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerFruit</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-8</depth>
  <persistent>0</persistent>
  <parentName>objMakerFruit</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
index = -1;
sineAng = 0;
shootCounter = 0;
initialized = false;

//index 0
curve = false;
curve_dev = 0;

//index 2 + 4
rad = 0;
dir = 0;
dir_inc = 0;

//index 3
moveTime = 0;
moveCounter = 0;

//index 4
radMin = 0;
radMax = 0;
radChange = 0;
radShouldIncrease = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bounce off top of screen
if (index == 0 || index == 0.1){
    if (vspeed &lt; 0 &amp;&amp; bbox_top &lt; view_yview){
        var _excess = view_yview - bbox_top;
        y += _excess * 2;  // the first brings the top of the fruit to the view_yview, the second accounts for the "overflow"
        vspeed = abs(vspeed);
    }
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
switch(floor(index)){
    case 2:
        if (global.deathSlow &gt; 0){
            if (image_alpha &lt; 1)
                image_alpha = min(image_alpha + 0.02, 1);
            dir += dir_inc * global.deathSlow;
            x = xstart + lengthdir_x(rad, dir);
            y = ystart + lengthdir_y(rad, dir);
        }
        break;
    case 3:
        if (global.deathSlow &gt; 0){
            if (index == 3.0 || index == 3.2){
                if (moveCounter &lt; moveTime){
                    moveCounter += global.deathSlow;
                }
                rad = lerp(0, radMax, sin(moveCounter/moveTime * pi/2));
                x = xstart + lengthdir_x(rad, direction);
                y = ystart + lengthdir_y(rad, direction);
            }
        }
        break;
    case 4:
        if (global.deathSlow &gt; 0){
            dir += dir_inc*global.deathSlow;
            x = xstart + lengthdir_x(rad, dir);
            y = ystart + lengthdir_y(rad, dir);
            
            if (radShouldIncrease){
                rad = min(rad + radChange*global.deathSlow, radMax);
                if (rad &gt;= radMax){
                    rad = radMax;
                    radShouldIncrease = false;
                }
            }else{
                rad = max(rad - radChange*global.deathSlow, radMin);
                if (rad &lt;= radMin){
                    rad = radMin;
                    radShouldIncrease = true;
                }
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization
if (!initialized){
    switch(floor(index)){
        case 0:
            if (index &lt;= 0.1){
                //image_alpha = 0.5;
                speed = 6; //random_range(5, 7);
                image_index = irandom_range(0, 6)*2;
            }
            break;
        case 2:
            rad = point_distance(xstart, ystart, x, y);
            dir = point_direction(xstart, ystart, x, y);
            image_alpha = 0;
            break;
        case 4:
            rad = radMax;
            dir = point_direction(xstart, ystart, x, y);
            dir_inc = -1;
            
            //radMin = 30;
            //radMax = point_distance(xstart, ystart, x, y);
            radChange = 3;
            radShouldIncrease = false;
            break;
        case 5:
            dir_inc = -1;
            depth += 1;
            speed = 5;
            image_xscale = 0.7;
            image_yscale = 0.7;
            indexBase = 6;
            break;
    }
    
    if (indexBase &gt;= 0){
        image_index = indexBase + (global.count mod 30)/15;
    }
    
    if (global.dead){
        friction = max(abs(speed)/40, friction);
        speed *= global.deathSlow;
        gravity = 0;
    }
    initialized = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
