<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlantsEnHats</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
hatTexture = -1;
surf = -4;
updateSurf = true;
durability = 8;
glowFrame = 0;
glowLen = 20;
attached = noone;
image_xscale = 0;
image_yscale = 0;
scaleTo = 1.75;
frozen = false;
image_alpha = 0.6;

//scale of shadow sprite
automaticShadow = true;
shadowXScale = 1;
shadowYScale = 1;
//sprite dimensions used to calculate shadow scale
automaticShadowInputs = true;
shadowInputWidth = sprite_width;
shadowInputHeight = sprite_height;

//relevant when dropped
fallen = false;
angInc = random_range(-2.3, -0.8);
yBase = y + irandom_range(12, 18);

dentPoints = 16;
for(var i=(dentPoints-1);i&gt;=0;i--)
    dmgOffset[i] = 0;
dmgOffsetOffset = irandom(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    if (image_xscale &lt; scaleTo){
        image_xscale = min(scaleTo, image_xscale+scaleTo/10);
        image_yscale = image_xscale;
    }
    if (glowFrame &gt; 0){
        glowFrame --;
    }
    
    if (fallen){
        if (gravity != 0){
            if (y &gt;= yBase){
                y = yBase;
                gravity = 0;
                vspeed = 0;
            }else if (y &gt; 616){
                instance_destroy();
            }
        }else{
            if (angInc &lt; 0){
                angInc = min(0, angInc + 0.15);
            }
            if (hspeed &gt; 0){
                hspeed = max(0, hspeed - 0.15);
            }
            image_alpha -= 0.065;
            if (image_alpha &lt;= 0){
                instance_destroy();
            }
        }
        image_angle += angInc;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadow
if (automaticShadow){
    if (automaticShadowInputs){
        shadowInputWidth = sprite_width;
        shadowInputHeight = sprite_height;
    }
    shadowXScale = shadowInputWidth/80;
    shadowYScale = shadowInputHeight/56;
}
if (shadowXScale &gt; 0 &amp;&amp; shadowYScale &gt; 0){
    draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, bbox_bottom - 6, shadowXScale, shadowYScale, image_angle, c_white, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Denting 
var t_damage;
t_damage = irandom_range(1, 5);
while (dmgOffset[(3*(t_damage mod 6) + dmgOffsetOffset) mod dentPoints] != 0 &amp;&amp; t_damage &lt; 10){
    t_damage ++;
}
dmgOffset[(3*(t_damage mod 6) + dmgOffsetOffset) mod dentPoints] = irandom_range(7, 10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hat surface
if (!surface_exists(surf)){
    surf = surface_create(32, 32);
    updateSurf = true;
}

if (updateSurf){
    if (hatTexture == -1){
        hatTexture = sprite_get_texture(sprPlantsEnHats, image_index);
    }
    if (surface_exists(surf)){
        surface_set_target(surf);
        draw_clear_alpha(c_black, 0);
        draw_set_color(c_white);
        
        draw_primitive_begin_texture(pr_trianglefan, hatTexture);
        draw_vertex_texture(16, 16, 0.5, 0.5); //set
        draw_vertex_texture(32 - dmgOffset[0], 32 - dmgOffset[0], 1, 1);
        draw_vertex_texture(32 - dmgOffset[1], 24, 1, 0.75);
        draw_vertex_texture(32 - dmgOffset[2], 16, 1, 0.5);
        draw_vertex_texture(32 - dmgOffset[3], 8, 1, 0.25);
        draw_vertex_texture(32 - dmgOffset[4], dmgOffset[4], 1, 0);
        draw_vertex_texture(24, dmgOffset[5], 0.75, 0);
        draw_vertex_texture(16, dmgOffset[6], 0.5, 0);
        draw_vertex_texture(8, dmgOffset[7], 0.25, 0);
        draw_vertex_texture(dmgOffset[8], dmgOffset[8], 0, 0);
        draw_vertex_texture(dmgOffset[9], 8, 0, 0.25);
        draw_vertex_texture(dmgOffset[10], 16, 0, 0.5);
        draw_vertex_texture(dmgOffset[11], 24, 0, 0.75);
        draw_vertex_texture(dmgOffset[12], 32 - dmgOffset[12], 0, 1);
        draw_vertex_texture(8, 32-dmgOffset[13], 0.25, 1);
        draw_vertex_texture(16, 32-dmgOffset[14], 0.5, 1);
        draw_vertex_texture(24, 32-dmgOffset[15], 0.75, 1);
        draw_vertex_texture(32 - dmgOffset[0], 32 - dmgOffset[0], 1, 1);
        draw_vertex_texture(16, 16, 0.5, 0.5); //set
        draw_primitive_end();
        
        surface_reset_target();
    }
}
if (surface_exists(surf)){
    var _origin = scrChangeOrigin(0, 0, 16, 16, image_angle);
    draw_surface_ext(surf, x + image_xscale*_origin[0], y + image_yscale*_origin[1], image_xscale, image_yscale, image_angle, c_white, image_alpha);
    if (glowFrame &gt; 0){
        draw_set_blend_mode(bm_add);
        draw_surface_ext(surf, x + image_xscale*_origin[0], y + image_yscale*_origin[1], image_xscale, image_yscale, image_angle, c_white, image_alpha*scrPlantsGlow(glowFrame, glowLen));
        draw_set_blend_mode(bm_normal);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
