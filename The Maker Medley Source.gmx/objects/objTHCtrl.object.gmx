<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTHBird</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = 0;
image_yscale = 0;
image_speed = 0.2;
image_index = global.count * 0.2;

createFightIdent = true;
phase = 0;
phaseTimer = -30;
phaseTimerEvent = phaseTimer;
spellcardTimer = 0;
spellcardTimerInit = 0;

//Movement
movementSine = 0;
move = false;

//Avoidance
avoidanceBGM = -1;
createAvoIdent = true;
bgmPitch = 1;
bgmFadeout = false;

//Visual
visualTimer = 0;
skipTextAlpha = 0;  // intro "Press S..."
birdSurf = -4;
//phase 5
lightAlpha = 0;
slowdownYMidline = 368;
slowdownYAmp = 64;
slowdownY = slowdownYMidline - slowdownYAmp;
slowdownHeight = 40;
slowdownYTimer = 0;

displayedTimer = 0;
displayedTimerAlpha = 0;

nameTextSurf = -4;  // boss name and phase counter (stars)
nameTextAlpha = 0;
nameTextStars = 4;
nameTextStarsShown = 0;
nameTextCol1 = make_color_rgb(79, 29, 76);
nameTextCol2 = make_color_rgb(173, 47, 69);

healthbar = noone;

drawXOff = 0;
drawYOff = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(birdSurf))
    surface_free(birdSurf);
if (surface_exists(nameTextSurf))
    surface_free(nameTextSurf);

if (audio_exists(avoidanceBGM))
    audio_stop_sound(avoidanceBGM);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transition to hub
var _roomTransition;
_roomTransition = instance_create(640, 256, objMakerTeleTransition);
_roomTransition.exitIndex = 2;
_roomTransition.camDir = 180;
_roomTransition.roomTo = rStage03Hub; //prevents C1 Biff-like errors if player restarts
_roomTransition.offset = 8; //between this screen and the last one
_roomTransition.sprite = scrGetScreenSprite();
_roomTransition.save = false;
_roomTransition.exitPartColor = make_color_rgb(246, 245, 143);
room_goto(rStage03Hub);
audio_sound_pitch(audio_play_sound(sndMakerTeleportPersist, 0, 0), PITCH_FLUCT);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phase &lt; 9){
    phaseTimer ++;
}
if (!global.dead || phase == 9){
    //-------[PHASE 0]-------
    if (phase == 0){
        if (scrButtonCheckPressed(global.skipButton)){
            instance_destroy(objTHSubtractive);
            instance_destroy(objTHSubtractiveSpawner);
            if (!instance_exists(objTHHealth)){
                healthbar = instance_create(x, y, objTHHealth);
                healthbar.hpBarPercentShown = 1;
                healthbar.hpPercentShown = 1;
            }
            image_xscale = 3;
            image_yscale = 3;
            audio_stop_sound(sndTHMikeAppear);
            if (instance_exists(objWorld)){
                objWorld.playMusic = true;
            }
            phase = 1;
            phaseTimer = 0;
            /*with (instance_create(0, 0, objMakerMessage)){
                if (!global.controllerMode){
                    message = "Press " + scrGetKeybind(global.jumpButton[0], "jump") + " to focus";
                }else{
                    message = "Press " + scrGetControllerBind(global.jumpButton[1], "jump") + " to focus";
                }
            }*/
        }else if (phaseTimer == 1){
            instance_create(144, 420, objTHSubtractiveSpawner);
            (instance_create(464, 420, objTHSubtractiveSpawner)).image_index = 1;
            with (instance_create(224, 560, objTHSubtractiveSpawner)){image_index = 1;path = 1;}
            with (instance_create(384, 560, objTHSubtractiveSpawner)){path = 1;}
            audio_play_sound(sndTHMikeAppear, 0, 0);
        }else if (phaseTimer == 90){
            with (objTHSubtractive)
                speed = 0;
            instance_destroy(objTHSubtractiveSpawner);
        }else if (phaseTimer == 110){
            instance_destroy(objTHSubtractive);
            healthbar = instance_create(x, y, objTHHealth);
        }else if (phaseTimer == 138){
            if (instance_exists(objWorld)){
                objWorld.playMusic = true;
            }
            
            phase = 1;
            phaseTimer = 0;
            /*with (instance_create(0, 0, objMakerMessage)){
                if (!global.controllerMode){
                    message = "Press " + scrGetKeybind(global.jumpButton[0]) + " to focus";
                }else{
                    message = "Press " + scrGetControllerBind(global.jumpButton[1]) + " to focus";
                }
            }*/
        }
        if (phaseTimer &gt;= 90 &amp;&amp; image_xscale &lt; 3){
            image_xscale = min(image_xscale+0.3, 3);
            image_yscale = image_xscale;
        }
    //-------[PHASE 1&amp;3]-------
    }else if (phase == 1 || phase == 3){
        if (phase == 3 &amp;&amp; phaseTimer &gt; -30 &amp;&amp; phaseTimer &lt;= -10){
            y = lerp(ystart, 192, (phaseTimer + 30) / 20);
            if (phaseTimer == -10)
                movementLast = 0;
        }
        if (phaseTimer mod 180 == 10 || phaseTimer mod 180 == 60){
            var _inst;
            _inst = instance_create(x, y, objTHAttack);
            _inst.index = phase;
            if ((phase == 1 &amp;&amp; phaseTimer mod 180 == 10) || (phase == 3 &amp;&amp; phaseTimer mod 180 == 60))
                _inst.value2 = 1;
            else
                _inst.value2 = -1;
        }
        if (phaseTimer &gt;= 85 &amp;&amp; phaseTimer &lt;= 110){
            x = lerp(304, 448, 0.5-cos((phaseTimer-85)/25*pi)/2);
        }else if (phaseTimer &gt; 180 &amp;&amp; phaseTimer mod 360 &gt; 85 &amp;&amp; phaseTimer mod 360 &lt;= 135){
            x = lerp(160, 448, 0.5-cos(((phaseTimer mod 360)-85)/50*pi)/2);
        }else if (phaseTimer &gt; 180 &amp;&amp; phaseTimer mod 360 &gt; 265 &amp;&amp; phaseTimer mod 360 &lt;= 315){
            x = lerp(448, 160, 0.5-cos(((phaseTimer mod 360)-265)/50*pi)/2);
        }
    //-------[PHASE 2]-------
    }else if (phase == 2){
        if (phaseTimer &lt;= 0){
            x = lerp(xstart, 304, sin(pi/2-abs(phaseTimer)/40*pi/2));
            y = lerp(ystart, 192, sin(pi/2-abs(phaseTimer)/40*pi/2));
        }
        if (phaseTimer &gt; 0 &amp;&amp; phaseTimer &lt;= 20){
            y = 192 + 4*phaseTimer;
        }
        if (phaseTimer &gt; 0 &amp;&amp; phaseTimer mod 2 == 1){
            with (instance_create(x, y-14, objTHBullet)){
                index = 2;
                direction = 45 + abs(((2.85*other.phaseTimer+90) mod 180)-90);
                image_xscale = 0.75 + 1*max(other.phaseTimer mod 7 - 2.5, 0)/3.5;
                image_yscale = image_xscale;
                speed = 5 + 0.5 + sin(other.phaseTimer)/2;
                image_index = irandom(6)*4;
            }
            if (phaseTimer mod 4 == 1){
                audio_sound_pitch(audio_play_sound(sndMakerSampleThrow, 0, 0), random_range(1.6, 1.7));
            }
        }
    //-------[PHASE 4]-------
    }else if (phase == 4){
        if (phaseTimer &lt;= 0){
            x = lerp(xstart, 304, sin(pi/2-abs(phaseTimer)/40*pi/2));
            y = lerp(ystart, 192, sin(pi/2-abs(phaseTimer)/40*pi/2));
        }
        if (phaseTimer == 0){
            var _inst;
            _inst = instance_create(x, y, objTHBullet);
            _inst.value3 = 176;
            _inst.index = 4;
            _inst = instance_create(x, y, objTHBullet);
            _inst.value3 = 432;
            _inst.index = 4;
            audio_sound_pitch(audio_play_sound(sndMakerSamplePunch, 0, 0), random_range(1.4, 1.5));
        }
        if (phaseTimer &gt;= 85 &amp;&amp; phaseTimer &lt;= 110){
            x = lerp(304, 448, 0.5-cos((phaseTimer-85)/25*pi)/2);
        }else if (phaseTimer &gt; 180 &amp;&amp; phaseTimer mod 360 &gt; 85 &amp;&amp; phaseTimer mod 360 &lt;= 135){
            x = lerp(160, 448, 0.5-cos(((phaseTimer mod 360)-85)/50*pi)/2);
        }else if (phaseTimer &gt; 180 &amp;&amp; phaseTimer mod 360 &gt; 265 &amp;&amp; phaseTimer mod 360 &lt;= 315){
            x = lerp(448, 160, 0.5-cos(((phaseTimer mod 360)-265)/50*pi)/2);
        }
    //-------[PHASE 5]-------
    }else if (phase == 5){
        if (phaseTimer &lt;= 0){
            x = lerp(xstart, 304, sin(pi/2-abs(phaseTimer)/40*pi/2));
            slowdownYTimer = 0;
            slowdownY = slowdownYMidline - slowdownYAmp;
        }
        if (phaseTimer &gt;= 0){
            slowdownYTimer ++;
            var _period = 100;
            var _initialDelay = 50;
            if (slowdownYTimer &lt;= _initialDelay){
                var _amt = slowdownYTimer/_initialDelay;
                lightAlpha = _amt;
                if (_amt &lt; 0.5){
                    slowdownY = slowdownYMidline + slowdownYAmp*(1 - 2*_amt);
                }else{
                    slowdownY = slowdownYMidline - slowdownYAmp*sin((2*_amt - 1) * pi/2);
                }
            }else{
                slowdownY = slowdownYMidline - slowdownYAmp*cos((slowdownYTimer-_initialDelay)/120 * pi);
            }
        }
        
        //Purple Pointed
        if (phaseTimer &gt;= 0 &amp;&amp; phaseTimer mod 2 == 0){
            var _inst;
            _inst = instance_create(x, y, objTHBullet);
            _inst.direction = 6.2*(phaseTimer+2);
            _inst.index = 5;
            _inst = instance_create(x, y, objTHBullet);
            _inst.direction = 6.2*(phaseTimer+2) + 180;
            _inst.index = 5;
            if (phaseTimer mod 4 == 0){
                audio_sound_pitch(audio_play_sound(sndMakerSampleThrow, 0, 0), random_range(1.6, 1.7));
            }
        }
    //-------[PHASE 6]-------
    }else if (phase == 6){
        if (phaseTimer &gt;= 85 &amp;&amp; phaseTimer &lt;= 110)
            x = lerp(304, 448, 0.5-cos((phaseTimer-85)/25*pi)/2);
        else if (phaseTimer &gt; 180 &amp;&amp; phaseTimer mod 360 &gt; 85 &amp;&amp; phaseTimer mod 360 &lt;= 135)
            x = lerp(160, 448, 0.5-cos(((phaseTimer mod 360)-85)/50*pi)/2);
        else if (phaseTimer &gt; 180 &amp;&amp; phaseTimer mod 360 &gt; 265 &amp;&amp; phaseTimer mod 360 &lt;= 315)
            x = lerp(448, 160, 0.5-cos(((phaseTimer mod 360)-265)/50*pi)/2);
        if (phaseTimer mod 180 == 135 || phaseTimer mod 180 == 150 || phaseTimer mod 180 == 165){
            var i, _inst;
            for(i=0;i&lt;24;i++){
                _inst = instance_create(x, y, objTHBullet);
                _inst.direction = 15*i;
                _inst.index = 6;
            }
            audio_sound_pitch(audio_play_sound(sndMakerSamplePunch, 0, 0), random_range(1.4, 1.5));
        }
        
        if (phaseTimer &gt; 0 &amp;&amp; phaseTimer mod 3 == 0){
            var _inst;
            _inst = instance_create(x, y, objTHBullet);
            if (phaseTimer mod 6 == 3)
               _inst.direction = 17.25*phaseTimer;
            else
               _inst.direction = -47.5*phaseTimer;
            _inst.index = 6.1;
            
            _inst = instance_create(x, y, objTHBullet);
            if (phaseTimer mod 4 &lt;= 1)
               _inst.direction = 89.5*phaseTimer;
            else
               _inst.direction = -54.67*phaseTimer;
            _inst.index = 6.1;
            if (phaseTimer mod 6 == 0)
                audio_sound_pitch(audio_play_sound(sndMakerSampleThrow, 0, 0), random_range(1.6, 1.7));
        }
    //-------[PHASE 7]-------
    }else if (phase == 7){
        if (phaseTimer &lt;= 0)
            x = lerp(xstart, 304, sin(pi/2-abs(phaseTimer)/40*pi/2));
        if (phaseTimer &gt;= 85 &amp;&amp; phaseTimer &lt;= 110)
            x = lerp(304, 448, 0.5-cos((phaseTimer-85)/25*pi)/2);
        else if (phaseTimer &gt; 180 &amp;&amp; phaseTimer mod 360 &gt; 85 &amp;&amp; phaseTimer mod 360 &lt;= 135)
            x = lerp(160, 448, 0.5-cos(((phaseTimer mod 360)-85)/50*pi)/2);
        else if (phaseTimer &gt; 180 &amp;&amp; phaseTimer mod 360 &gt; 265 &amp;&amp; phaseTimer mod 360 &lt;= 315)
            x = lerp(448, 160, 0.5-cos(((phaseTimer mod 360)-265)/50*pi)/2);
        
        if (phaseTimer mod 180 == 10 || phaseTimer mod 180 == 60){
            var _inst;
            _inst = instance_create(x, y, objTHAttack);
            _inst.index = phase;
            if (phaseTimer mod 180 == 10)
                _inst.value2 = 1;
            else
                _inst.value2 = -1;
            _inst.value3 = _inst.value2;
        }
    //-------[PHASE 8]-------
    }else if (phase == 8){
        if (phaseTimer &lt;= 0)
            x = lerp(xstart, 304, sin(pi/2-abs(phaseTimer)/40*pi/2));
        if (phaseTimer &gt; 0 &amp;&amp; phaseTimer mod 225 == 20){
            var _inst;
            for(var i=0;i&lt;4;i++){
                _inst = instance_create(x, y, objTHBullet);
                _inst.direction = 90*(i+0.5);
                _inst.index = 8;
                if (phaseTimer mod 450 &gt; 225){
                    _inst.value1 = -1;
                }else{
                    _inst.value1 = 1;
                }
                audio_sound_pitch(audio_play_sound(sndMakerSamplePunch, 0, 0), random_range(1.4, 1.5));
            }
        }
    //-------[PHASE 9]-------  (AVOIDANCE)
    }else if (phase == 9){
        if (phaseTimer &lt; 0){
            x = 304;
            y = 192;
            phaseTimer = 0;
            audio_sound_gain(global.currentMusic, 0, 1000);
            avoidanceBGM = scrPlayMusic(global.BGMStage3c2, 0, 0);
            createAvoIdent = true;
        }else{
            phaseTimer += global.deathSlow/2;
        }
        
        // displayed timer
        if (phaseTimer &lt; 36){
            displayedTimerAlpha = max(displayedTimerAlpha - 0.04, 0);
        }else{
            displayedTimer = 2 * max(636 - max(phaseTimer, 72), 0);
            if (displayedTimer &gt; 0){
                displayedTimerAlpha = min(displayedTimerAlpha + 0.04, 1);
            }else{
                displayedTimerAlpha = max(displayedTimerAlpha - 0.05, 0);
                
                if (!global.practicing){
                    image_alpha = max(image_alpha - 0.05, 0);
                    nameTextAlpha = max(nameTextAlpha - 0.05, 0);
                }
            }
        }
        
        if (global.deathSlow &gt; 0 &amp;&amp; phaseTimerEvent != floor(phaseTimer*2)/2){
            phaseTimerEvent = floor(phaseTimer*2)/2;
            if (phaseTimerEvent == 50){
                if (instance_exists(objWorld)){
                    objWorld.playMusic = false;
                }
                audio_stop_sound(global.currentMusic);
            }
            if (phaseTimerEvent &lt;= 69){
                y = lerp(192, 304, min(phaseTimerEvent/50, 1));
            }else if (((phaseTimerEvent &gt;= 141 &amp;&amp; phaseTimerEvent &lt;= 199) || (phaseTimerEvent &gt;= 431 &amp;&amp; phaseTimerEvent &lt;= 487)) &amp;&amp; phaseTimerEvent mod 5 == 0){
                var i, _inst, _mult;
                if (phaseTimerEvent &lt;= 199)
                    _mult = 1;
                else
                    _mult = -1;
                for(i=0;i&lt;4;i++){
                    _inst = instance_create(x, y, objTHBullet);
                    _inst.direction = 3.333*_mult*(phaseTimerEvent-90) + 90*i;
                    _inst.index = 9.1;
                }
            }else if (phaseTimerEvent &gt;= 277 &amp;&amp; phaseTimerEvent &lt;= 326 &amp;&amp; phaseTimerEvent mod 3 == 0){
                var _inst;
                _inst = instance_create(x, y, objTHBullet);
                if (phaseTimerEvent mod 6 == 3)
                   _inst.direction = 17.25*phaseTimerEvent;
                else
                   _inst.direction = -47.5*phaseTimerEvent;
                _inst.index = 6.1;
                
                _inst = instance_create(x, y, objTHBullet);
                if (phaseTimerEvent mod 4 &lt;= 1)
                   _inst.direction = 89.5*phaseTimerEvent;
                else
                   _inst.direction = -54.67*phaseTimerEvent;
                _inst.index = 6.1;
            }
            switch(phaseTimerEvent){
                case 72:
                    var i, _inst;
                    for (i=-12;i&lt;12;i++){
                        _inst = instance_create(x, y, objTHBullet);
                        _inst.index = 9;
                        _inst.value2 = 32*abs(i);
                        if (i &lt; 0)
                            _inst.value3 = 135;
                        else
                            _inst.value3 = 315;
                    }
                    break;
                case 81:
                    var i, _inst;
                    for (i=-12;i&lt;12;i++){
                        _inst = instance_create(x, y, objTHBullet);
                        _inst.index = 9;
                        _inst.value2 = 32*abs(i);
                        if (i &lt; 0)
                            _inst.value3 = 45;
                        else
                            _inst.value3 = 225;
                    }
                    break;
                case 90:
                    with (objTHBullet){
                        if (index == 9){
                            image_alpha = 1;
                            value1 = 1;
                        }
                    }
                    break;
                case 216:
                case 225:
                case 358:
                case 369:
                case 504:
                case 511:
                    with (objTHBullet){
                        if (index == 9){
                            var _inst;
                            _inst = instance_create(x, y, objTHBullet);
                            _inst.index = 9.2;
                            _inst.direction = (value3 + 90) + ((value2 + value3)*17.75) mod 67.5 - 33.75;
                        }
                    }
                    break;
                case 575:
                    var _inst;
                    _inst = instance_create(x, y, objTHAttack);
                    _inst.index = 7;
                    _inst.value2 = 1;
                    _inst.value3 = 1;
                    _inst.playsnd = false;
                    _inst = instance_create(x, y, objTHAttack);
                    _inst.index = 7;
                    _inst.value2 = -1;
                    _inst.value3 = -1;
                    _inst.playsnd = false;
                    break;
                case 636:
                    if (instance_exists(objTHKid)){
                        with (objTHBullet){
                            if (index == 9){
                                value1 = 0;
                            }
                            direction = point_direction(objTHKid.x, objTHKid.y, x, y);
                            speed = 16;
                            friction = 0;
                            nokill = true;
                        }
                        
                        if (global.practicing){
                            phase = -1;
                            scrPracticeEnd();
                        }else{
                            instance_create(x, y, objTHMikeDeath);
                            audio_play_sound(sndTHEnd, 0, 0);
                            if (!instance_exists(objFinalScreenshake)){
                                instance_create(0, 0, objFinalScreenshake);
                            }
                            with (objFinalScreenshake){
                                shake = 33;
                            }
                            
                            if (!global.SRCoin[2]){
                                instance_create(x, y, objS3BlueCoin);
                            }else{
                                alarm[0] = 140;
                            }
                            
                            if (instance_exists(objTHForeground)){
                                var _hpMax = objTHForeground.playerHPMax;
                                var _hitsTaken = (_hpMax - objTHForeground.playerHP);
                                if (!global.practicing &amp;&amp; _hitsTaken &gt;= 0 &amp;&amp; _hitsTaken &lt; _hpMax){
                                    var _previousLowest = global.touhouHitLowest;
                                    if (_previousLowest &lt; 0 || _previousLowest &gt; _hitsTaken){
                                        global.touhouHitLowest = _hitsTaken;
                                    }
                                    
                                    // Get clear type and set relevant variables
                                    var _ident = noone;
                                    if (_hitsTaken == 0){
                                        _ident = 4.2;
                                    }else if (_previousLowest == -1){  // first clear
                                        _ident = 4.0;
                                    }else if (_previousLowest &gt; _hitsTaken){
                                        _ident = 4.1;
                                    }
                                    //  Create Pop-up
                                    if (_ident != noone){
                                        var _popup = instance_create(0, 0, objMakerRecordAchieved);
                                        with (_popup){
                                            ident = _ident;
                                            event_user(0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    break;
            }
        }
        
        if (phaseTimer &lt; 636 &amp;&amp; phaseTimer &gt;= 72 &amp;&amp; !global.dead){
            var _avoidanceBGMSource = global.BGMStage3c2;
            if (createAvoIdent &amp;&amp; !global.muteMusic &amp;&amp; global.musicLevel &gt; 0 &amp;&amp; global.volumeLevel &gt; 0){
                scrIdentMusic(_avoidanceBGMSource);
                createAvoIdent = false;
            }
            if (!audio_is_playing(_avoidanceBGMSource) &amp;&amp; !global.muteMusic){
                avoidanceBGM = scrPlayMusic(_avoidanceBGMSource, 0, 0);
            }
            if (abs(audio_sound_get_track_position(avoidanceBGM) - (phaseTimer-.5)/25) &gt; 0.12)
                audio_sound_set_track_position(avoidanceBGM, (phaseTimer-.5)/25);
        }
        if (global.deathSlow &lt; 1){
            if (!bgmFadeout){
                audio_sound_gain(avoidanceBGM,0,800 * global.musicLevel/100 * global.volumeLevel/100);
                bgmFadeout = true;
            }else if (audio_sound_get_gain(avoidanceBGM) &lt;= 0) audio_stop_sound(avoidanceBGM);
            if (bgmPitch &gt; 0.5){
                bgmPitch -= 1/80;
                audio_sound_pitch(avoidanceBGM, bgmPitch);
            }
        }
    }
    
    if (createFightIdent &amp;&amp; phase &gt;= 1){
        scrIdentAttack(room, 0);  // basically scrIdentRoom();
        createFightIdent = false;
    }
}
if (phase != 5){
    if (lightAlpha &gt; 0){
        lightAlpha = max(lightAlpha - 0.06, 0);
    }
}
visualTimer ++;

//Spellcard attacks
if (phase &gt;= 1 &amp;&amp; phase &lt; 9 &amp;&amp; phase mod 2 == 0){
    if (!global.dead){
        spellcardTimer -= 1;
    }
    if (spellcardTimer &lt;= 0){  // spellcard "expires"
        with (healthbar){
            hpPercentShown = hp/hpMax;
            hp = hpMax;
        }
        event_user(0);
    }
    displayedTimer = spellcardTimer;  // needed for transition to next phase
}

if (phase &lt; 9){
    if (spellcardTimer &gt; 0){
        if (displayedTimerAlpha &lt; 1){
            displayedTimerAlpha += 0.05;
        }
    }else{
        if (displayedTimerAlpha &gt; 0){
            displayedTimerAlpha -= 0.05;
        }
    }
}

if (phase == 0 || skipTextAlpha &gt; 0){
    if (phase == 0 &amp;&amp; phaseTimer &gt;= 0 &amp;&amp; skipTextAlpha &lt; 1){
        skipTextAlpha = min(skipTextAlpha+0.02, 1);
    }else if (phase &gt;= 1){
        skipTextAlpha = max(skipTextAlpha-0.04, 0);
    }
}

if (nameTextAlpha &lt; 1 &amp;&amp; (phase &lt; 9 || displayedTimer &gt; 0)){
    nameTextAlpha += 0.05;
}

if (nameTextAlpha &gt;= 1 &amp;&amp; nameTextStarsShown != nameTextStars){
    if (nameTextStarsShown &lt; nameTextStars){
        nameTextStarsShown = min(nameTextStarsShown + 0.15, nameTextStars);
    }else{
        nameTextStarsShown = max(nameTextStarsShown - 0.15, nameTextStars);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(healthbar) || phase &lt;= 0 || phase &gt;= 9)
    exit;
with (healthbar){
    if (other.phase mod 2 == 1){
        hp -= 7/8;
        if (hp &lt;= hpMax/8){
            with (other){
                event_user(0);
            }
        }
    }else{
        hp -= 1/8;
        if (hp &lt;= 0){
            hpPercentShown = 0;
            hp = hpMax;
            with (other){
                event_user(0);
            }
        }
    }
}
with (other){
    y = yprevious;
    scrMoveContactObject(0, -1, abs(vspeed), other);
    instance_destroy();
    //NOTE: the hit sound is not played by the bullet object in rStage03Touhou
    var _snd = audio_play_sound(sndMakerBulletHit, 0, 0)
    audio_sound_pitch(_snd, PITCH_FLUCT);
    audio_sound_gain(_snd, 0.5, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intro + Name Text
//Intro Skip Text
if (skipTextAlpha &gt; 0){
    var _usingSurf = false;
    if (skipTextAlpha &lt; 1){
        if (!surface_exists(global.sharedSurf)){
            global.sharedSurf = surface_create(800, 608);
        }
        
        if (surface_exists(global.sharedSurf)){
            surface_set_target(global.sharedSurf);
            draw_clear_alpha(c_black, 0);
            _usingSurf = true;
        }
    }
    
    var _buttonStr = scrGetKeybind(global.skipButton[global.controllerMode], 'the "Skip" button');
    if (_buttonStr != 'the "Skip" button'){
        _buttonStr = '"' + _buttonStr + '"';
    }
    
    draw_set_font(fFlappyCounter);
    draw_set_halign(fa_right);
    draw_set_valign(fa_bottom);
    draw_text_transformed_outline(752, 560, "Press " + _buttonStr + " to skip intro", 3, c_black, 24, 0.5, 0.5, 0);
    
    if (_usingSurf){
        surface_reset_target();
        _usingSurf = false;
        if (surface_exists(global.sharedSurf)){
            draw_surface_ext(global.sharedSurf, 0, 0, 1, 1, 0, c_white, skipTextAlpha);
        }
    }
}

//Name text
if (nameTextAlpha &gt; 0){
    if (!surface_exists(nameTextSurf))
        nameTextSurf = surface_create(256, 32);
    if (surface_exists(nameTextSurf)){
        surface_set_target(nameTextSurf);
        draw_clear_alpha(c_black, 0);
        draw_set_font(fDefault18);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_color(nameTextCol2);
        draw_text_transformed_outline(6, 6, 'Knockoff Mike Goutokuji', 2, nameTextCol1, 12, 0.5, 0.5, 0);
        draw_set_color(c_white);
        surface_reset_target();
        
        if (surface_exists(nameTextSurf)){
            draw_surface_ext(nameTextSurf, 80, 48, 1, 1, 0, c_white, nameTextAlpha);
        }
    }
    for(var i=0;i&lt;floor(nameTextStarsShown);i++)
        draw_sprite_ext(sprTHStars, max(0, ((global.count mod 98) - 48)* 8/50), 90+i*20, 76, 0.5, 0.5, 0, c_white, nameTextAlpha);
    if (nameTextStarsShown mod 1 &gt; 0)
        draw_sprite_ext(sprTHStars, max(0, ((global.count mod 98) - 48)* 8/50), 90+floor(nameTextStarsShown)*20, 76, 0.5, 0.5, 0, c_white, nameTextAlpha*(nameTextStarsShown mod 1));

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw bird sprite
//Placed here so objDropShadows can call it
if (image_xscale &gt; 0){
    if (!surface_exists(birdSurf))
        birdSurf = surface_create(144, 128);
    if (surface_exists(birdSurf)){
        surface_set_target(birdSurf);
        draw_clear_alpha(c_black, 0);
        draw_set_color(c_white);
        
        draw_sprite_ext(sprTHBirdTail, global.count*3/10, 64+14*image_xscale/3, 64+16*image_yscale/3, image_xscale, image_yscale, image_angle, c_white, 1);
        
        draw_sprite_ext(sprTHBird, (0.2*global.count), 64, 64, image_xscale, image_yscale, image_angle, c_white, 1);
        
        if (floor((0.2*global.count)) mod image_number &lt; 2 || floor((0.2*global.count)) mod image_number == 4){
            draw_sprite_ext(sprTHBirdEar, 0, 64+18*image_xscale/3, 64-28*image_yscale/3, 0.6*image_xscale/3, 0.6*image_yscale/3, image_angle-20, c_white, 1);
            draw_sprite_ext(sprTHBirdEar, 0, 64-18*image_xscale/3, 64-28*image_yscale/3, -0.6*image_xscale/3, 0.6*image_yscale/3, image_angle+20, c_white, 1);
        }else if (floor((0.2*global.count)) mod image_number == 3){
            draw_sprite_ext(sprTHBirdEar, 0, 64+18*image_xscale/3, 67-28*image_yscale/3, 0.6*image_xscale/3, 0.6*image_yscale/3, image_angle-20, c_white, 1);
            draw_sprite_ext(sprTHBirdEar, 0, 64-18*image_xscale/3, 70-28*image_yscale/3, -0.6*image_xscale/3, 0.6*image_yscale/3, image_angle+20, c_white, 1);
        }else{
            draw_sprite_ext(sprTHBirdEar, 0, 61+18*image_xscale/3, 61-28*image_yscale/3, 0.6*image_xscale/3, 0.6*image_yscale/3, image_angle-20, c_white, 1);
            draw_sprite_ext(sprTHBirdEar, 0, 61-18*image_xscale/3, 58-28*image_yscale/3, -0.6*image_xscale/3, 0.6*image_yscale/3, image_angle+20, c_white, 1);
        }
        
        draw_sprite_ext(sprTHBird_Spike, (0.2*global.count), 64, 64, image_xscale, image_yscale, image_angle, c_white, 1);
        
        surface_reset_target();
        if (x == xprevious)
            draw_surface_ext(birdSurf, x-64+drawXOff, y-64+drawYOff, 1, 1, 0, c_white, image_alpha);
        else{
            var tex;
            tex = surface_get_texture(birdSurf);
            draw_primitive_begin_texture(pr_trianglestrip, tex);
            draw_vertex_texture(x-64+clamp(5*(x-xprevious),-20, 20)+drawXOff, y-64+drawYOff, 0, 0);
            draw_vertex_texture(x+80+clamp(5*(x-xprevious),-20, 20)+drawXOff, y-64+drawYOff, 1, 0);
            draw_vertex_texture(x-64+drawXOff, y+64+drawYOff, 0, 1);
            draw_vertex_texture(x+80+drawXOff, y+64+drawYOff, 1, 1);
            draw_primitive_end();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End stage
alarm[0] = 40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Lights
draw_set_color(c_yellow);
draw_set_alpha(0.05*lightAlpha);
for(var i=0; i&lt;=8; i++){
    draw_rectangle(64, (slowdownY) - 2*i, 544, (slowdownY + slowdownHeight) + 2*i, false);
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change phases
//remove bullets
with (objTHBullet){
    image_alpha = 0.5;
    expand = 0.2;
    alphaInc = -0.1;
    nokill = true;
}
instance_destroy(objTHAttack);
xstart = x;
ystart = y;
phase ++;
phaseTimer = -40;

if (phase &gt;= 2 &amp;&amp; phase &lt; 9 &amp;&amp; phase mod 2 == 0){  // spellcard attacks
    // Activation effect
    instance_create(0, 0, objTHSpellcardText);
    with (objTHSpellcardBK){
        fade = 1;
    }
    
    if (!(global.practicing &amp;&amp; global.practiceWaypointStart == phase)){
        audio_play_sound(sndTHSpell, 0, 0);  // don't play sfx at start of first practice attack
    }else{
        with (objTHSpellcardBK){
            image_alpha = 1;
        }
    }
    spellcardTimerInit = 750;
    spellcardTimer = spellcardTimerInit;
}else{  // non-spellcard attacks
    nameTextStars --;
    if (!(global.practicing &amp;&amp; global.practiceWaypointStart == phase)){
        audio_play_sound(sndTHSpellEnd, 0, 0);
    }
    if (phase == 9){
        with (objTHSpellcardBK){
            fade = 1;
            image_alpha = 0;
            avoidance = true;
        }
    }else{
        with (objTHSpellcardBK){
            fade = 0;
        }
    }
    spellcardTimer = 0;
}

if (global.practicing){
    if ((global.practiceWaypointEnd + 1) &lt;= phase){
        phase = -1;
        scrPracticeEnd();
    }
}else{
    if (phase &lt;= 9){
        global.touhouFarthest = max(global.touhouFarthest, phase-1);
    }
}

if (phase == 9 &amp;&amp; instance_exists(objTHHealth)){
    objTHHealth.hpPercentShown = 0;
    objTHHealth.hpMax = 1272-144;
    objTHHealth.hp = objTHHealth.hpMax;
    objTHHealth.avoidance = true;
    objTHHealth.col2 = objTHHealth.avocol2;
    objTHHealth.col3 = objTHHealth.avocol3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_destroy, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.practicing){
    image_xscale = 3;
    image_yscale = 3;
    phase = global.practiceWaypointStart;
    event_user(0);
    
    if (!instance_exists(objTHHealth)){
        healthbar = instance_create(x, y, objTHHealth);
        healthbar.hpBarPercentShown = 1;
        healthbar.hpPercentShown = 1;
        if ((phase mod 2) == 0){
            healthbar.hp = healthbar.hpMax/8;
        }
    }
    
    // Instructions
    with (instance_create(0, 0, objMakerMessage)){
        if (!global.controllerMode){
            message = "Press " + scrGetKeybind(global.jumpButton[0], "jump") + " to focus";
        }else{
            message = "Press " + scrGetControllerBind(global.jumpButton[1], "jump") + " to focus";
        }
    }
    
    if (phase == 9){
        if (instance_exists(objTHHealth)){
            objTHHealth.hpPercentShown = 0;
            objTHHealth.hpMax = 1272-144;
            objTHHealth.hp = objTHHealth.hpMax;
            objTHHealth.avoidance = true;
            objTHHealth.col2 = objTHHealth.avocol2;
            objTHHealth.col3 = objTHHealth.avocol3;
        }
        if (instance_exists(objWorld)){
            objWorld.playMusic = false;
        }
        with (objTHSpellcardBK){
            fade = 1;
            image_alpha = 0;
            avoidance = true;
        }
    }else{
        if (instance_exists(objWorld)){
            objWorld.playMusic = true;
        }
    }
    
    nameTextStars = 4 - ((phase-1) div 2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objTHBullet){
    if (visible &amp;&amp; index != -1 &amp;&amp; index mod 2 &gt;= 1){
        draw_self();
    }
}
with (objTHSpellcardText){
    event_perform(ev_draw, 0);
}
with (objTHBullet){
    if (visible &amp;&amp; index != -1 &amp;&amp; index mod 2 &lt; 1){
        draw_self();
    }
}

//Draw main character
event_user(3);

//Spellcard ring
if (drawXOff == 0 &amp;&amp; displayedTimerAlpha &gt; 0 &amp;&amp; spellcardTimerInit &gt;= 0){
    var _pointNum, _trailNum, _radMax;  // constants
    _pointNum = 10;
    _trailNum = 6;
    _radMax = 112;
    
    var _rad, _pointDirSpacing, _pointDirInc, _timer, _pointDirPosition;  // repeated calculations
    _pointDirSpacing = 360/_pointNum;
    if (phase == 9 &amp;&amp; phaseTimer &gt;= 36){
        var _amt = 1;
        with (objTHHealth){
            _amt = hp/hpMax;
        }
        _rad = _radMax * _amt;
    }else{
        if (displayedTimer &lt;= 0 || spellcardTimerInit &lt;= 0){
            _rad = 0;
        }else{
            _rad = _radMax * (displayedTimer/spellcardTimerInit);
        }
    }
    _pointDirInc = _pointDirSpacing/_trailNum;
    
    draw_set_blend_mode(bm_add);
    if (_rad &lt; 0.5){
        // mainly done for transition alpha fade
        draw_sprite_ext(sprMakerTHOrb, 37, x, y, 1, 1, 0, c_white, displayedTimerAlpha);
    }else{
        for (var i=0; i&lt;_pointNum; i++){
            _pointDirPosition = (i*_pointDirSpacing);
            for (var j=0; j&lt;_trailNum; j++){
                draw_sprite_ext(sprMakerTHOrb, 37, x + lengthdir_x(_rad, _pointDirPosition + ((visualTimer - j) * _pointDirInc)), y + lengthdir_y(_rad, _pointDirPosition + ((visualTimer - j) * _pointDirInc)), 1 - (j/_trailNum)/2,  1 - (j/_trailNum)/2, 0, c_white, displayedTimerAlpha*(1 - (j/_trailNum)));
            }
        }
    }
    draw_set_blend_mode(bm_normal);
}

//Intro Blending
if (phase == 0 &amp;&amp; phaseTimer &lt; 110 &amp;&amp; instance_exists(objTHSubtractive)){
    if (!surface_exists(global.sharedSurf)){
        global.sharedSurf = surface_create(800, 608);
    }
    if (surface_exists(global.sharedSurf)){
        surface_set_target(global.sharedSurf);
        
        var _useShader = (global.tonemapperEnabled);
        if (_useShader){
            draw_clear_alpha(c_black, 1);
        }else{
            draw_clear_alpha(c_black, 0);
        }
        
        draw_set_blend_mode(bm_add);
        if (_useShader){
            with (objTHSubtractive){
                draw_self();
            }
        }else{
            with (objTHSubtractive){
                draw_sprite_ext(sprite_index, image_index+2, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
            }
        }
        draw_set_blend_mode(bm_normal);
        surface_reset_target();
        
        if (phaseTimer &gt; 100){
            if (!surface_exists(global.sharedSurf2)){
                global.sharedSurf2 = surface_create(800, 608);
            }
            surface_set_target(global.sharedSurf2);
            draw_clear_alpha(c_white, 1);
            draw_set_blend_mode(bm_subtract);
            draw_circle(304, 192, 64*(1-(phaseTimer-100)/10), false);
            surface_reset_target();
            
            if (surface_exists(global.sharedSurf)){
                surface_set_target(global.sharedSurf);
                if (surface_exists(global.sharedSurf2)){
                    draw_surface(global.sharedSurf2, 0, 0);
                }
                surface_reset_target();
            }
            draw_set_blend_mode(bm_normal);
       }
       if (_useShader){
           shader_set(shdTonemapper);
       }
       draw_surface_part(global.sharedSurf, 64, 32, 480, 544, 64, 32);
       if (global.tonemapperEnabled){
          shader_reset();
       }
   }
}

//Spellcard + Avoidance Timer
if (drawXOff == 0 &amp;&amp; displayedTimerAlpha &gt; 0){
    if (!surface_exists(global.sharedSurf)){
        global.sharedSurf = surface_create(800, 608);
    }
    
    if (surface_exists(global.sharedSurf)){
        surface_set_target(global.sharedSurf);
        draw_clear_alpha(c_black, 0);
        draw_set_font(fAttackTimer);
        draw_set_valign(fa_bottom);
        
        scrDrawTimer(64, 64, displayedTimer, fa_center, false, 2);
        surface_reset_target();
        
        if (surface_exists(global.sharedSurf)){
            draw_surface_ext(global.sharedSurf, 304-64 + drawXOff, y-96-64 + drawYOff, 1, 1, 0, c_white, displayedTimerAlpha);
        }
        
        
        if (surface_exists(global.sharedSurf)){
            var _usingSurf2 = false;
            var _drawX = 0;
            var _drawY = 0;
            var _finalX = (304 - 128/2);
            var _finalY = ((y - 96) - 128/2);
            
            if (displayedTimerAlpha &lt; 1){
                if (!surface_exists(global.sharedSurf2)){
                    global.sharedSurf2 = surface_create(800, 608);
                }
                if (surface_exists(global.sharedSurf2)){
                    surface_set_target(global.sharedSurf2);
                    draw_clear_alpha(c_black, 0);
                    _usingSurf2 = true;
                }
            }
            
            if (!_usingSurf2){
                _drawX = _finalX;
                _drawY = _finalY;
            }
            
            //draw text
            var _outWidth = 3;
            var _prec = 16;
            var _angInc = 360/_prec;
            for (var i=0; i&lt;_prec; i++){
                draw_surface_part_ext(global.sharedSurf, 0, 0, 128, 128, _drawX +  _outWidth*dcos(_angInc*i), _drawY +  _outWidth*(-dsin(_angInc*i)), 1, 1, c_black, 1);
            }
            draw_surface_part_ext(global.sharedSurf, 0, 0, 128, 128, _drawX, _drawY, 1, 1, c_white, 1);
            
            
            if (_usingSurf2){
                surface_reset_target();
                _usingSurf2 = false;
                
                if (surface_exists(global.sharedSurf2)){
                    draw_surface_part_ext(global.sharedSurf2, 0, 0, 128, 128, _finalX, _finalY, 1, 1, c_white, displayedTimerAlpha);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
