<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprJumpRefresher</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Plant gore
row = (y-160) div 64;
yBase = 192 + row*64 + 26;
hspeed = random_range(0.5, 1.9)*choose(1, -1);
vspeed = random_range(-2, -1);
gravity = random_range(0.125, 0.149);
image_speed = 0;
val1 = 0;
val2 = 0;
state = 0; // 0 = 1st piece, 1 = 2nd, etc.
growing = false;  // draw a portion of the gore because the plant was still in its growing animation
fadeout = false;  // true after first bounce
angInc = random_range(0.85, 2.3)*(-sign(hspeed));
angIncMag = abs(angInc);
frozen = false;

tex = -1;
alarm[0] = 1;

// for shadow
width = 1;
height = 1;
angOff = 0; // will be subtracted from image_angle
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set dimensions for shadows
switch(sprite_index){
    case sprPlantsCannonStand:
        width = 32 * val1/80;
        height = val1/8;
    break;
    case sprMakerCannon:
        if (growing){
            width = max(0, val1);
        }else{
            width = 42;
        }
        height = 30;
    break;
    case sprPlantsSpikeLauncherTip:
        if (growing){
            height = max(0, val1);
        }else{
            height = 32;
        }
        width = 4 * ceil(min(height, 28)/4);
    break;
    case sprPlantsSpike:
        height = val2;
        width = 2 * ceil((height+val1)/2);
        
        width *= 2;
        height *= 2;
    break;
    case sprPlantsSpikeLauncher:
        height = (val1+3);
        width = 2 * ceil((height+13)/2);
        
        width *= 2;
        height *= 2;
    break;
    case sprPlantsSpikeLauncherShard:
        height = (val1 + 3);
        width = 2 * ceil(min(height, 28)/2);
        if (floor(image_index) mod 3  == 2){
            width = 10;
        }else{
            width = 5;  // when accounting for angle
            if (floor(image_index) mod 3  == 0){
                angOff = 45;
            }else{
                angOff = -45;
            }
        }
        
        width *= 2;
        height *= 2;
    break;
    case sprPlantsSpringShards:
        if (growing){
            height = min(val1, 17);
        }else{
            height = 17;
        }
        width = 24;
        
        width *= image_xscale;
        height *= image_yscale;
    break;
    case sprPlantsSpring2:
        switch (floor(image_index)){
            case 0:
                width = 8;
            break;
            case 1:
                width = 20;
            break;
            case 2:
                width = 30;
            break;
            case 3:
                width = 8;
            break;
        }
        
        if (growing){
            height = min(val1, 32);
            if (height &lt; 10){
                width = 8;  // spring is not visible
            }
        }else{
            height = 32;
        }
        
        width *= image_xscale;
        height *= image_yscale;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    if (sprite_index != sprPlantsCannonStand){
        if (fadeout){
            image_alpha -= 0.03;
            if (hspeed != 0){
                var _hspdDec = min(abs(hspeed), 0.15);
                hspeed -= _hspdDec * sign(hspeed);
                angInc += _hspdDec*(-sign(hspeed));
            }
            if (image_alpha &lt;= 0){
                instance_destroy();
            }
            if (angInc != 0){
                angInc *= 0.95;
                if (abs(angInc) &lt; 0.2){
                    angInc = 0;
                }
            }
        }
        
        if (gravity != 0 &amp;&amp; y &gt;= yBase){
            y = yBase - (y-yBase);
            vspeed *= -0.4;
            
            var _hspdDec = abs(hspeed) * 0.4;
            hspeed -= _hspdDec * sign(hspeed);
            angInc += _hspdDec*(-sign(hspeed));
            fadeout = true;
            
            if (abs(vspeed) &lt; 1){vspeed = 0;gravity = 0;}
        }
        
        image_angle += angInc;
    }else{
        val1 -= 2.714;
        if (val1 &lt;= 1){
            instance_destroy();
        }
        if (val2 != 0){
            if (abs(val2) &gt; 0.4){
                val2 -= 0.4*sign(val2);
            }else{
                val2 = 0;
            }
        }
        
        width = 32 * val1/80;
        height = val1/8;
    }
    if (sprite_index == sprMakerCoin){
        if (!growing &amp;&amp; val1 &gt; 0){
            val1 -= 0.04;
        }
    }/*else if (sprite_index == sprMakerCannon){
        if (gravity != 0 || image_angle &gt; 180 | image_angle == 0){
            image_angle -= hspeed*4;
        }
    }*/else if (sprite_index == sprPlantsSpring2){
        if (image_index &gt;= 3){
            image_index = 3;
            image_speed = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadow
/*
// Rotating the shadow is better
var _inW, _inH, _ang;
_ang = image_angle + angOff;
_inW =  width*abs(dsin(90-_ang)) + height * abs(dsin(_ang));
_inH = height*abs(dsin(90-_ang)) +  width * abs(dsin(_ang));
*/
var _yScale = clamp((yBase - y)/40, 0, 1);
var _shadowScale = (1 + 0.4*_yScale);
var _shadowDim = scrPlantsShadow(width * _shadowScale, height * _shadowScale);

if (_shadowDim[0] &gt; 0 &amp;&amp; _shadowDim[1] &gt; 0){
    draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, yBase+2, _shadowDim[0], _shadowDim[1], image_angle - angOff, c_white, image_alpha * (1 - 0.2*_yScale));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Piece
if (sprite_index == sprPlantsCoinationLeaves){  // COINATION
    if (!growing){
        draw_self();
    }else{
        var _leafWidth;
        if (image_index == 1){
            _leafWidth = 24;
        }else{
            _leafWidth = 29;
        }
        
        var _growAmt = val1/25;
        var _rotCoords = scrChangeOrigin(0, 0, image_xscale, 11, image_angle);
        draw_sprite_general(sprPlantsCoinationLeaves, image_index, floor(_leafWidth * (1 - _growAmt)), 0, ceil(_leafWidth * _growAmt), 21, x+_rotCoords[0], y+_rotCoords[1], image_xscale, 1, image_angle, image_blend, image_blend, image_blend, image_blend, image_alpha); //43
    }
}else if (sprite_index == sprPlantsCoinationStem || sprite_index == sprPlantsCoinationStemGrowing){
    var _height = 0;
    if (sprite_index == sprPlantsCoinationStem){
        _height = 11 + abs((floor(image_index) mod image_number) - 5);
    }else{
        _height = 6 + (floor(image_index) mod image_number);
    }
    draw_self();
    var _rotCoords = scrChangeOrigin(0, 0, 0, -(_height/2), image_angle);
    draw_sprite_ext(sprite_index, image_index, x + _rotCoords[0], y + (_rotCoords[1] + (_height/2)), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
}else if (sprite_index == sprMakerCoin){
    if (!growing){
        draw_sprite_ext(sprMakerCoin, image_index, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha);
        if (val1 &gt; 0){
            draw_set_blend_mode(bm_add);
            draw_sprite_ext(sprPlantsCoinationGlow, image_index, x, y, image_xscale, image_yscale, image_angle, c_white, val1*image_alpha);
            draw_set_blend_mode(bm_normal);
        }
    }else{
        var _rotCoords = scrChangeOriginScaled(0, 0, 8, val1/2, image_angle, image_xscale, image_yscale);
        draw_sprite_general(sprMakerCoin, 0, 0, 0, 16, val1, x + _rotCoords[0], y + _rotCoords[1], image_xscale, image_yscale, image_angle, c_white, c_white, c_white, c_white, image_alpha);
    }
}else if (sprite_index == sprPlantsCannonStand){  // CANNON
    // val1 = height
    // val2 = skew
    // idk why it's done this way but sure, let's save those bytes of memory from having part-specific varibles at the cost of my sanity
    if (val2 == 0){
        draw_sprite_part(sprPlantsCannonStand, 0, 0, 0, 32, val1, x-16, ystart-val1);
    }else{
        var _left = (x-16);
        var _right = _left + 32;
        var _bot = ystart;
        var _top = ystart-val1;
        
        draw_primitive_begin_texture(pr_trianglestrip, tex);
        draw_vertex_texture(_left + ceil(val2), _top, 0, 0);
        draw_vertex_texture(_right + ceil(val2), _top, 1, 0);
        draw_vertex_texture(_right, _bot, 1, val1/64);
        draw_vertex_texture(_left, _bot, 0, val1/64);
        draw_vertex_texture(_left + ceil(val2), _top, 0, 0);
        draw_primitive_end();
    }
    var _top = ystart - ceil(val1);
    draw_background_part(tlMakerMega, 0, 0, 32, ceil(val1), xstart-16, _top);
    if (val1 &gt; 32){
        draw_sprite(sprMakerCannonBase, 0, xstart, _top + 16);
    }else{
        draw_sprite_part(sprMakerCannonBase, 0, 0, 0, 32, val1-1, xstart-16, _top);
    }
}else if (sprite_index == sprMakerCannon){
    if (growing){
        var _rotCoords = scrChangeOrigin(0, 0, val1/2, 15, image_angle);
        draw_sprite_general(sprMakerCannon, 0, max(0, 42-val1), 0, max(0, val1), 30, x+_rotCoords[0], y+_rotCoords[1], 1, 1, image_angle, c_white, c_white, c_white, c_white, image_alpha);
    }else{
        var _rotCoords = scrChangeOrigin(13, 15, 20, 15, image_angle);
        draw_sprite_ext(sprite_index, image_index, x+_rotCoords[0], y+_rotCoords[1], 1, 1, image_angle, c_white, image_alpha);
    }
}else if (sprite_index == sprPlantsSpikeLauncherTip){  // SPIKE
    if (growing){
        var _rotCoords = scrChangeOrigin(0, 0, 14, min(val1, 32)/2, image_angle);
        draw_sprite_general(sprPlantsSpikeLauncherTip, image_index, 0, 0, 28, val1, x+_rotCoords[0], y+_rotCoords[1], 1, 1, image_angle, c_white, c_white, c_white, c_white, image_alpha);
    }else{
        var _rotCoords = scrChangeOrigin(2, 26, 14, 16, image_angle);
        draw_sprite_ext(sprite_index, image_index, x+_rotCoords[0], y+_rotCoords[1], 1, 1, image_angle, c_white, image_alpha);
    }
}else if (sprite_index == sprPlantsSpike){
    // val1 = top
    // val2 = height
    var _relativeOriginY = floor(val2/2);
    var _rotCoords = scrChangeOriginScaled(0, 0, 16, _relativeOriginY, image_angle, 2, 2);
    draw_sprite_general(sprPlantsSpike, image_index, 0, val1, 32, val2, x+_rotCoords[0], y+_rotCoords[1], 2, 2, image_angle, c_white, c_white, c_white, c_white, image_alpha);
}else if (sprite_index == sprPlantsSpikeLauncher){
    var _relativeOriginY = min((val1/2), 4);
    if (val1 &lt; 6){
        var _rotCoordsBacking = scrChangeOriginScaled(0, 0, 6, _relativeOriginY+2, image_angle, 2, 2);
        draw_sprite_general(sprPlantsSpikeLauncher_Backing, image_index, 0, 0, 32, min((val1+1), 7), x + _rotCoordsBacking[0], y + _rotCoordsBacking[1], 2, 2, image_angle, c_white, c_white, c_white, c_white, image_alpha);
    }else{
        var _rotCoordsBacking = scrChangeOriginScaled(6, 6, 6, _relativeOriginY+2, image_angle, 2, 2);
        draw_sprite_ext(sprPlantsSpikeLauncher_Backing, 0, x + _rotCoordsBacking[0], y + _rotCoordsBacking[1], 2, 2, image_angle, c_white, image_alpha);
    }
    
    var _rotCoords = scrChangeOriginScaled(0, 0, 16, _relativeOriginY, image_angle, 2, 2);
    draw_sprite_general(sprPlantsSpikeLauncher, image_index, 0, 0, 32, val1, x+_rotCoords[0], y+_rotCoords[1], 2, 2, image_angle, c_white, c_white, c_white, c_white, image_alpha);
}else if (sprite_index == sprPlantsSpikeLauncherShard){
    var _rotCoords = scrChangeOriginScaled(0, 0, 10, min(floor(val1/2), 10) + 3, image_angle, 2, 2);
    draw_sprite_general(sprPlantsSpikeLauncherShard, image_index, 0, 0, 32, val1 + 3, x+_rotCoords[0], y+_rotCoords[1], 2, 2, image_angle, c_white, c_white, c_white, c_white, image_alpha);
}else if (sprite_index == sprPlantsSpringShards){  // SPRING
    if (!growing){
        draw_self();
    }else{
        var _rotCoords = scrChangeOriginScaled(0, 0, 10, val1/2, image_angle, image_xscale, image_yscale);
        draw_sprite_general(sprite_index, image_index, 0, 0, 21, val1, x+_rotCoords[0], y+_rotCoords[1], image_xscale, image_yscale, image_angle, c_white, c_white, c_white, c_white, image_alpha);
    }
}else if (sprite_index == sprPlantsSpring2){
    var _sprWidth = (43 * floor(image_index+1)/4);
    if (!growing){
        var _rotCoords = scrChangeOriginScaled(-5, 16, (_sprWidth/2), 16, image_angle, image_xscale, image_yscale);
        draw_sprite_ext(sprite_index, image_index, x+_rotCoords[0], y+_rotCoords[1], image_xscale, image_yscale, image_angle, c_white, image_alpha);
    }else{
        var _rotCoords = scrChangeOriginScaled(0, 0, (_sprWidth/2), val1/2, image_angle, image_xscale, image_yscale);
        draw_sprite_general(sprite_index, image_index, 0, 0, 43, val1, x+_rotCoords[0], y+_rotCoords[1], image_xscale, image_yscale, image_angle, c_white, c_white, c_white, c_white, image_alpha);
    }
}

/*  // Helps with debugging
draw_set_color(c_red);
draw_circle(x, y, 3, false);
draw_set_font(fDefault12);
draw_text(x, y-60, "W: " + string(width));
draw_text(x, y-30, "H: " + string(height));
draw_set_color(c_white);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
