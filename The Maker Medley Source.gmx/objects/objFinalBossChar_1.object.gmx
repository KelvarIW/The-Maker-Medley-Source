<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMrScribble</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objFinalBossScribbleParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialize
event_inherited();

// Overwrite Parent Defaults
currentHPVal = 0;

// movement
movementLerp = 0;
xCent = x;
yCent = y;
xLast = xCent;
yLast = yCent;
xTo = xCent;
yTo = yCent;

hspd = random_range(-2, 2);
vspd = random_range(2.1, 3.4);
var _dist = random_range(20, 32);
var _ang = random(360);
xDisplace = _dist * dcos(_ang);
yDisplace = _dist * dcos(_ang);

// attacks
attack = -1;
attackLast = 0;
delayFrames = 0;
counter = 0;
shootAng = 0;
summoned[0] = false;
summoned[1] = false;
summoned[2] = false;
summoning = -1;
practiceSummonCount = 0;

// music
global.musFadeMultiplier = 1;

// misc.
kill = true;
hoverCounter = 0;

//don't set up the area for the start of P1 if we're going straight to the avoidance
if (!(global.practicing &amp;&amp; global.practiceWaypointStart == 1)){
    with (objWorld){
        playIntro = true;
        playMusic = true;
        musicToPlay = global.BGMBoss4Main;
    }
    instance_create(176, 464, objMakerReflector);
    (instance_create(624, 464, objMakerReflector)).image_xscale = -1;
}

// Practice Mode implementation
if (global.practicing &amp;&amp; global.practiceWaypointStart == 1){  // starting with Kadykunde
    x = 400;
    y += 576 - bbox_top;
    vspeed = 20;
    attack = 4;
    
    //Visual
    image_xscale = 0.75;
    image_yscale = 0.75;
    image_blend = c_gray;
    depth = 100;
    with (objFinalRNGDie){
        depth = 101;
        grow = false;
        shrink = true;
        appearLerp = 0;
    }
}
scrFinalUpdateFarthest();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Summon Klazen
if (instance_exists(objPlayer))
    instance_create(400, -48, objFinalKirby);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Summon Smartkin
if (instance_exists(objPlayer)){
    instance_create(clamp(objPlayer.x, 176, 624), 0, objFinalKnight);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset attack and position post-dev appearance
if (instance_exists(objPlayer)){
    hspd = random_range(-2, 2);
    vspd = random_range(2.1, 3.4);
    yCent = -120;
    attack = -1;
    movementLerp = 0;
    counter = 0;
    xLast = x;
    yLast = yCent;
    if (attackLast &lt; 2){
        if (!instance_exists(objMakerReflector)){
            instance_create(176, 464, objMakerReflector);
            (instance_create(624, 464, objMakerReflector)).image_xscale = -1;
        }else if (attackLast &lt; 2){
            /*  // Reflectors no longer fade between attacks
            with (objMakerReflector){
                fade = 1;
                fadeTo = 1;
            }
            */
        }
    }else if (attackLast == 2){
        with (objMakerReflector){
            disappear = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (delayFrames &gt; 0 &amp;&amp; !global.dead){
    delayFrames --;
}else if (delayFrames &lt;= 0){
    switch(attack){
        case -1:
            var _destX, _destY;
            if (attackLast == 0){
                _destX = 200;
            }else if (attackLast == 1){
                _destX = 600;
            }else if (attackLast &gt;= 2){
                _destX = 400;
            }else{
                _destX = 0;
            }
            
            if (attackLast &lt;= 1){
                _destY = 160;
            }else if (attackLast &gt;= 2){
                _destY = y;
                movementLerp = 1;
            }else{
                _destY = 0;
            }
            
            //initial speed values
            if (movementLerp == 0 &amp;&amp; attackLast &lt; 2){
                hspd = 2*sign(_destX - x);
                if (y &lt; 0){vspd = 3;}
            }
            movementLerp += 0.033;
            
            if (movementLerp &gt;= 1){
                movementLerp = 0;
                attack = attackLast + 1;
                attackLast = attack;
                xCent = _destX;
                yCent = _destY;
                xLast = xCent;
                yLast = yCent;
                //delayFrames = 30;
            }else{
                xCent = lerp(xLast, _destX, sin(movementLerp*pi/2));
                yCent = lerp(yLast, _destY, sin(movementLerp*pi/2));
            }
            break;
        case 1:
            if (!(counter+1 == 1 || counter+1 == 85 || counter+1 == 210) || !global.dead){
                counter ++;
            }
            
            if (counter == 1){
                with (objFinalRNGDie){
                    grow = true;
                    shrink = false;
                }
            }
            if (counter &gt;= 85 &amp;&amp; counter &lt; 125){
                if (counter == 124){
                    xCent = 600;
                    xLast = xCent;
                }else{
                    xCent = lerp(xLast, 600, 1 - (0.5 + cos(pi*(counter-85 + 1)/40)/2));
                }
            }else if (counter &gt;= 210){
                if (counter == 210){
                    event_user(0);
                    gravity = -0.15;
                    with (objFinalRNGDie){
                        grow = false;
                        shrink = true;
                    }
                }
                if (y &lt;= -128){
                    y = -128;
                    vspeed = 0;
                    gravity = 0;
                    attack = -2;
                    /*  // No need to make the reflectors fade out
                    if (!global.dead){
                        with (objMakerReflector){
                            fade = -1;
                            fadeTo = 0.5;
                        }
                    }
                    */
                }
            }
            
            var _delay;
            if (buff()){
                _delay = 2;
            }else{
                _delay = 4;
            }
            
            if (counter &gt;= 20 &amp;&amp; counter &lt; 210 &amp;&amp; (counter mod _delay) == 0 &amp;&amp; !global.dead){
                with (instance_create(x, y-14, objFinalP1THBullet)){
                    index = 2;
                    event_user(0);
                }
                var _snd = audio_play_sound(sndMakerSampleThrow, 0, 0)
                audio_sound_pitch(_snd, random_range(1.6, 1.7));
                audio_sound_gain(_snd, 0.4, 0);
            }
            break;
        case 2:
            if (!(counter+1 == 18 || counter+1 == 85 || counter+1 == 210 || counter+1 == 260 || counter+1 == 310) || !global.dead){
                counter ++;
            }
            
            if (counter == 18){
                with (objFinalRNGDie){
                    grow = true;
                    shrink = false;
                }
            }
            if ((counter == 15 || counter == 30 || counter == 45 || counter == 140 || counter == 155 || counter == 170) &amp;&amp; !global.dead){
                var _inst;
                var _num, _spacing;
                
                if (buff()){
                    _num = 24;
                }else{
                    _num = 14;
                }
                _spacing = (360 / _num);
                
                for(var i=0; i&lt;_num; i++){
                    _inst = instance_create(x, y, objFinalP1THBullet);
                    _inst.direction = _spacing*i;
                    _inst.index = 6;
                    with (_inst)
                        event_user(0);
                }
                var _snd = audio_play_sound(sndMakerSamplePunch, 0, 0)
                audio_sound_pitch(_snd, random_range(1.4, 1.5));
                audio_sound_gain(_snd, 0.6, 0);
            }else if (counter &gt;= 85 &amp;&amp; counter &lt; 125){
                if (counter == 124){
                    xCent = 200;
                    xLast = xCent;
                }else{
                    xCent = lerp(xLast, 200, 1 - (0.5 + cos(pi*(counter-85 + 1)/40)/2));
                }
            }else if (counter &gt;= 210 &amp;&amp; counter &lt; 230){
                if (counter == 229){
                    xCent = 400;
                    yCent = 64;
                    xLast = xCent;
                    yLast = yCent;
                    with (objFinalRNGDie){
                        grow = false;
                        shrink = true;
                    }
                }else{
                    xCent = lerp(xLast, 400, 1 - (0.5 + cos(pi*(counter-210 + 1)/20)/2));   
                    yCent = lerp(yLast, 64, 1 - (0.5 + cos(pi*(counter-210 + 1)/20)/2));
                }
            }else if (counter == 260 || counter == 310 || (buff() &amp;&amp; counter == 285)){
                _inst = instance_create(x, y, objFinalP1THAttack);
                _inst.depth = depth-1;
                _inst.index = 3;
                //_inst.num values should add up to 7
                if (!buff()){
                    if (counter == 260){
                        _inst.value2 = -1;
                        _inst.ind = 0;
                        _inst.num = 3;
                    }else{ //if (counter == 310){
                        _inst.value2 = 1;
                        _inst.ind = 3;
                        _inst.num = 4;
                    }
                }else{
                    if (counter == 285){
                        _inst.value2 = -1;
                    }else{
                        _inst.value2 = 1;
                    }
                    
                    if (counter == 260){
                        _inst.ind = 0;
                        _inst.num = 3;
                    }else{
                        _inst.ind = 3;
                        _inst.num = 2;
                        if (counter == 310){
                            _inst.ind += 2;
                        }
                    }
                }
                with (_inst){
                    event_user(0);
                }
            }else if (counter &gt;= 360){
                var _summonAt = 400;
                if (counter == 360){
                    gravity = -0.15;
                }
                if (counter == _summonAt){
                    event_user(0);
                }
                if (counter &gt;= _summonAt){
                    if (yCent &lt;= -224){
                        yCent = -224;
                        vspeed = 0;
                        gravity = 0;
                        attack = -2;
                    }
                }
            }
            
            var _delay;
            if (buff()){
                _delay = 3;
            }else{
                _delay = 5;
            }
            if (counter &gt;= 20 &amp;&amp; counter &lt; 229 &amp;&amp; (counter mod _delay) == 0 &amp;&amp; !global.dead){
                var _inst;
                _inst = instance_create(x, y, objFinalP1THBullet);
                _inst.direction = random(360);
                _inst.index = 6.1;
                with (_inst){
                    event_user(0);
                }
                
                _inst = instance_create(x, y, objFinalP1THBullet);
                _inst.direction = random(360);
                _inst.index = 6.1;
                with (_inst){
                    event_user(0);
                }
                
                if ((counter mod (2*_delay)) == 0){
                    var _snd = audio_play_sound(sndMakerSampleThrow, 0, 0)
                    audio_sound_pitch(_snd, random_range(1.6, 1.7));
                    audio_sound_gain(_snd, 0.4, 0);
                }
            }
            break;
        case 3:
            if (!(counter+1 == 45 || counter+1 == 85 || counter+1 == 560) || !global.dead){
                counter ++;
            }
            
            if (global.practicing &amp;&amp; global.practiceWaypointEnd == 1){
                 if (counter == 45){
                    scrPracticeEnd();
                    attack = -2;
                 }
            }else{
                if (counter &gt;= 45 &amp;&amp; counter &lt; 85){
                    if (counter == 84){
                        xCent = 400;
                        xLast = xCent;
                        x = 400;
                        if (!global.dead){
                            counter = 0;
                            attackLast = attack;
                            attack++;
                            with (objFinalRNGDie){
                                grow = false;
                                shrink = true;
                                appearLerp = 0;
                            }
                        }
                    }else{
                        xCent = lerp(xLast, 400, 1 - (0.5 + cos(pi*(counter-45 + 1)/40)/2));
                    }
                }
            }
            break;
        case 4:
            if (global.practicing &amp;&amp; global.practiceWaypointEnd == 1){ //should never happen
                scrPracticeEnd();
            }else if (!global.dead){
                if (vspeed == 0){
                    counter ++;
                    if (counter == 1){
                        image_xscale = 0.75;
                        image_yscale = 0.75;
                        yCent -= (bbox_bottom+8);
                        vspeed = 20;
                        image_blend = c_gray;
                        depth = 100;
                        with (objFinalRNGDie){
                            depth = 101;
                        }
                        kill = false;
                        
                        if (audio_is_playing(global.currentMusic)){
                            global.musicFading = global.currentMusic;
                            global.musFadeDec = 1/40;
                            global.musicFadeEnd = "stop";
                        }else{
                            with (objWorld){
                                musicToPlay = -1;
                            }
                        }
                    }
                }else if (vspeed &gt; 0){
                    if (bbox_bottom &lt; (-8 + 20*4)){
                        var _snd = audio_play_sound(sndMakerSampleThrow, 0, 0);
                        audio_sound_pitch(_snd, random_range(1.3, 1.4));
                    }
                    
                    if (bbox_top &gt; 576){
                        image_xscale = 1;
                        image_yscale = 1;
                        y -= bbox_top - 512;
                        vspeed = 0;
                        attack = 5;
                        kill = true;
                        if (!global.dead){
                            instance_create(0, 0, objFinalKadyCtrl);
                        }
                    }
                }
            }
            break;
        case 5:
            if (vspeed &gt; 0 &amp;&amp; trailY[(trailPieces-1)] &gt; 700){
                instance_destroy();
            }
            break;
    }
}

if (attack == -1 || attack == 1 || attack == 2){
    if (global.dead){
        gravity = -0.15;
    }
    hoverCounter ++;
    
    var _reverseAmt = 0.065;
    var _accelAmt = 0.035;
    var _limitDist = 32;
    var _limitCorrection = 0.275;
    var _glideDist = 12;  // will not change speed if within this x/y distance of target (allows for smoother movement)
    
    var _hMoveDir = sign(hspd);
    var _hMoveMag = abs(hspd);
    var _xSide = sign(x - xCent);  // sign(xDisplace);
    var _xDist = abs(x - xCent);   // abs(xDisplace);
    
    if (_xDist &gt; _limitDist || _hMoveMag &gt; 5){  // prevent moving too far away from center
        hspd += _limitCorrection * (-_xSide);
    }else if (_xDist &gt; _glideDist){
        if (_xSide == _hMoveDir &amp;&amp; abs(_xDist) &gt;= (10 - abs(hspd))){  // moving away from target
            hspd += _reverseAmt * (-_xSide);
        }else{  // moving towards target
            hspd += _accelAmt * (-_xSide);
        }
    }
    
    var _yTarget = yCent + 32*sin(hoverCounter * pi/64);
    var _vMoveDir = sign(vspd);
    var _vMoveMag = abs(vspd);
    var _ySide = sign(y - _yTarget);  // sign(yDisplace);
    var _yDist = abs(y - _yTarget);   // abs(yDisplace);
    
    if (_yDist &gt; _limitDist || _vMoveMag &gt; 5){  // prevent moving too far away from center
        vspd += _limitCorrection * (-_ySide);
    }else if (_yDist &gt; _glideDist){
        if (_ySide == _vMoveDir &amp;&amp; abs(_yDist) &gt;= (10 - abs(vspd))){  // moving away from target
            vspd += _reverseAmt * (-_ySide);
        }else{  // moving towards target
            vspd += _accelAmt * (-_ySide);
        }
    }
    
    // cap speed
    var _lerpVal = 0;
    var _distCur = point_distance(x, y, xCent, yCent);
    var _distNext = point_distance(x+hspd, y+vspd, xCent, yCent);
    if (_distNext &gt; _distCur){
        _lerpVal = 0;
    }else{
        _lerpVal = clamp((_distCur/54), 0, 1);
    }
    
    var _spdCap = lerp(5.5, 8.5, _lerpVal);
    var _spd = sqrt(sqr(hspd) + sqr(vspd));
    if (_spd &gt; _spdCap){
        var _ratio = _spdCap/_spd;
        hspd *= _ratio;
        vspd *= _ratio;
    }
    
    x += hspd;  //xDisplace += hspd;
    y += vspd;  //yDisplace += vspd;
    yCent += vspeed;
    /*x = xCent + xDisplace;
    y = yCent + yDisplace;*/
}

// manage visual effects  +  iframe generousity
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_blend == c_white){
    if (bbox_bottom &gt; 0 &amp;&amp; image_alpha &gt;= 1){
        if (iframes &gt; 0){
            if (iframes &lt;= iframesWhenHit/3)
                storedHit = true;
        }else{
            scrFinalScribbleDamage();
        }
    }
    with (other){
        x = xprevious;
        y = yprevious;
        scrMoveContactObject(sign(hspeed), 0, abs(hspeed), other);
        scrMoveContactObject(0, sign(vspeed), abs(vspeed), other);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_alpha &gt;= 1 &amp;&amp; kill){
    scrKillPlayer();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choose who to summon
if (!instance_exists(objPlayer))
    exit;
var _summonCheck = -1;
if (!global.practicing || global.practiceWaypointStart != 0){
    _summonCheck = choose(0, 1, 2);
    while (summoned[_summonCheck mod 3]){
        _summonCheck ++;
        if (_summonCheck &gt;= 6){
            break;
        }
    }
}else{
    if (global.practiceFinalBossVal[practiceSummonCount] == 0){ //not set
        _summonCheck = choose(0, 1, 2);
        //if we are choosing randomly for the first appearance (index 0 == 0) and we have one set for the second appearance (index 1 != 0), ensure we don't choose the second character to be summoned
        //if we are choosing randomly for the second appearance (index 1 == 0), then the second condition will never trigger, since `(_summonCheck mod 3)` will always range [0-2] and `index 1  -  1` -&gt; `0  -  1` -&gt; `-1`
        if (summoned[_summonCheck mod 3] || _summonCheck == (global.practiceFinalBossVal[1]-1)){
            _summonCheck = ((_summonCheck + choose(1, -1)) + 3) mod 3;
        }
    }else{
        _summonCheck = global.practiceFinalBossVal[practiceSummonCount] - 1;
        if (_summonCheck &lt; 0 || _summonCheck &gt; 2){
            scrPracticeEnd();
        }
    }
    practiceSummonCount ++;
}
switch(_summonCheck mod 3){
    case 0:
        instance_create(576, 0, objFinalLarryPipe);
        break;
    case 1:
        if (attack == 1){
            alarm[1] = 60;
        }else{
            alarm[1] = 50;
        }
        break;
    case 2:
        if (buff()){  // denser barrage before
            alarm[2] = 60;
        }else{
            alarm[2] = 30;
        }
        break;
}

summoned[_summonCheck] = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
