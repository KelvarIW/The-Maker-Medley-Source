<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTriggerMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer = -0.5;
timerEvent = timer;
startTime = 0;
endTime = 9999; //after this point, the music won't sync and the timer will disappear (should be after the last attack)
bgm = noone;
bgmSource = -1;
bgmFadeout = false;
bgmPitch = 40;
active = false;
shownTimer = -4;
createIdent = true;

//used to allow aimed attacks to function during the post-death slowdown
playerX = 0;
playerY = 0;

//Practice Mode Stuff
usePracticeSystem = true; //whether to use the parent's practice mode system when practicing
usePracticeEnding = true;
progressMarkers = 1;
progressMarker[0] = 0;
currentBossProgress = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (audio_exists(bgmSource))
    audio_stop_sound(bgmSource);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (active){
    if (global.deathSlow &gt;= 1 || (timer &gt; startTime &amp;&amp; global.deathSlow &gt; 0) || timer &gt;= endTime){
        if (usePracticeSystem &amp;&amp; global.practicing &amp;&amp; timer &lt; progressMarker[clamp(global.practiceWaypointStart, 0, progressMarkers-1)] - 0.5){ //- 0.5 because the timer moves 0.5 back if starting at or beyond the second waypoint
            timer = progressMarker[clamp(global.practiceWaypointStart, 0, progressMarkers-1)];
            event_user(0);
        }else{
            timer += global.deathSlow/2;
        }
        var _tELast = timerEvent;
        timerEvent = floor(timer*2)/2;
        if (instance_exists(objPlayer)){
            playerX = objPlayer.x;
            playerY = objPlayer.y;
        }
        //Timer
        if (!global.practicing || !usePracticeSystem || (global.practicing &amp;&amp; timerEvent &lt; progressMarker[clamp(global.practiceWaypointEnd, 0, progressMarkers-1)])){
            if (timer &gt;= startTime &amp;&amp; timer &lt; endTime){
                if (!instance_exists(shownTimer)){
                    shownTimer = instance_create(0, 0, objMakerTimer)
                    with (shownTimer){
                        if (!global.practicing || !other.usePracticeSystem){
                            frameMax = 2*(other.endTime - other.startTime);
                            frameCurrent = frameMax - 2*(other.timer - other.startTime);
                        }else{
                            frameMax = 2 * (other.progressMarker[clamp(global.practiceWaypointEnd, 0, other.progressMarkers-1)] - other.progressMarker[clamp(global.practiceWaypointStart, 0, other.progressMarkers-1)]);
                            frameCurrent = frameMax - 2*(other.timer - other.progressMarker[clamp(global.practiceWaypointStart, 0, other.progressMarkers-1)]);
                        }
                    }
                }
                if (createIdent &amp;&amp; !global.muteMusic &amp;&amp; global.musicLevel &gt; 0 &amp;&amp; global.volumeLevel &gt; 0){
                    scrIdentMusic(bgmSource);
                    createIdent = false;
                }
            }
        }
        
        // Call for attacks
        if (timerEvent != _tELast &amp;&amp; (!usePracticeSystem || !global.practicing || (global.practicing &amp;&amp; timerEvent &lt; progressMarker[clamp(global.practiceWaypointEnd, 0, progressMarkers-1)]))){
            event_user(1);
        }
        // Sync music; Create identifier and timer; Track progress
        if (!global.practicing || !usePracticeSystem || (global.practicing &amp;&amp; timerEvent &lt; progressMarker[clamp(global.practiceWaypointEnd, 0, progressMarkers-1)])){
            if (timer &gt;= 0 &amp;&amp; timer &lt; endTime &amp;&amp; !global.dead &amp;&amp; !global.muteMusic &amp;&amp; global.musicLevel &gt; 0 &amp;&amp; global.volumeLevel &gt; 0){
                if (bgmSource &gt;= 0 &amp;&amp; !audio_is_playing(bgmSource)){
                    bgm = scrPlayMusic(bgmSource, 0, 0);
                }
            }
            if (bgm &gt;= 0 &amp;&amp; timer &gt;= 0 &amp;&amp; abs(audio_sound_get_track_position(bgm) - (timer-0.5)/25) &gt; 0.12)
                audio_sound_set_track_position(bgm, (timer-.5)/25);
        }
        //Progress Tracking
        if (usePracticeSystem){
            if (!global.practicing){
                if (!global.dead &amp;&amp; currentBossProgress &lt; progressMarkers - 1 &amp;&amp; timer &gt;= progressMarker[clamp(floor(currentBossProgress+1), 0, other.progressMarkers-1)]){
                    currentBossProgress ++;
                }
            }else{
                if (usePracticeEnding &amp;&amp; !global.dead &amp;&amp; timer &gt;= progressMarker[clamp(global.practiceWaypointEnd, 0, progressMarkers-1)] - 0.5){
                    scrPracticeEnd();
                    active = false;
                }
            }
        }
    }
    if (global.deathSlow &lt; 1){
        with (objMakerTimer){
            stop = true;
        }
        with (objMakerFruit){
            if (friction &lt;= abs(speed)/40){
                friction = speed/40;
                speed -= friction;
            }
            gravity = 0;
            alarm[0] = -1; //stop attacks in some children
        }
        with (objMakerTHBullet){
            if (object_index != objGeezerMadBullet){
                if (friction &lt;= abs(speed)/40){
                    friction = speed/40;
                    speed -= friction;
                }
                gravity = 0;
            }
        }
        
        //fight-specific
        with (objChaozC03bNew2){
            if (friction == 0){
                friction = speed/40;
                speed *= global.deathSlow;
            }
        }
        
        
        if (!bgmFadeout){
            audio_sound_gain(bgm,0,800);
            bgmFadeout = true;
        }else if (audio_sound_get_gain(bgm) &lt;= 0){audio_stop_sound(bgm);}
        if (bgmPitch &gt; 0){
            bgmPitch --;
            audio_sound_pitch(bgm,(bgmPitch+40)/(2*40));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacks
/*
//One-time events
switch(timerEvent){
    case 0:
        break;
}
//Repeated events
if (timerEvent &gt; 0 &amp;&amp; timerEvent &lt;= 100 &amp;&amp; timerEvent mod 10 == 1){
    //throw fruit
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Put adjustments for Practice Mode here
/*
if (global.practicing){
    
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (audio_exists(bgmSource))
    audio_stop_sound(bgmSource);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do nothing by default
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
