<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawXOff = 0;
drawYOff = 0;

logoColors = 10;
for (var i=(logoColors-1); i&gt;=0; i--){
    logoCol[i] = merge_colour(global.titleColorDB, global.titleColorR, i/(logoColors-1));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//room decor

// TMM pixelized logo
var _drawX = 800 + 400;
var _drawY = 608 + 80;
var _scale = 4;

var _sprWidth = sprite_get_width(sprClearLogo);  // NOTE: top and bottom rows are transparent;
var _sprHeight = sprite_get_height(sprClearLogo);  // NOTE: top and bottom rows are transparent;
var _drawWidth = (_scale * _sprWidth);

var _moveDelay = 10;  // must be an even number
var _colPosRange = (2*logoColors);
var _colPos = (ceil(global.countPersistent/_moveDelay) mod (_colPosRange));
var _segmentOffset = 0;
if (global.countPersistent &lt; _moveDelay/2){
    _segmentOffset = -1;  // smaller movement (still fits with pixel size)
}
var _colInd = 0;  // index in array; set in "for" loop;  range: [0, logoColors)

//draw_sprite_ext(sprClearLogo, 1, _drawX + drawXOff, _drawY + drawYOff, _scale, _scale, 0, c_white, 1);  // debug, remove

// colored outline
for (var i=_segmentOffset; i&lt;_sprHeight; i+=2){
    if (_colPos &gt;= logoColors){
        _colInd = (logoColors-1) - (_colPos - logoColors);  // (logoColors-1) -&gt; 0
    }else{
        _colInd = _colPos;  // 0 -&gt; (logoColors-1)
    }
    draw_sprite_part_ext(sprClearLogo, 1, 0, max(i, 0), _sprWidth, 2 + min(i, 0), _drawX - (_scale * floor(_sprWidth/2)), _drawY + (_scale * max(i, 0)), _scale, _scale, logoCol[_colInd], 1);
    _colPos -= 1;
    if (_colPos &lt; 0){_colPos += _colPosRange;}
}

// main logo
draw_sprite_ext(sprClearLogo, 0, _drawX - (_scale * floor(_sprWidth/2)) + drawXOff, _drawY + drawYOff, _scale, _scale, 0, c_white, 1);

//props
draw_background_ext(tlMakerTree, 800 + -16 + drawXOff, 608 + 344 + drawYOff, 2.5, 2.5, 0, c_white, 1);
draw_background_ext(tlMakerTree, 800 + 656 + drawXOff, 608 + 344 + drawYOff, 2.5, 2.5, 0, c_white, 1);
draw_sprite_ext(sprMakerFlowerProp,  0, 800 + 160 + drawXOff, 608 + 576 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprMakerFlowerProp,  0, 800 +  114 + drawXOff, 608 + 576 + drawYOff, 2, 2, 0, c_white, 1);
draw_sprite_ext(sprMakerFlowerProp2, 0, 800 + 640 + drawXOff, 608 + 576 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprMakerFlowerProp2, 0, 800 + 686 + drawXOff, 608 + 576 + drawYOff, 2, 2, 0, c_white, 1);
draw_sprite_part(sprMakerStatueProp, 0, 0, 30, 32, 64, 800 + (400-16) + drawXOff, 608 + (576-64) + drawYOff);
draw_sprite_ext(sprMakerCouchProp, 0, 800 + 400 + drawXOff, 608 + 576 + drawYOff, 1, 1, 0, c_white, 1);

draw_sprite_ext(sprClearLobbyPodium, 0,        212 + drawXOff   +0.5, 608 + 520 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprClearLobbyPodium, 0,        588 + drawXOff   +0.5, 608 + 520 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprClearLobbyPodium, 0, 1600 + 212 + drawXOff   +0.5, 608 + 520 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprClearLobbyPodium, 0, 1600 + 588 + drawXOff   +0.5, 608 + 520 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprClearLobbyPodium, 0, 800 + 212 + drawXOff   +0.5, 0 + 520 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprClearLobbyPodium, 0, 800 + 588 + drawXOff   +0.5, 0 + 520 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprClearLobbyPodium, 0, 800 + 212 + drawXOff   +0.5, 1216 + 520 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprClearLobbyPodium, 0, 800 + 588 + drawXOff   +0.5, 1216 + 520 + drawYOff, 1, 1, 0, c_white, 1);

// corners and lamps (used in the same spot on three floors)
for (var i=0; i&lt;3; i++){
    draw_sprite_ext(sprMakerLampProp, abs(2 - (2 + global.count div 4) mod 4), (800*i) + 272 + drawXOff, 608 + 576 + drawYOff, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprMakerLampProp, abs(2 - (2 + global.count div 4) mod 4), (800*i) + 528 + drawXOff, 608 + 576 + drawYOff, 1, 1, 0, c_white, 1);
    
    draw_sprite_ext(sprClearRedCorner, 0, (800*i) +  48 + drawXOff, 608 +  48 + drawYOff, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprClearRedCorner, 1, (800*i) + 752 + drawXOff, 608 +  48 + drawYOff, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprClearRedCorner, 2, (800*i) +  48 + drawXOff, 608 + 560 + drawYOff, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprClearRedCorner, 3, (800*i) + 752 + drawXOff, 608 + 560 + drawYOff, 1, 1, 0, c_white, 1);
}
// top-center floor
draw_sprite_ext(sprMakerLampProp, abs(2 - (2 + global.count div 4) mod 4), 800 + 272 + drawXOff, 576 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprMakerLampProp, abs(2 - (2 + global.count div 4) mod 4), 800 + 528 + drawXOff, 576 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprClearRedCorner, 0, 800 +  48 + drawXOff,  48 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprClearRedCorner, 1, 800 + 752 + drawXOff,  48 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprClearRedCorner, 2, 800 +  48 + drawXOff, 560 + drawYOff, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprClearRedCorner, 3, 800 + 752 + drawXOff, 560 + drawYOff, 1, 1, 0, c_white, 1);

// lamp lights
if (drawXOff == 0){  // light should not cast a shadow  :P
    draw_set_blend_mode(bm_add);
    for (var i=0; i&lt;3; i++){
        draw_sprite(sprClearLobbyLight, 0, (800*i) + 272 + drawXOff, 608 + 520 + drawYOff);
        draw_sprite(sprClearLobbyLight, 0, (800*i) + 528 + drawXOff, 608 + 520 + drawYOff);
    }
    draw_sprite(sprClearLobbyLight, 0, 800 + 272 + drawXOff, 520 + drawYOff);
    draw_sprite(sprClearLobbyLight, 0, 800 + 528 + drawXOff, 520 + drawYOff);
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
