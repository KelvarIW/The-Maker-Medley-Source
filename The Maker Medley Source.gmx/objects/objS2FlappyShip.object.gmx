<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprS2FlappyShip</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>openAngle = -120;
image_speed = 0;
image_index = 2;
active = false;
moving = false;
frozen = false; //Stage 4
fadeOut = false; //Stage 4
pHeadXOff = 0;
pHeadScale = 1;
actionDelay = -1;
releasedJump = false; //prevent cancelling
upAlpha = 0;
drawText = false;
if (room == rStage02Flappy){
    leftLimit = 250;
}else{
    leftLimit = 1008;
}

//wasInRift = false;
visible = (room != rStage04New_4);
drawXOff = 0;
drawYOff = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!fadeOut &amp;&amp; place_meeting(x, y, objBlock)){
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawButton = false;
if (global.dead){
    if (abs(angle_difference(image_angle, direction - 180)) &gt;= 0.5){
        image_angle -= max(0.5, abs(angle_difference(image_angle, direction - 180)/4))*sign(angle_difference(image_angle, direction - 180));
    }
    //appear to be flying towards the camera
    image_xscale = min(1.45, image_xscale + 0.0075);
    image_yscale = image_xscale;
    image_alpha = 2-image_xscale;
}else if (active &amp;&amp; !frozen){
    if (actionDelay &lt;= 0){
        if (openAngle &lt; 0){
            openAngle += 3;
            if (openAngle &gt;= 0){
                openAngle = 0;
                active = true;
                global.flappyStarted = true;
                sprite_index = sprS2FlappyShipActive;
                x -= 20;
                global.storedVal[0] = pHeadXOff;
                global.storedVal[1] = pHeadScale;
            }
        }else if (!moving){
            if (scrButtonCheckPressed(global.jumpButton)){
                moving = true;
                hspeed = 4.5;
                gravity = 0.4;
                repeat(irandom_range(7,9)){
                    with (instance_create(x - 22.5, y+8, objMakerCirclePart)){
                        color = c_ltgray;
                        image_alpha = random_range(0.7, 0.875);
                        vspeed = random_range(2.3, 3.4);
                        hspeed = random_range(-2.5, 2.5);
                        gravity = random_range(-0.1, -0.05);
                        fade = random_range(-0.05, -0.07);
                        rad = random_range(2, 3.5);
                        radDec = 0;
                    }
                }
            }
        }
        if (moving){
            if (instance_exists(objS2FlappyCtrl) &amp;&amp; objS2FlappyCtrl.counterAlpha &lt; 1){
                objS2FlappyCtrl.counterAlpha += 0.04;
            }
            if (instance_exists(objS4FlappyCtrl) &amp;&amp; objS4FlappyCtrl.counterAlpha &lt; 1){
                objS4FlappyCtrl.counterAlpha += 0.04;
            }
            if ((y &gt;= 608 || y &lt;= 0 || x &gt; room_width) &amp;&amp; !fadeOut &amp;&amp; !global.debugNoDeath){
                event_user(0); //die
            }else{
                if (scrButtonCheckPressed(global.jumpButton)){
                    vspeed = -8.5;
                    releasedJump = false;
                    audio_stop_sound(sndMakerSampleThrow);
                    audio_play_sound(sndMakerSampleThrow, 0, 0);
                }
            }
            if (scrButtonCheckReleased(global.jumpButton) &amp;&amp; !releasedJump){
                if (vspeed &lt; 0){
                    vspeed *= 0.45;
                }
                releasedJump = true;
            }
            if (instance_exists(objS2FlappyCtrl)){
                objS2FlappyCtrl.xPos += max(0, (x-leftLimit)/15) + hspeed;
            }
            if (instance_exists(objS4FlappyCtrl)){
                objS4FlappyCtrl.xPos += max(0, (x-leftLimit)/15) + hspeed;
            }
        }
    }else
        actionDelay --;
}else if (!active &amp;&amp; !frozen){
    if (instance_exists(objPlayer) &amp;&amp; objPlayer.y &gt; y+11 &amp;&amp; abs(objPlayer.x - (x-20)) &lt;= 8){
        drawButton = true;
        if (scrButtonCheckPressed(global.upButton)){
            var t_player;
            t_player = instance_create(objPlayer.x, y + 15, objS2FlappyJumpKid);
            t_player.image_xscale = objPlayer.xScale;
            instance_destroy(objPlayer);
            with (objMakerCamera)
                instance_destroy();
        }
    }
}

//Stage 4 flashback ending
if (active &amp;&amp; frozen){
    if (fadeOut){
        image_alpha -= 0.035;
        if (image_alpha &lt;= 0){
            instance_destroy();
        }
    }
}

//Change image_angle
if (moving &amp;&amp; !frozen){
    if (abs(angle_difference(image_angle, direction)) &gt;= 0.5){
        image_angle -= max(0.5, abs(angle_difference(image_angle, direction)/4))*sign(angle_difference(image_angle, direction));
    }
}

// Up Arrow indicator
if (drawButton){
    upAlpha = min(1, upAlpha + 0.04);
}else{
    upAlpha = max(0, upAlpha - 0.08);
}

/*
//Stage 4 non-killing rift particles  --  Removed
if (room == rStage04New_4 &amp;&amp; !wasInRift &amp;&amp; place_meeting(x, y, objS4NewRiftNokill)){
    var _col;
    _col = instance_place(x, y, objS4NewRiftNokill);
    if (instance_exists(_col)){
        repeat(irandom_range(5, 7)){
            with (instance_create(x, y, objMakerCirclePart)){
                color = c_white;
                direction = other.direction + irandom_range(167, 195);
                gravity = random_range(0.06, 0.11);
                speed = random_range(3.7, 5.5);
                rad = random_range(7, 10);
                rift = true;
            }
        }
        wasInRift = true;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// die
if (!(global.dead || global.debugNoDeath || instance_exists(objPlayer))){
    var t_kidOff = scrChangeOrigin(0, 0, 7*pHeadScale, 7, image_angle);
    instance_create(x + t_kidOff[0] + pHeadXOff*dcos(image_angle), y + t_kidOff[1] - pHeadXOff*dsin(image_angle), objPlayer);
    scrKillPlayer();
    global.dead = true;
    hspeed = -2;
    var _pipe;
    _pipe = instance_place(x, y, objS2FlappyPipe);
    if (_pipe != noone &amp;&amp; !place_meeting(x, yprevious - _pipe.scale + _pipe.vspeed, _pipe)){ //hit top of pipe
        if (sign(vspeed) == _pipe.scale){  // _pipe.scale is really the pipe's side  --  -1 = top; 1 = bottom
            vspeed = vspeed * (-2/3);
            if (sign(_pipe.vspeed) == -(_pipe.scale)){
                vspeed += _pipe.vspeed;
            }
        }else{
            if (sign(_pipe.vspeed) == -(_pipe.scale)){ //should be true, but we'll check it regardless
                vspeed += _pipe.vspeed;
            }
        }
    }else{
        vspeed = max(vspeed/2, vspeed);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (persistent &amp;&amp; fadeOut &amp;&amp; room != rStage04New_4){ //not going to rFinalBoss_1
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != rStage02Flappy &amp;&amp; room != rStage04New_4 &amp;&amp; room != rFinalBoss_1)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (openAngle != 0){
    if (active){
        draw_sprite_ext(sprPlayerHead, 0, x + pHeadXOff - 7*pHeadScale - 20, y - 4, pHeadScale, 1, 0, c_white, image_alpha);
    }
    draw_sprite(sprS2FlappyShip, 0, x, y);
    draw_sprite_ext(sprS2FlappyShip, 1, x, y, 1, 1, openAngle, c_white, 1);
}else{
    var t_kidOff, t_fruitOff;
    t_kidOff = scrChangeOrigin(0, 0, 7*pHeadScale, 7, image_angle);
    /*
    t_fruitOff = scrChangeOrigin(40, 24, 20, 24, image_angle);
    if (!global.dead &amp;&amp; !fadeOut){
        draw_sprite_ext(sprPlayerHead, 0, x - 20 + t_kidOff[0] + 3*dcos(image_angle + 270) + pHeadXOff*dcos(image_angle), y + t_kidOff[1] - 3*dsin(image_angle + 270) - pHeadXOff*dsin(image_angle), pHeadScale, 1, image_angle, c_white, image_alpha);
    }
    draw_sprite_ext(sprS2FlappyShip, 2, x + t_fruitOff[0] - 20, y + t_fruitOff[1], image_xscale, image_yscale, image_angle, c_white, image_alpha);
    */
    if (!global.dead &amp;&amp; !fadeOut){
        draw_sprite_ext(sprPlayerHead, 0, x + t_kidOff[0] + 3*dcos(image_angle + 270) + pHeadXOff*dcos(image_angle), y + t_kidOff[1] - 3*dsin(image_angle + 270) - pHeadXOff*dsin(image_angle), pHeadScale, 1, image_angle, c_white, image_alpha);
    }
    draw_sprite_ext(sprite_index, 2, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha);
    
}

if (drawXOff == 0 &amp;&amp; upAlpha &gt; 0){
    draw_sprite_ext(sprS2FlappyPressUp, 0, x - 18, y - 28 - 8*upAlpha, 1, 1, 0, c_white, upAlpha);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
