<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDotkidOutlined</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>animTimer = -3;
barColor = make_color_hsv(150, 170, 220);
//color2 = make_color_hsv(235, 146, 150);
color1 = make_color_hsv(155, 194, 105);
color2 = make_color_hsv(153, 191, 135);
color3 = make_color_hsv(150, 186, 165);
MOffset = 0;
finalStage = (room == rFinalBoss_4);
//CLEAR
letter[9] = "R";
letter[8] = "A";
letter[7] = "E";
letter[6] = "L";
letter[5] = "C";

if (finalStage){         // GAME#CLEAR
    letterCount = 1;
    letter[4] = "E";
    letter[3] = "M";
    letter[2] = "A";
    letter[1] = "G";
    letter[0] = "";
}else{                   //STAGE#CLEAR
    letterCount = 0;
    letter[4] = "E";
    letter[3] = "G";
    letter[2] = "A";
    letter[1] = "T";
    letter[0] = "S";
}

sineVal = 0;

xoff = 90;
global.canRestart = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.canRestart = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(room){
    case rChaozB:
        room_goto(rStage1to2Transition);
        var _screenFade;
        _screenFade = instance_create(0, 0, objScreenFade);
        _screenFade.color = c_black;
        _screenFade.persistent = true;
        _screenFade.alpha = 1;
        _screenFade.fade = 1;
        _screenFade.fadeOut = 0.02;
        _screenFade.roomTo = rStage1to2Transition;
        break;
    case rGeezerHitchcock:
        room_goto(rStage03Hub);
        var _screenFade;
        _screenFade = instance_create(0, 0, objScreenFade);
        _screenFade.color = c_black;
        _screenFade.persistent = true;
        _screenFade.alpha = 1;
        _screenFade.fade = 1;
        _screenFade.fadeOut = 0.02;
        _screenFade.roomTo = rStage03Hub;
        break;
    case rFinalBoss_4:
        room_goto(rTMM_Ending);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1] = 150;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>animTimer ++;
if (animTimer == 0){
    audio_play_sound(sndMakerStageClear, 0, 0);
}
if (animTimer &gt;= 60){
    MOffset ++;
    if (MOffset &gt;= 256){MOffset -= 257;}
    sineVal += pi/40;
    xoff -= 1.5;
    if (letterCount &lt; 10){
        if (!finalStage || letterCount &gt;= 5){
            letterCount += 0.18;
        }else{
            var _prev = letterCount;
            letterCount += 0.08;
            if (floor(letterCount) != floor(_prev)){ //finished generating a letter
                audio_play_sound(sndMakerSamplePunch, 0, 0);
                if (!instance_exists(objFinalScreenshake)){
                    instance_create(0, 0, objFinalScreenshake);
                }
                with (objFinalScreenshake){
                    shake = 5;
                }
                depth = -600;
            }
        }
        if (letterCount &gt;= 10){
            letterCount = 10;
            alarm[0] = 90;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.canRestart = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (animTimer &gt;= 0){
    if (animTimer &lt; 52){
        //if (animTimer &gt;= 0){
            draw_set_color(color1);
            draw_circle(view_xview + 400, view_yview + 304, 175*sin(min(animTimer,12) * pi/20), false);
        //}
        if (animTimer &gt; 12){
            draw_set_color(color2);
            draw_circle(view_xview + 400, view_yview + 304, 300*sin(min(animTimer - 12,12) * pi/20), false);
        }
        if (animTimer &gt; 24){
            draw_set_color(color3);
            draw_circle(view_xview + 400, view_yview + 304, 565*sin(min(animTimer - 24,10) * pi/20), false);
        }
        if (animTimer &gt; 34){// &amp;&amp; animTimer &lt; 48){
            draw_sprite_ext(sprMakerClearBar, 0, view_xview + 800 - (872)*(animTimer - 34)/12, view_yview + 76, 4, 4, 0, barColor, 1);
            draw_sprite_ext(sprMakerClearBar, 0, view_xview + (872)*(animTimer - 34)/12, view_yview + 228, -4, 4, 0, barColor, 1);
            draw_sprite_ext(sprMakerClearBar, 0, view_xview + 800 - (872)*(animTimer - 34)/12, view_yview + 380, 4, 4, 0, barColor, 1);
            draw_sprite_ext(sprMakerClearBar, 0, view_xview + (872)*(animTimer - 34)/12, view_yview + 532, -4, 4, 0, barColor, 1);
        }
    }else{ //if (animTimer &gt;= 48){
        draw_set_color(barColor);
        draw_rectangle(view_xview, view_yview, view_xview + 800, view_yview + 608, false);
        draw_set_alpha(0.125*min(animTimer-47, 40)/40);
        draw_background_tiled(bkMakerStageClear, -256 + MOffset, -1*MOffset);
        draw_set_alpha(1);
        
        if (animTimer &gt;= 60){
            if (!surface_exists(global.sharedSurf)) global.sharedSurf = surface_create(800, 608);
            if (surface_exists(global.sharedSurf)){
                surface_set_target(global.sharedSurf);
                draw_clear_alpha(c_black, 0);
                
                //Colored Text
                draw_set_halign(fa_center);
                draw_set_valign(fa_middle);
                draw_set_font(fStageClear);
                
                var _resetShader = false;
                draw_set_color(c_white);
                if (global.rainbowScrollEnabled){
                    shader_set(shdRainbowScroll);
                    shader_set_uniform_f(global.rainbowScrollHandle, xoff);
                    _resetShader = true;
                }else{
                    draw_set_color(make_colour_hsv((((global.countPersistent mod 800)/800) * 255), 255, 255));
                }
                
                var _min = 0;
                var _yAmp = 30;
                var _textYSineDiff = (2*pi/5);
                var _topTextScale = 0.75;
                var _topTextSpacing = 70;
                var _topTextY = 134;
                var _botTextY = 274;
                var _botTextScale = _topTextScale;
                var _botTextSpacing = _topTextSpacing;
                if (finalStage){  // G - A - M - E
                    _min = 1;
                    _topTextSpacing = 120;
                    _topTextScale = 1.75;
                    _botTextY += 60;
                }
                for(var i=min(floor(letterCount-1), 4); i&gt;=_min; i--;){
                    draw_text_transformed(400 + ((i - _min) - (4 - _min)/2)*_topTextSpacing, _topTextY + _yAmp*sin(sineVal + i*_textYSineDiff), letter[i], _topTextScale, _topTextScale, 0);
                }
                if (letterCount &gt;= 6){
                    for(var i=floor(letterCount-6); i&gt;=0; i--;){
                        draw_text_transformed(400 + (i - 2)*_botTextSpacing, _botTextY + _yAmp*sin(sineVal + i*_textYSineDiff), letter[i+5], 0.75, 0.75, 0);
                    }
                }
                if (letterCount &gt;= _min &amp;&amp; letterCount != floor(letterCount)){
                    if (letterCount &lt;= 5){
                        if (finalStage){    // G - A - M - E
                            draw_text_transformed(400 + ((floor(letterCount) - _min) - (4 - _min)/2)*_topTextSpacing, _topTextY + _yAmp*sin(sineVal + ceil(letterCount-1)*_textYSineDiff), letter[ceil(letterCount)-1], sin(pi/2 * (letterCount mod 1))*_topTextScale, sin(pi/2 * (letterCount mod 1))*_topTextScale, 0);
                        }else{
                            draw_text_transformed(400 + ((floor(letterCount) - _min) - (4 - _min)/2)*_topTextSpacing, _topTextY + _yAmp*sin(sineVal + ceil(letterCount-1)*_textYSineDiff), letter[ceil(letterCount)-1], (letterCount mod 1)*_topTextScale, (letterCount mod 1)*_topTextScale, -60*(1 - (letterCount mod 1)) );
                        }
                    }else{
                        draw_text_transformed(400 + floor(letterCount-7)*_botTextSpacing, _botTextY + 30*sin(sineVal + ceil(letterCount-6)*_textYSineDiff), letter[ceil(letterCount)-1], (letterCount mod 1)*_botTextScale, (letterCount mod 1)*_botTextScale, -60*(1 - (letterCount mod 1)) );
                    }
                }
                if (_resetShader){
                    shader_reset();
                }else{
                    draw_set_color(c_white);
                }
                surface_reset_target();
                
                //text outline
                var _prec = 12;
                var _angInc = (360/_prec);
                
                for (var i=0; i&lt;12; i++){
                    draw_surface_ext(global.sharedSurf, view_xview + lengthdir_x(4, (i + 0.5)*_angInc), view_yview + lengthdir_y(4, (i + 0.5)*_angInc), 1, 1, 0, c_black, 1);
                }
                
                //main surface
                draw_surface(global.sharedSurf, view_xview, view_yview);
            }
        }
        if (animTimer &gt; 180){
            if (animTimer &lt; 260){
                draw_set_alpha((animTimer - 180)/80);
            }
            draw_set_color(c_black);
            draw_rectangle(view_xview, view_yview, view_xview + 800, view_yview + 608, false);
            draw_set_color(c_white);
            draw_set_alpha(1);
        }
    }
}

draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
