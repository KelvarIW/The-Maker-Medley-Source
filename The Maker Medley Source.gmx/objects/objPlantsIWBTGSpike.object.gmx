<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlantsIWBTGSpike</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objPlantsEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
scaleTo = 1;
moveDelay = 45;
spd = 0;
maxHeight = 40;  // 40 pixels above ystart
heightScaleMult = 1;
heightScaleFluct = 0.25;
heightNormalized = 0;

//based on the height of the spike when it crosses the boundary
killingScaleMult = 1;  // from height 
killingShadowYOff = 40+28;
killingHeight = 0;
killingYStart = y;
killingInitAngle = 0;
killingAngleCounter = 0;
killingSFX = -1;
image_angle = -45;
scrPlantsGoreInit(3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    if (!killing){
        var _attackingPrev;
        _attackingPrev = attacking;
        scrPlantsEnemyStep();
        if (instance_exists(attacking)){
            if (attacking.dead || scrPlantsPlantTooLow(attacking)){
                attacking = noone;
            }
            if (instance_exists(attacking) &amp;&amp; attacking != _attackingPrev){
                attackingTimer = 14;
            }
        }
        if (!instance_exists(attacking) || attacking.dead){
            if (y &gt; ystart - 40){
                if (image_angle &gt; -45){
                    image_angle = max(-45, image_angle-9);
                }
            }else if (image_angle != 0){
                if (abs(image_angle) &lt;= 9){
                    image_angle = 0;
                }else{
                    image_angle -= 9*sign(image_angle);
                }
            }
            x += dcos(image_angle+180);
            y += (-dsin(image_angle+180));
            if (y &lt; ystart - 40){
                y = ystart - 40;
            }
        }
        heightNormalized = clamp((ystart-y)/maxHeight, 0, 1);
        heightScaleMult = 1 + (heightScaleFluct * max(heightNormalized, 0));
    }else{
        if (instance_exists(objPlantsPlayerCage)){
            var _destX = (objPlantsPlayerCage.x)
            var _destY = (objPlantsPlayerCage.y);
            if (killingState == 1){
                var _heightDiff = (y - _destY);
                var _heightDiffInit = (ystart - _destY);
                
                var _riseAmt = 1;
                if (abs(_heightDiffInit) &lt; 1){
                    _riseAmt = 1;
                }else if (sign(_heightDiff) != sign(_heightDiffInit)){
                    _riseAmt = 0;
                }else{
                    _riseAmt = (_heightDiff/_heightDiffInit);
                }
                
                var _dest = point_direction(x, y - killingHeight*_riseAmt, _destX, _destY);
                var _diff = angle_difference(killingInitAngle, _dest+180);
                killingAngleCounter ++;
                var _lerp = clamp(killingAngleCounter/40, 0, 1);
                
                if (_lerp &gt;= 1){
                    image_angle = (_dest+180);  // sprite faces left
                    killingState = 2;
                    spd = 1.8;
                    killingSFX = audio_play_sound(sndSpikeTrap, 0, 0);
                }else{
                    image_angle = killingInitAngle + (-_diff)*scrEaseInOut(_lerp, 3.2);
                }
            }else if (killingState == 2){
                var _dir = point_direction(x, y, _destX, _destY);
                spd = min(spd + 0.35, 18);
                x += spd*( dcos(_dir));
                y += spd*(-dsin(_dir));
                
                if (x &lt;= _destX){
                    var _excess = abs(_destX - x);
                    x = _destX;
                    y -= _excess*(-dsin(_dir));
                    killingState = 3;
                    if (audio_is_playing(killingSFX)){
                        audio_stop_sound(killingSFX);
                    }
                    killingSFX = audio_play_sound(sndMakerSamplePunch, 0, 0);
                    audio_sound_pitch(killingSFX, 0.8);
                    audio_sound_gain(killingSFX, 1.2, 0);
                }
            }
        }
        heightNormalized = clamp((ystart-y)/maxHeight, 0, 1);
        heightScaleMult = 1 + (heightScaleFluct * max(heightNormalized, 0));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Over `killing` animation
if (killingState == 0){
    killingShadowYOff = ((ystart + 28) - y);
    killingInitAngle = image_angle;
    killingHeight = max(ystart-y, 0);
    y = ystart;
    
    var _riseAmt = killingHeight/maxHeight;
    killingScaleMult = max(1 + 1/4 * _riseAmt, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadow
if (!dead || crushed){
    if (killing){
        var _heightDiff = (y - objPlantsPlayerCage.y);
        var _heightDiffInit = (ystart - objPlantsPlayerCage.y);
        
        var _riseAmt = 1;
        if (abs(_heightDiffInit) &lt; 1){
            _riseAmt = 1;
        }else if (sign(_heightDiff) != sign(_heightDiffInit)){
            _riseAmt = 0;
        }else{
            _riseAmt = (_heightDiff/_heightDiffInit);
        }
        
        draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, y + lerp(0, 28, _riseAmt), (bbox_right-bbox_left)/66 + 0.4*_riseAmt, (bbox_bottom-bbox_top)/66 + 0.4*_riseAmt, 0, c_white, image_alpha - 0.4*_riseAmt);
    }else{
        var _riseAmt = max(ystart-y, 0)/maxHeight;
        draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, ystart + 28, (bbox_right-bbox_left)/66 + 0.4*_riseAmt, (bbox_bottom-bbox_top)/66 + 0.4*_riseAmt, 0, c_white, image_alpha - 0.4*_riseAmt);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attacking plant (stab from above)
if (image_angle &lt; 90){
    image_angle = min(image_angle + 9, 90);
}else if (instance_exists(attacking)){
    if (!scrPlantsPlantTooLow(attacking)){
        event_inherited();
        var _stabFrames = 7;
        var _stabDist = 20;
        if (attackingTimer &lt;= _stabFrames){
            y = clamp(y+_stabDist/_stabFrames, ystart-40, ystart-40 + _stabDist);
        }else if (attackingTimer &gt;= (attackingTimerLen-_stabFrames)){
            y = clamp(y-_stabDist/_stabFrames, ystart-40, ystart-40 + _stabDist);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead &amp;&amp; !killing){
    image_xscale *= heightScaleMult;  // for gore
    image_yscale = image_xscale;
    repeat(goreAmt){
        event_user(4);
    }
    // Moved to objPlantsGore Alarm[0]
    /*for(var i=0;i&lt;goreAmt;i++){
        if (instance_exists(gore[i])){
            gore[i].yBase += 40;
        }
    }*/
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead &amp;&amp; !killing){
    if (image_index &gt;= 2){
        event_user(2);
    }else{
        image_index ++;
    }
    glowFrame = glowLen;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead || crushed){
    scrPlantsCrushStart(64, 128 - ((ystart + 24) - bbox_bottom));
    if (!killing){
        draw_sprite_ext(sprPlantsIWBTGSpike, image_index, floor(x), floor(y), image_xscale*heightScaleMult, image_yscale*heightScaleMult, image_angle, c_white, image_alpha);
        if (glowFrame &gt; 0){
            draw_sprite_ext(sprPlantsIWBTGSpike, 3 + image_index, floor(x), floor(y), image_xscale*heightScaleMult, image_yscale*heightScaleMult, image_angle, c_white, image_alpha * (2*scrPlantsGlow(glowFrame, glowLen)));
        }
    }else{
        var _riseScale = 1;
        var _riseAmt = 1;
        if (killingState &lt; 2){
            _riseScale = killingScaleMult;
        }else if (killingState == 2 &amp;&amp; instance_exists(objPlantsPlayerCage)){
            var _heightDiff = (y - objPlantsPlayerCage.y);
            var _heightDiffInit = (ystart - objPlantsPlayerCage.y);
            
            if (abs(_heightDiffInit) &lt; 1){
                _riseAmt = 1;
            }else if (sign(_heightDiff) != sign(_heightDiffInit)){
                _riseAmt = 0;
            }else{
                _riseAmt = (_heightDiff/_heightDiffInit);
            }
            
            _riseScale = max(1 + 1/4 * _riseAmt, 1);
        }else if (killingState &gt;= 3){
            _riseScale = 1;
            _riseAmt = 0;
        }
        
        draw_sprite_ext(sprPlantsIWBTGSpike, image_index, floor(x), floor(y) - killingHeight*_riseAmt, image_xscale*_riseScale, image_yscale*_riseScale, image_angle, c_white, image_alpha);
        if (glowFrame &gt; 0){
            draw_sprite_ext(sprPlantsIWBTGSpike, 3 + image_index, floor(x), floor(y) - killingHeight*_riseAmt, image_xscale*_riseScale, image_yscale*_riseScale, image_angle, c_white, image_alpha * (2*scrPlantsGlow(glowFrame, glowLen)));
        }
    }
    
    var _yInit = y;  // we alter preCrushY to control where the crush surface is drawn
    preCrushY = (ystart + 24);  // object is flying
    scrPlantsCrushEnd(crushTimer);
    y = _yInit;
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
