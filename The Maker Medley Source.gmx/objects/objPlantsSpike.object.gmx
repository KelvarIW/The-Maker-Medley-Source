<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlantsSpike</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objPlantsPlant</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
shootDelay = 5;
moundAlpha = 1;
imgIndex = 0; //we need to use the plant collision mask sprite, which only has one frame, for collisions  (offset for non-animated pieces)
shootSquishSine = 0;
shootSquishAmp = 6.4;
idleAnimSine = 0;

scrPlantsGoreInit(4);

snd = audio_play_sound(sndPlantsGrow, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// mound fade out
if (!frozen){
    if (dead &amp;&amp; !crushed){
        moundAlpha -= 0.08;
    }
}

scrPlantsPlantStepEnd((moundAlpha &lt;= 0));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    if (!dead){
        if (instance_exists(objPlantsCtrl)){
            idleAnimSine = floor(2.5*(-sin(objPlantsCtrl.plantsCount * pi/80 * animMult)));
        }
        if (!growing){
            if (scrPlantsPlantShouldShoot()){
                shootDelay --;
                if (shootDelay &lt;= 0){
                    shootDelay = 70;
                    with (instance_create(x, y+14, objPlantsProjectile)){
                        projType = 2;
                        row = other.row;
                        yBase = other.y + 24;
                        event_perform(ev_alarm, 0);
                    }
                    scrPlantsLimitedSFX(sndPlantsSpike);
                    shootSquishSine = pi;
                }
            }else{ //no enemies in row
                if (shootDelay &gt; 5){
                    shootDelay --;
                }
            }
            if (shootSquishSine &gt; 0){
                shootSquishSine = max(0, shootSquishSine-pi/30);
            }
        }else{
            var _riseLen = 48;
            growingTimer ++;
            dirtDelay --;
            if (dirtDelay &lt;= 0 &amp;&amp; growingTimer &lt; _riseLen){
                dirtDelay = irandom_range(2, 4);
                with (instance_create(x + irandom_range(-8, 8), y+24, objPlantsDirt)){
                    image_xscale = 0.2 + 0.8*min(1, 2 * other.growingTimer/_riseLen);
                    image_yscale = image_xscale;
                    row = other.row;
                }
            }
            if (growingTimer &gt;= 64){growing = false;}
            if (growingTimer &lt; _riseLen){
                imgIndex = (growingTimer/4);
            }else{
                imgIndex = _riseLen/4;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Launcher Backing
var _riseLen = 48;
if (!dead){
    var _moundY = (y+22);
    var _launcherHeight = 0;
    if (!growing){
        _launcherHeight = (50 + idleAnimSine) - 24;  // simplified version of calculations below
    }else if (growingTimer &gt; _riseLen){
        var _maxHeight = 50;
        var _risePos = (_maxHeight + idleAnimSine);
        _launcherHeight = (_risePos - 2*12);  // height above ground
    }
    
    var _launcherY = (_moundY - _launcherHeight);
    if (_launcherHeight &gt; 0){
        draw_sprite_ext(sprPlantsSpikeLauncher_Backing, 0, x, (_launcherY + 4*2) +   (shootSquishAmp*sin(shootSquishSine)), 2, 2, 0, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadow
if (deathShadowMult &gt; 0){
    var _shadowWidth, _shadowHeight;
    if (growing){
        var _riseLen = 48;
        var _riseAmt = min(growingTimer/_riseLen, 1);
        _shadowWidth = 0.3 + 1.18*_riseAmt;
        _shadowHeight = 1.28 * _shadowWidth/1.48;
    }else{
        _shadowWidth = 1.48;
        _shadowHeight = 1.28 * _shadowWidth/1.48;
    }
    
    var _shadowDim = scrPlantsShadow(48 * _shadowWidth, 15 * _shadowHeight, deathShadowMult);
    draw_sprite_ext(sprPlantsShadow, 0, x-view_xview + 2, y+22, _shadowDim[0], _shadowDim[1], 0, c_white, moundAlpha*image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pieces
var _riseLen = 48;
var _riseAmt = min(growingTimer/_riseLen, 1);
if (!growing){_riseAmt = 1;}  // failsafe?
var _maxHeight = 50;
var _risePos = (_maxHeight + idleAnimSine)*_riseAmt;
var _tipBaseHeight = 28;  // point where spike tip doesn't cover full sprite in region
var _moundY = (y+22);
var _launcherHeight = (_risePos - 2*12);  //  height above ground
var _launcherY = (_moundY-_launcherHeight);
var _shootSquish = floor(shootSquishAmp*sin(shootSquishSine))
var _spikeGoreMinHeight = 10;

var _tipXOff = -12;  //28/2 = 14; 14 - 2 = 12
var _tipAngRange = 135;
var _growLen = 64;
gore[0] = instance_create(x, y, objPlantsParts);
gore[0].sprite_index = sprPlantsSpikeLauncherTip;
gore[0].image_index = imgIndex;
if (growing){
    if (growingTimer &lt;= _riseLen){
        gore[0].x += _tipXOff;
        gore[0].y = _moundY - _risePos;
        if (_risePos &lt; _tipBaseHeight){
            gore[0].growing = true;
            gore[0].val1 = ceil(_risePos);
        }else if (_risePos &lt; (_tipBaseHeight + _spikeGoreMinHeight)){  // sprPlantsSpike gore must be at least  `_spikeGoreMinHeight`  pixels tall
            gore[0].growing = true;
            gore[0].val1 = ceil(_risePos - _spikeGoreMinHeight);
        }
        
        if (gore[0].growing){
            with (gore[0]){scrAdjustForOrigin(2, 0, 14, min(val1, 32)/2, image_angle);}
        }else{
            with (gore[0]){scrAdjustForOrigin(2, 0, 14, 16, image_angle);}
        }
    }else{
        var _tipAngleInc = _tipAngRange/(_growLen-_riseLen);
        var _tipAngle = (growingTimer - _riseLen)*_tipAngleInc;
        var _tipAnglePrev = _tipAngle - _tipAngleInc;
        
        gore[0].image_angle = _tipAngle;
        gore[0].angInc = _tipAngleInc;
        gore[0].hspeed = -2*(dcos(_tipAnglePrev) - dcos(_tipAnglePrev));
        gore[0].vspeed = 2*(dsin(_tipAngle) - dsin(_tipAnglePrev));
        
        gore[0].x += _tipXOff;
        gore[0].y = _launcherY;
        with (gore[0]){scrAdjustForOrigin(2, 26, 14, 16, image_angle);}
    }
}else{
    gore[0].x += _tipXOff;
    gore[0].y = _launcherY + _shootSquish;
    gore[0].image_angle = _tipAngRange;
    with (gore[0]){scrAdjustForOrigin(2, 26, 14, 16, image_angle);}
}

if (_risePos &gt; _tipBaseHeight){
    if (_risePos &lt; (_tipBaseHeight + _spikeGoreMinHeight)){  // tip has flat base
        gore[1] = instance_create(x, y, objPlantsParts);
        gore[1].sprite_index = sprPlantsSpike;
        gore[1].image_index = imgIndex;
        gore[1].image_xscale = 2;
        gore[1].image_yscale = 2;
        gore[1].val1 = (gore[0].val1 div 2);  // top = gore[0].height
        gore[1].val2 = _spikeGoreMinHeight;  // height
        gore[1].y = (_moundY - _risePos) + (_tipBaseHeight + ceil(gore[1].val2/2));
    /*}else if (_risePos &lt; (_tipBaseHeight + _spikeGoreMinHeight) + 8){  // tip does not have flat base
        gore[1] = instance_create(x, y, objPlantsParts);
        gore[1].sprite_index = sprPlantsSpikeLauncher;
        gore[1].image_index = imgIndex;
        gore[1].image_xscale = 2;
        gore[1].image_yscale = 2;
        gore[1].val1 = (_risePos - _tipBaseHeight);  // height
        gore[1].y = (_moundY - gore[1].val1);
        gore[1].val1 = (gore[1].val1) div 2;  // height
    */
    }else{  // shards
        // not local variable because GMS1 arrays  :(
        _xOff[2] = 1;
        _xOff[1] = +6;
        _xOff[0] = -6;
        var _baseIndex = ((floor(imgIndex) mod 4)*3);
        
        for(var i=1;i&lt;=3;i++){
            gore[i] = instance_create(x, y, objPlantsParts);
            gore[i].sprite_index = sprPlantsSpikeLauncherShard;
            gore[i].image_index = _baseIndex + (i-1);
            gore[i].image_xscale = 2;
            gore[i].image_yscale = 2;
            var _height = (_launcherHeight - (_shootSquish));
            gore[i].val1 = ceil(_height/2);
            gore[i].y = _moundY;
            
            with (gore[i]){
                scrAdjustForOrigin(0, 0, other._xOff[(i-1)], -min(ceil(_height/4), 10), image_angle, 2, 2);
                y += (floor(_height) mod 2);
            }
        }
        
    }
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw plant
var _riseLen = 48;
var _riseAmt = min(growingTimer/_riseLen, 1);
if (!growing){_riseAmt = 1;}  // failsafe?

var _maxHeight = 50;
var _risePos = (_maxHeight + idleAnimSine)*_riseAmt;
var _moundY = y+22;
var _launcherHeight = (_risePos - 2*12);  //  height above ground
var _launcherY = (_moundY-_launcherHeight);

var _tipXOff = -12;  //28/2 = 14; 14 - 2 = 12
var _growLen = 64;
var _tipAngRange = 135;
if (!dead || crushed){
    scrPlantsCrushStart(64, 96);
    /*if (crushed &amp;&amp; !surface_exists(crushedSurf)){
        crushedSurf = surface_create(96, 96);
        if (surface_exists(crushedSurf)){
            surface_set_target(crushedSurf);
            draw_clear_alpha(c_black, 0);
            x = 48;
            y = 48;
        }
    }*/
    
    //launcher
    if (_risePos &gt; 0){  // account for sinewave motion
        if (growing){
            if (growingTimer &lt;= _riseLen){
                draw_sprite_part_ext(sprPlantsSpike, imgIndex, 0, 0, 32, floor(_risePos/2), x-32, _moundY - _risePos, 2, 2, c_white, 1);
                draw_sprite_ext(sprPlantsMound, 0, x, _moundY, 0.3 + 1.18*_riseAmt, max(_riseAmt, 0.105), 0, c_white, 1);
            }else{
                draw_sprite_part_ext(sprPlantsSpikeLauncher, 0, 0, 0, 32, ceil(_launcherHeight/2), x-32, _launcherY, 2, 2, c_white, 1);
                draw_sprite_ext(sprPlantsSpikeLauncherTip, 0, x+_tipXOff, (_moundY-_launcherHeight), 1, 1, _tipAngRange * (growingTimer-_riseLen)/(_growLen - _riseLen), c_white, 1);
                draw_sprite_ext(sprPlantsMound, 0, x, _moundY, 1.48, 1, 0, c_white, moundAlpha);
            }
        }else{
            var _shootSquish = floor(shootSquishAmp*sin(shootSquishSine));
            draw_sprite_part_ext(sprPlantsSpikeLauncher, 0, 0, 0, 32, ceil(_launcherHeight/2) - ceil(_shootSquish/2), x-32, _launcherY + _shootSquish, 2, 2, c_white, 1);
            draw_sprite_ext(sprPlantsSpikeLauncherTip, 0, x+_tipXOff, _launcherY + _shootSquish, 1, 1, 135, c_white, 1);
            draw_sprite_ext(sprPlantsMound, 0, x, _moundY, 1.48, 1, 0, c_white, moundAlpha);
        }
    }
    
    /*if (crushed){
        if (surface_exists(crushedSurf)){
            surface_reset_target();
            x = xprevious;
            y = yprevious;
        }
    }*/
    scrPlantsCrushEnd(crushTimer);
}else{
    event_inherited();
    if (moundAlpha &gt; 0){
        //originally faded out; now shrinks vertically
        draw_sprite_ext(sprPlantsMound, 0, x, _moundY, (0.3 + 1.18*_riseAmt), min(moundAlpha*1.28, 1) * _riseAmt, 0, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
