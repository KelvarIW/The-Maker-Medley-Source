<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFinalKurathLeash</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>objPlayerKiller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// https://forum.yoyogames.com/index.php?threads/rope-swing-without-physics-engine.80749/
image_speed = 1/5;
connection1 = noone;  // closer to Scribble
connection2 = noone;  // closer to Kurath
image_alpha = 1.5;

//rope physics
ropePhysics = true;
velX = 0.0;  //horizontal velocity
velY = 0.0;  //vertical velocity
tensionX = 0.0;
tensionY = 0.0;
//for connection to Kurath
anchorXOff = 0;
anchorYOff = 0;

grav = 0.4;  //gravity
drag = 0.04; //friction-ish
restitution = 0;//0.03; //"bounciness"
mass = 1;

ropeLength = 12; // maximum distance from `connection2`
instId = 0;
instIdMax = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Velocity and fade out
velY += grav;
if (ropePhysics){
    //tensionX *= 1.0 - drag;
    //tensionY *= 1.0 - drag;
    /*
    var _cap = 10;
    var _velTotal = sqrt( sqr(velX) + sqr(velY) );
    
    if (_velTotal &gt; _cap){
        velX *= _cap/_velTotal;
        velY *= _cap/_velTotal;
    }*/
}else{
    image_alpha -= 0.035;
    if (image_alpha &lt;= 0 || bbox_top &gt; room_height)
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(connection1)){
    with (connection1){
        if (x == xprevious &amp;&amp; y == yprevious){  // Set xprevious to x and yprevious to y before running this User Event
            x += (other.x - other.xprevious);
            y += (other.y - other.yprevious);
            if (x == xprevious &amp;&amp; y == yprevious){  // Didn't move
                break;
            }else{
                event_user(3);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Original (Now Unused) Leash Behavior
//Must be run from front to back

if (instance_exists(connection2)){
    var nx, ny, ntotal, nmag, invm, forceMag;
    var _anchorX = connection2.x;
    var _anchorY = connection2.y;
    var _destX = x + velX;
    var _destX = y + velY;
    var _xDiff = _destX - _anchorX;
    var _yDiff = _destY - _anchorY;
    var _xExcess = 0, _yExcess = 0;
    var _tDist = sqrt( sqr(_xDiff) + sqr(_yDiff) );
    
    if (_tDist &gt; ropeLength &amp;&amp; ropeLength &gt;= 0){
        _xExcess = _xDiff * (_tDist/_ropeLength  - 1);
        _yExcess = _yDiff * (_tDist/_ropeLength  - 1);
        _xDiff -= _xExcess;
        _yDiff -= _yExcess;
        
        if (!connection2.immobile){
            connection2.x += _xExcess;
            connection2.y += _xExcess;
        }
        x = connection2.x + velX;
        y = connection2.y + velY;
    }
    
    
    /*
    // [nx, ny] is the vector pointing from the rope anchor to the position of the object after applying velocity
    nx = (connection1.x + connection1.velX) - x;
    ny = (connection1.y + connection1.velY) - y;
    
    // Check if the object will be within the rope range
    ntotal = sqr(nx) + sqr(ny);
    if (ntotal &gt; sqr(ropeLength)) {
        nmag = sqrt(ntotal); // The distance between the anchor and where the object would be if not for the rope
        invm = 1.0/nmag; // Calculate the reciprocal of the above; this is for optimization purposes
        
        // Multiply the outward vector by invm; this makes the outward vector a unit vector.
        nx *= invm;
        ny *= invm;
        
        // Add spring (Bugfix)
        connection1.velX -= nx * (ropeLength - nmag) / ropeLength;
        connection1.velY -= ny * (ropeLength - nmag) / ropeLength;
        
        // Calculate the outwards velocity
        forceMag = dot_product(nx, ny, connection1.velX, connection1.velY);
        if (forceMag &gt; 0.0) {
            // If it's moving outwards, push the object inwards
            connection1.velX -= forceMag * nx * (1.0 + restitution);
            connection1.velY -= forceMag * ny * (1.0 + restitution);
        }
        
        // Correct the predicted next position after applying forces
        nx = (connection1.x + connection1.velX) - x;
        ny = (connection1.y + connection1.velY) - y;
    }
    
    // Set position of the object
    connection1.x += connection1.velX;
    connection1.y += connection1.velY;
    */
}else{
    x += velX;
    y += velY;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Leash "Tug" behavior
//Must be run from back to front
//in other words, run this after its `connection2` has snapped back

if (instance_exists(connection2)){
    var _anchorX = (connection2.x+anchorXOff) + (connection2.velX+connection2.tensionX);
    var _anchorY = (connection2.y+anchorYOff) + (connection2.velY+connection2.tensionY);
    var _destX = x + (velX+tensionX);
    var _destY = y + (velY+tensionY);
    var _xDiff = _anchorX - _destX;
    var _yDiff = _anchorY - _destY;
    var _xExcess = 0, _yExcess = 0;
    var _tDist = sqrt( sqr(_xDiff) + sqr(_yDiff) );
    
    if (_tDist &gt; ropeLength &amp;&amp; ropeLength &gt;= 0){
        _xExcess = _xDiff * ((_tDist-ropeLength)/_tDist);
        _yExcess = _yDiff * ((_tDist-ropeLength)/_tDist);
        
        var _tensionMult = (connection2.mass/(connection2.mass + mass));
        tensionX += _xExcess * _tensionMult;
        tensionY += _yExcess * _tensionMult;
        connection2.tensionX -= _xExcess * (1 - _tensionMult);
        connection2.tensionY -= _yExcess * (1 - _tensionMult);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Leash "Pull" behavior
//Must be run from front to back
//in other words, run this after its `connection1` has moved

if (instance_exists(connection2)){
    var _anchorX = (connection2.x+anchorXOff) + (connection2.velX+connection2.tensionX);
    var _anchorY = (connection2.y+anchorYOff) + (connection2.velY+connection2.tensionY);
    var _destX = x + velX;
    var _destY = y + velY;
    var _xDiff = _destX-_anchorX;
    var _yDiff = _destY-_anchorY;
    var _xExcess = 0, _yExcess = 0;
    var _tDist = sqrt( sqr(_xDiff) + sqr(_yDiff) );
    
    if (_tDist &gt; ropeLength &amp;&amp; ropeLength &gt;= 0){
        _xExcess = _xDiff * ((_tDist-ropeLength)/_tDist) * (1.0 + restitution);
        _yExcess = _yDiff * ((_tDist-ropeLength)/_tDist) * (1.0 + restitution);
        
        var _tensionMult = (mass / (connection2.mass + mass));
        connection2.tensionX += _xExcess * _tensionMult;
        connection2.tensionY += _yExcess * _tensionMult;
        
        tensionX -= _xExcess * (1 - _tensionMult);
        tensionY -= _yExcess * (1 - _tensionMult);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
draw_sprite_ext(sprFinalKurathLeashRecolored, image_index, x, y, image_xscale, image_yscale, 0, c_white, min(image_alpha, 1) * sqr(instId / instIdMax));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
