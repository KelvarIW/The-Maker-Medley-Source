<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCamera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-14</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>waterColor = make_color_rgb(134, 166, 223);
waterOutColor = make_color_rgb(64, 91, 153);
water2Color = make_color_rgb(64, 64, 255);
water2OutColor = make_color_rgb(0, 0, 240);

yOffset = 0; //bubbles
sineVal = 0; //ripple
if (instance_exists(objWorld)){
    //Water Surface
    if (global.waterRippleEnabled){
        waterRippleHand1 = shader_get_uniform(shdRipple, "rippleSine");
        waterRippleHand2 = shader_get_uniform(shdRipple, "rippleAmp");
        waterRippleHand3 = shader_get_uniform(shdRipple, "rippleFreq");
        waterRippleHandUV = shader_get_uniform(shdRipple, "uv");
    }else{
        waterRippleHand1 = noone;
        waterRippleHand2 = noone;
        waterRippleHand3 = noone;
        waterRippleHandUV = noone;
    }
    if (global.waterBorderEnabled){
        waterBorderHand1 = shader_get_uniform(shdInline, "pixelW");
        waterBorderHand2 = shader_get_uniform(shdInline, "pixelH");
    }else{
        waterBorderHand1 = noone;
        waterBorderHand2 = noone;
    }
}else{
    instance_destroy();
}

if (instance_number(object_index) &gt; 1)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Refreshing Water
if (instance_exists(objWater)){
    if (!surface_exists(global.sharedSurf)){global.sharedSurf = surface_create(800, 608);}
    if (!surface_exists(global.sharedSurf2)){global.sharedSurf2 = surface_create(800, 608);}
    if (!surface_exists(global.sharedSurf3)){global.sharedSurf3 = surface_create(800, 608);}
    
    if (surface_exists(global.sharedSurf) &amp;&amp; surface_exists(global.sharedSurf2) &amp;&amp; surface_exists(global.sharedSurf3)){
        surface_set_target(global.sharedSurf);
        draw_clear_alpha(c_black, 0);
        draw_set_color(c_white);
        with (objWater){
            draw_rectangle(x - view_xview, y - view_yview - 2*(sin(global.countPersistent * pi/160)/2 + 0.5), (x+32*image_xscale) - view_xview, (y+32*image_yscale) - view_yview + 2*(sin(global.countPersistent * pi/160)/2 + 0.5), false);
        }
        with (objMakerCirclePart){
            if (water){
                draw_circle(x - view_xview, y - view_yview, rad, false);
            }
        }
        surface_reset_target();
        
        if (global.extraEffects){
            //Bubbles - uses surface 3 as a temporary mask
            surface_set_target(global.sharedSurf2);
            draw_clear_alpha(c_black, 0);
            
            //Draw the Bubble BK
            for(var i = -(view_xview mod 128); i &lt; 800; i += 128){
                for(var j=-((0.25*yOffset) mod 128); j &lt; 608; j += 128){
                    draw_background(bkMakerWater, i, j);
                }
            }
            surface_reset_target();
            
            surface_set_target(global.sharedSurf3);
            draw_clear_alpha(c_black, 1);
            draw_set_blend_mode(bm_subtract);
            draw_surface(global.sharedSurf, 0, 0);
            surface_reset_target();
            
            surface_set_target(global.sharedSurf2);
            draw_surface(global.sharedSurf3, 0, 0);
            draw_set_blend_mode(bm_normal);
            surface_reset_target();
        }
        
        if (surface_exists(global.sharedSurf3)){
            surface_set_target(global.sharedSurf3);
            draw_clear_alpha(c_black, 0);
            draw_surface_ext(global.sharedSurf, 0, 0, 1, 1, 0, waterColor, 1);
            if (global.extraEffects){draw_surface(global.sharedSurf2, 0, 0);}
            if (global.waterBorderEnabled){
                shader_set(shdInline);
                shader_set_uniform_f(waterBorderHand1, 3/800);
                shader_set_uniform_f(waterBorderHand2, 3/608);
                draw_surface_ext(global.sharedSurf, 0, 0, 1, 1, 0, waterOutColor, 0.85);
                shader_reset();
            }
            surface_reset_target();
        }
        draw_set_alpha(0.5);
        if (global.waterRippleEnabled &amp;&amp; global.extraEffects){
            shader_set(shdRipple);
            shader_set_uniform_f(waterRippleHand1, sineVal);
            shader_set_uniform_f(waterRippleHand2, 1/400);//2/800);
            shader_set_uniform_f(waterRippleHand3, 3.8);
            shader_set_uniform_f(waterRippleHandUV, 0, 1);
        }
        draw_surface(global.sharedSurf3, view_xview, view_yview);
        if (global.waterRippleEnabled &amp;&amp; global.extraEffects) shader_reset();
        draw_set_alpha(1);
    }
}

// Non-refreshing water
if (instance_exists(objWater2)){
    if (!surface_exists(global.sharedSurf)){global.sharedSurf = surface_create(800, 608);}
    
    if (surface_exists(global.sharedSurf)){
        surface_set_target(global.sharedSurf);
        draw_clear_alpha(c_black, 0);
        
        draw_set_color(water2Color);
        var _verticalOffset = 2*(sin(global.countPersistent * pi/120)/2 + 0.5);
        with (objWater2){
            draw_rectangle(x - view_xview, y - view_yview - _verticalOffset, (x+32*image_xscale) - view_xview, (y+32*image_yscale) - view_yview + _verticalOffset, false);
        }
        with (objMakerCirclePart){
            if (water){
                draw_circle(x - view_xview, y - view_yview, rad, false);
            }
        }
        draw_set_color(c_white);
        
        surface_reset_target();
        
        if (global.waterBorderEnabled){
            if (!surface_exists(global.sharedSurf2)){global.sharedSurf2 = surface_create(800, 608);}
            surface_set_target(global.sharedSurf2);
            draw_clear_alpha(c_black, 0);
            shader_set(shdInline);
            shader_set_uniform_f(waterBorderHand1, 3/800);
            shader_set_uniform_f(waterBorderHand2, 3/608);
            draw_surface_ext(global.sharedSurf, 0, 0, 1, 1, 0, water2OutColor, 1);
            shader_reset();
            surface_reset_target();
            
            if (global.waterRippleEnabled &amp;&amp; global.extraEffects){
                shader_set(shdRipple);
                shader_set_uniform_f(waterRippleHand1, sineVal);
                shader_set_uniform_f(waterRippleHand2, 1/400);//2/800);
                shader_set_uniform_f(waterRippleHand3, 3.8);
                shader_set_uniform_f(waterRippleHandUV, 0, 1);
            }
            
            draw_surface_ext(global.sharedSurf, view_xview, view_yview, 1, 1, 0, c_white, 0.5);
            draw_surface_ext(global.sharedSurf2, view_xview, view_yview, 1, 1, 0, c_white, 0.5);
            
            if (global.waterRippleEnabled &amp;&amp; global.extraEffects){
                shader_reset();
            }
        }else{
            if (global.waterRippleEnabled &amp;&amp; global.extraEffects){
                shader_set(shdRipple);
                shader_set_uniform_f(waterRippleHand1, sineVal);
                shader_set_uniform_f(waterRippleHand2, 1/400);//2/800);
                shader_set_uniform_f(waterRippleHand3, 3.8);
                shader_set_uniform_f(waterRippleHandUV, 0, 1);
            }
            draw_surface_ext(global.sharedSurf, 0, 0, 1, 1, 0, c_white, 0.5);
            if (global.waterRippleEnabled &amp;&amp; global.extraEffects){
                shader_reset();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
