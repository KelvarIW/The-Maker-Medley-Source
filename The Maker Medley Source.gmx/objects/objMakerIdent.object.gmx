<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-415</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>name = "Name";
maker = "Maker";
// pixels
nameWidth = 1;
makerWidth = 1;
// characters
nameLength = 0;
makerLength = 0;
sineVal = 0;
sineCounter = 0;
drawX = -200;
longestString = 0;
prefixText = true;
music = -1;  // music identifiers will not destroy themselves unless the song they are tracking has stopped
musicFadeAlpha = 1;
border = 2;  // buffer around the text for the outline
roomTransitionMusicCheck = false;

// Icon
topIconSpr = -1;
topIconSubimg = 0;
topIconScale = 1;
topIconYOff = 0;
botIconSpr = -1;
botIconSubimg = 0;
botIconScale = 1;
botIconYOff = 0;
iconWidth = 44;

surf = -4;
alarm[0] = 1;
roomStart = room;
with (object_index){  // correct depth ordering, if necessary
    if (id != other){
        depth ++;
    }
}
if (room == rChaozB || room == rGeezer01 || room == rGeezerHitchcock){
    persistent = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf)){surface_free(surf);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///To check if prev. room's song is still playing 1 frame after room transition
roomTransitionMusicCheck = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine Longest String
if (is_string(name) &amp;&amp; is_string(maker)){
    draw_set_font(fIdentifier);
    if (prefixText){
        name = "Level:  " + name;
        maker ="Maker: " + maker;
    }
    nameWidth = string_width(name);
    makerWidth = string_width(maker);
    
    if (name == "Level:  Avoidance-ヒッチコック"){
        draw_set_font(fIdentifierJPCH);
        var t_nameL_JPCH = string_width(name);
        var t_makerL_JPCH = string_width(maker);
        nameWidth += string_width(name);
        makerWidth += string_width(maker);
    }
    
    longestString = max(nameWidth, makerWidth) + iconWidth;
}else{
    if (name == -1){
        longestString = string_width(maker);
    }else{
        longestString = string_width(name);
    }
}

longestString += 2*border;  // buffer for outline

//characters, not pixels
nameLength = string_length(name);
makerLength = string_length(maker);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.identifiers){
    sineCounter += 50/room_speed;
    if (sineCounter &lt;= 60 || sineCounter &gt;= 120){
        sineVal += pi/120 * 50/room_speed;
    }
    if (sineCounter &gt;= 180){
        instance_destroy();
    }else{
        if (xstart &lt; 400){drawX = (-longestString/2) + (longestString+12)*sin(sineVal);}
        else{drawX = (800 + longestString/2) - (longestString+12)*sin(sineVal);}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!persistent){
    event_perform(ev_destroy, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (music &gt; 0){
    roomTransitionMusicCheck = true;
    alarm[1] = 2;
}else if (room != roomStart){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.screenshotMode){exit;}
if (longestString &lt;= 0){exit;} //has not run alarm[0] yet
if (global.identifiers){
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    draw_set_font(fIdentifier);
    var _side = sign(xstart - 400);
    var _surfHeight = 80;
    var _surfMiddle = _surfHeight/2;
    var _surfY = 29;
    
    var _spacingY = 32;
    var _topTextY = _surfMiddle - (_spacingY/2)  + border;
    var _botTextY = _surfMiddle + (_spacingY/2)  + border;
    
    if (!surface_exists(surf)){
        surf = surface_create(longestString, _surfHeight);
        surface_set_target(surf);
        draw_clear_alpha(c_black, 0);
        
        var _textX = 0, _textChar = "", _yOffset = 0;
        if (_side == -1){
            if (topIconSpr &gt;= 0){draw_sprite_ext(topIconSpr, topIconSubimg, (longestString - iconWidth/2) - border, _topTextY + topIconYOff, topIconScale, abs(topIconScale), 0, c_white, 1);}
            if (botIconSpr &gt;= 0){draw_sprite_ext(botIconSpr, botIconSubimg, (longestString - iconWidth/2) - border, _botTextY + botIconYOff, botIconScale, abs(botIconScale), 0, c_white, 1);}
        }else{
            if (topIconSpr &gt;= 0){draw_sprite_ext(topIconSpr, topIconSubimg, border + iconWidth/2, _topTextY + topIconYOff, topIconScale, abs(topIconScale), 0, c_white, 1);}
            if (botIconSpr &gt;= 0){draw_sprite_ext(botIconSpr, botIconSubimg, border + iconWidth/2, _botTextY + botIconYOff, botIconScale, abs(botIconScale), 0, c_white, 1);}
        }
        
        // starting text x position
        if (_side == -1){
            _textX = border + max(makerWidth - nameWidth, 0);
        }else{
            _textX = border + iconWidth;
        }
        
        var _yOffset;
        draw_set_color(c_white);
        if (name != -1){
            for (var i = 1; i &lt;= nameLength; i ++;){
                _textChar = string_copy(name, i, 1);
                _yOffset = 0;
                if (ord(_textChar) &gt; 255){
                    _yOffset += -3;
                    draw_set_font(fIdentifierJPCH);
                }else{
                    draw_set_font(fIdentifier);
                }
                draw_text_outline(_textX, _topTextY + _yOffset, _textChar, 2, c_black, 8);
                _textX += string_width(_textChar);
            }
        }
        
        // reset text x position
        if (_side == -1){
            _textX = border + max(nameWidth - makerWidth, 0);
        }else{
            _textX = border + iconWidth;
        }
        
        if (maker != -1){
            for (var i = 1; i &lt;= makerLength; i ++;){
                _textChar = string_copy(maker, i, 1);
                _yOffset = 0;
                if (ord(_textChar) &gt; 255){
                    _yOffset += -3;
                    draw_set_font(fIdentifierJPCH);
                }else{
                    draw_set_font(fIdentifier);
                }
                draw_text_outline(_textX, _botTextY + _yOffset, _textChar, 2, c_black, 8);
                _textX += string_width(_textChar);
            }
        }
        surface_reset_target();
    }
    
    var _rotOffset = scrChangeOriginScaled(0, 0, longestString/2, _surfMiddle, -view_angle, view_wview/800, view_hview/608);
    var _viewOffset = scrChangeOriginScaled(drawX, _surfY + (_surfMiddle/2), 400, 304, -view_angle, view_wview/800, view_hview/608);
    
    var _alpha = 1;
    if (music &gt;= 0 &amp;&amp; global.musicFading == music){
        _alpha = global.musFadeMultiplier;
        if (_alpha &lt;= 0){
            instance_destroy();
        }
    }
    draw_surface_ext(surf, (view_xview + view_wview/2)  +  _viewOffset[0] + _rotOffset[0], (view_yview + view_hview/2)  +  _viewOffset[1] + _rotOffset[1], view_wview/800, view_hview/608, -view_angle, c_white, _alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
