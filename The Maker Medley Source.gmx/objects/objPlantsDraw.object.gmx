<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCamera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadows
if (!surface_exists(global.sharedSurf)){
    global.sharedSurf = surface_create(800, 608);
}

if (surface_exists(global.sharedSurf)){
    surface_set_target(global.sharedSurf);
    draw_clear_alpha(c_black, 0);
    
    with (objPlantsPlant){event_user(3);}
    with (objPlantsDirt){event_user(3);}
    with (objPlantsParts){event_user(1);}
    with (objPlantsActivatorKillEffect){event_user(3);}
    with (objPlantsEnemy){event_user(5);}
    with (objPlantsGore){event_user(1);}
    with (objPlantsProjectile){event_user(3);}
    with (objPlantsEnemyBullet){event_user(0);}
    with (objPlantsEndingBullet){event_user(3);}
    with (objPlantsCoin){event_user(3);}
    with (objPlantsCoinCollected){event_user(3);}
    with (objPlantsHat){event_user(5);}
    with (objPlantsEndingGun){event_user(0);}
    
    //copy of objPlantsCoin shadow code
    with (objS3BlueCoin){
        var _height = 0;
        if (y &lt; yBase){
            _height = clamp((yBase - y)/128, 0, 1);
        }
        draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, yBase + (8*image_yscale), (1+0.667*_height) * 0.35, (1+0.667*_height) * 0.35, 0, c_white, (1-_height));
    }
    surface_reset_target();
    
    draw_surface_ext(global.sharedSurf, view_xview, 0, 1, 1, 0, c_white, 1/2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Main PvZ Drawing
if (instance_exists(objPlantsCtrl)){
    with (objPlantsLaser){
        if (active){
            event_user(1);
        }
    }
    
    if (global.dropshadows){
        event_user(0);
    }
    
    with (objPlantsSpike){
        event_user(4);  //launcher backing
    }
    
    with (objPlantsSpringtrap){
        event_user(4);
    }
    with (objPlantsShuriken){
        event_user(4);
    }
    with (objPlantsActivatorKillEffect){
        event_user(4);
    }
    
    
    for(var _drawingRow=0; _drawingRow&lt;6; _drawingRow++){ //draw one row at a time
        draw_sprite_ext(sprMakerTeleporterExit, 8*abs(((objPlantsCtrl.plantsCount div 5) + 3) mod 6 - 3), 704, 192 + 64*_drawingRow + 4*sin(objPlantsCtrl.plantsCount*pi/80), 2, 2, 0, c_white, 1);
        
        //projectiles
        with (objPlantsProjectile){
            if (row == _drawingRow &amp;&amp; behind){
                event_user(0);
            }
        }
        
        //plants
        with (objPlantsPlant){
            if (row == _drawingRow &amp;&amp; object_index != objPlantsShuriken){
                event_user(0);
            }
        }
        with (objPlantsShuriken){
            if (row == _drawingRow){
                event_user(0);
            }
        }
        //mine effect
        with (objPlantsActivatorKillEffect){
            if (row == _drawingRow){
                event_user(0);
            }
        }
        
        with (objPlantsDirt){
            if (row == _drawingRow){
                draw_self();
            }
        }
        //projectiles not behind their source
        with (objPlantsProjectile){
            if (row == _drawingRow &amp;&amp; !behind){
                event_user(0);
            }
        }
            
        //enemies
        with (objPlantsEnemy){
            if (row == _drawingRow){
                //flag (drawn behind carrying enemy)
                if (instance_exists(flag)){
                    with (flag){
                        event_perform(ev_draw, 0);
                    }
                }
                
                event_user(0);
            }
        }
        with (objPlantsGore){  // gore that must be drawn manually  (currently only from Miku spinners)
            if (!fromEnemy &amp;&amp; row == _drawingRow){
                event_user(0);
            }
        }
        
        with (objPlantsEnemyBullet){
            if (row == _drawingRow){
                draw_self();
            }
        }
        
        with (objPlantsMikuSpinner){
            if (row == _drawingRow){
                event_user(0);
            }
        }
        
        //thwomps (always in front)
        with (objPlantsThwomp){
            if (row == _drawingRow){
                event_user(5);
                event_user(0);
            }
        }
        
        //draw cage between rows 2 and 3
        if (_drawingRow == 2){
            with (objPlantsPlayerCage){
                event_perform(ev_draw, 0);
            }
        }
    }
    
    // Ending Gun
    with (objPlantsEndingBullet){
        event_user(0);
    }
    with (objPlantsEndingGun){
        draw_self();
    }
    with (objGeneralNonkiller){  // gun explosion
        draw_self();
    }
    
    // Behind GUI
    with (objMakerDeathEffect){
        draw_self();
    }
    with (objMakerDeathPart){
        draw_self();
    }
    with (objPlantsMikuSpinnerFailed){
        draw_self();
    }
    with (objPlantsCoin){
        if (!behind){
            event_user(0);
        }
    }
    
    with (objPlantsCtrl){
        event_user(3);  // CTRL object main drawing
    }
    
    //coin effects
    with (objPlantsCoinCollected){
        event_user(0);
    }
    with (objMakerCoinPart){
        draw_self();
    }
    
    //other effects
    with (objMakerCirclePart){
        event_perform(ev_draw, 0);
    }
    /*with (objPlantsSpider){
        draw_self();
    }*/
    with (objPlantsLaser){
        if (width &gt; 0){
            event_user(0);
        }
    }
    
    with (objPlantsMikuEffectCtrl){
        event_user(0);
    }
    with (objPlantsCtrl){
        event_user(4);  // CTRL object frontmost drawing
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
