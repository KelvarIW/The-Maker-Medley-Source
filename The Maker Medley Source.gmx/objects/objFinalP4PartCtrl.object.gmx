<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFinalP4DeleteParticle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-300</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>delPartSize = 500;
delPartsToCreate = 0;
recalculateEndpoints = false;

delPartColors = 10;
for (var i=delPartColors-1; i&gt;=0; i--){
    delPartColor[i] = merge_colour(c_white, c_aqua, (i+1)/delPartColors); //performance improvement (hopefully) over doing merge_colour() every time a particle is spawned
}

for(var i=delPartSize-1; i&gt;=0;i--){
    delPartExists[i] = false;
    delPartX[i] = -16;
    delPartY[i] = -16;
    delPartScale[i] = 0;
    delPartHspeed[i] = 0;
    delPartVspeed[i] = 0;
    delPartGrav[i] = 0;
    delPartAng[i] = 0;
    delPartRot[i] = 0;
    delPartBlend[i] = c_white;
}

for (var i=4; i&gt;=0; i--){
    delPartSpawnCoords[i] = -16; //ascending: x1, y1, x2, y2, num
}

mousePopupTimer = 0;
mouseIconAlpha = 0;
surf = -4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i=delPartSize-1; i&gt;=0;i--){
    if (delPartExists[i]){
        delPartScale[i] -= 1/12;
        if (delPartScale[i] &lt;= 0){ //no point moving it if it won't be drawn
            delPartExists[i] = false;
        }else{
            delPartX[i] += delPartHspeed[i];
            delPartY[i] += delPartVspeed[i];
            delPartVspeed[i] += delPartGrav[i];
            //delPartScale[i] -= 1/12; (See above)
            delPartAng[i] += delPartRot[i];
        }
    }
}
if (instance_exists(objFinalBossChar_4)){
    if (objFinalBossChar_4.erasable == 1 &amp;&amp; objFinalBossChar_4.erasingHP &gt; objFinalBossChar_4.erasingHPInit-40 &amp;&amp; objFinalBossChar_4.phase != 0){
        mousePopupTimer ++;
        mouseIconAlpha = min(mouseIconAlpha + 0.02, 0.6);
    }else{
        mouseIconAlpha = max(mouseIconAlpha - 0.02, 0);
        if (mousePopupTimer mod 80 &gt;= 40){
            mousePopupTimer ++;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ending mini-cutscene particles
/*
delPartSpawnCoords:
  -  0 = center x
  -  1 = center y
  -  2 = domain
  -  3 = range
  
delPartsToCreate = number of particles to spawn
*/
var _numSpawned = 0, _partInSegment = 6;
var _spd = 0, _ang = 0; //used for calculating trajectory (_ang is also used for calculating position)
var _rad = 0, _radMax = sqrt(sqr(delPartSpawnCoords[2]) + sqr(delPartSpawnCoords[3]))/2; //used for calculating position
for(var i=delPartSize-1; i&gt;=0;i--){
    if (!delPartExists[i]){
        delPartExists[i] = true;
        _rad = _radMax * (sqrt(random_range(0, 2))/2);
        _ang = random(360); //for position
        delPartX[i] = delPartSpawnCoords[0] + _rad * dcos(_ang);
        delPartY[i] = delPartSpawnCoords[1] + _rad * (-dsin(_ang));
        delPartScale[i] = 1;
        delPartAng[i] = irandom(72);
        delPartRot[i] = random_range(3,7)*choose(1, -1);
        _spd = random_range(4, 6);
        _ang = random(360); //for trajectory
        delPartHspeed[i] = _spd * dcos(_ang);
        delPartVspeed[i] = _spd * -(dsin(_ang));
        delPartGrav[i] = random_range(0.225, 0.425);
        delPartBlend[i] = delPartColor[irandom_range(0, delPartColors-1)];
        
        _numSpawned ++;
        if (_numSpawned &gt;= delPartsToCreate){
            break;
        }
    }
}
if (_numSpawned &lt; delPartsToCreate){
    var _difference = (delPartsToCreate - _numSpawned);
    for(var i=delPartSize + _difference - 1; i&gt;=delPartSize;i--){
        delPartExists[i] = true;
        _rad = _radMax * (sqrt(random_range(0, 2))/2);
        _ang = random(360);
        delPartX[i] = delPartSpawnCoords[0] + _rad * dcos(_ang);
        delPartY[i] = delPartSpawnCoords[1] + _rad * (-dsin(_ang));
        delPartScale[i] = 1;
        delPartAng[i] = irandom(72);
        delPartRot[i] = random_range(3,7)*choose(1, -1);
        _spd = random_range(4, 6);
        _ang = random(360);
        delPartHspeed[i] = _spd * dcos(_ang);
        delPartVspeed[i] = _spd * -(dsin(_ang));
        delPartGrav[i] = random_range(0.225, 0.425);
        delPartBlend[i] = delPartColor[irandom_range(0, delPartColors-1)];
        
        _numSpawned ++;
        if (_numSpawned &gt;= delPartsToCreate){
            break;
        }
    }
    delPartSize += _difference;
}
delPartsToCreate = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particles for "erasing" subphase

//Change delPartSpawnCoords if both endpoints are not touching the object
if (recalculateEndpoints &amp;&amp; instance_exists(objFinalBossChar_4)){
    //constrain coordinates to Mr. Scribble's bbox to avoid some unnecessary collision checks
    if (delPartSpawnCoords[0] &lt; objFinalBossChar_4.bbox_left || delPartSpawnCoords[0] &gt; objFinalBossChar_4.bbox_right){
        delPartSpawnCoords[0] = clamp(delPartSpawnCoords[0], objFinalBossChar_4.bbox_left, objFinalBossChar_4.bbox_right);
    }
    if (delPartSpawnCoords[1] &lt; objFinalBossChar_4.bbox_top || delPartSpawnCoords[1] &gt; objFinalBossChar_4.bbox_bottom){
        delPartSpawnCoords[1] = clamp(delPartSpawnCoords[1], objFinalBossChar_4.bbox_top, objFinalBossChar_4.bbox_bottom);
    }
    if (delPartSpawnCoords[2] &lt; objFinalBossChar_4.bbox_left || delPartSpawnCoords[2] &gt; objFinalBossChar_4.bbox_right){
        delPartSpawnCoords[2] = clamp(delPartSpawnCoords[2], objFinalBossChar_4.bbox_left, objFinalBossChar_4.bbox_right);
    }
    if (delPartSpawnCoords[3] &lt; objFinalBossChar_4.bbox_top || delPartSpawnCoords[3] &gt; objFinalBossChar_4.bbox_bottom){
        delPartSpawnCoords[3] = clamp(delPartSpawnCoords[3], objFinalBossChar_4.bbox_top, objFinalBossChar_4.bbox_bottom);
    }
    with (objMouseClickCheck){
        var _lerpVal = -4, _lerpInc = 0;
        if (!place_meeting(other.delPartSpawnCoords[0], other.delPartSpawnCoords[1], objFinalBossChar_4)){
            _lerpVal = 0;
            _lerpInc = 1;
        }else if (!place_meeting(other.delPartSpawnCoords[2], other.delPartSpawnCoords[3], objFinalBossChar_4)){
            _lerpVal = 1;
            _lerpInc =-1;
        }
        
        if (_lerpInc != 0){
            for (var i=1; i&lt;=10; i++){
                if (place_meeting(lerp(other.delPartSpawnCoords[0], other.delPartSpawnCoords[2], _lerpVal + (_lerpInc * i/10)), lerp(other.delPartSpawnCoords[1], other.delPartSpawnCoords[3], _lerpVal + (_lerpInc * i/10)), objFinalBossChar_4)){
                    for (var j=1; j&lt;=10; j++){
                        if (j == 10 || (!place_meeting(lerp(other.delPartSpawnCoords[0], other.delPartSpawnCoords[2], _lerpVal + (_lerpInc * (i/10 - j/100))), lerp(other.delPartSpawnCoords[1], other.delPartSpawnCoords[3], _lerpVal + (_lerpInc * (i/10 - j/100))), objFinalBossChar_4))){
                            if (_lerpVal == 0){
                                other.delPartSpawnCoords[0] = lerp(other.delPartSpawnCoords[0], other.delPartSpawnCoords[2], _lerpVal + (_lerpInc * (i/10 - (j-1)/100)));
                                other.delPartSpawnCoords[1] = lerp(other.delPartSpawnCoords[1], other.delPartSpawnCoords[3], _lerpVal + (_lerpInc * (i/10 - (j-1)/100)));
                            }else{
                                other.delPartSpawnCoords[2] = lerp(other.delPartSpawnCoords[0], other.delPartSpawnCoords[2], _lerpVal + (_lerpInc * (i/10 - (j-1)/100)));
                                other.delPartSpawnCoords[3] = lerp(other.delPartSpawnCoords[1], other.delPartSpawnCoords[3], _lerpVal + (_lerpInc * (i/10 - (j-1)/100)));
                            }
                            i = 11;
                            j = 11;
                            break;
                        }
                    }
                }
            }
        }
    }
}

//Spawn particles
delPartsToCreate = ceil(delPartSpawnCoords[4]);
var _numSpawned = 0, _partInSegment = 6;
var _spd = 0, _ang = 0; //used for calculating trajectory
for(var i=delPartSize-1; i&gt;=0;i--){
    if (!delPartExists[i]){
        delPartExists[i] = true;
        delPartX[i] = clamp(lerp(delPartSpawnCoords[0], delPartSpawnCoords[2], ((_numSpawned div _partInSegment) + random_range(0, 0.99)) / (max(delPartsToCreate div _partInSegment, 0) + 1)) + irandom_range(-4, 4), delPartSpawnCoords[0], delPartSpawnCoords[2]) + irandom_range(0, 4);
        delPartY[i] = clamp(lerp(delPartSpawnCoords[1], delPartSpawnCoords[3], ((_numSpawned div _partInSegment) + random_range(0, 0.99)) / (max(delPartsToCreate div _partInSegment, 0) + 1)) + irandom_range(-4, 4), delPartSpawnCoords[1], delPartSpawnCoords[3]) + irandom_range(0, 4);
        delPartScale[i] = 1;
        delPartAng[i] = irandom(72);
        delPartRot[i] = random_range(3,7)*choose(1, -1);
        _spd = random_range(4, 6);
        _ang = random(360);
        delPartHspeed[i] = _spd * dcos(_ang);
        delPartVspeed[i] = _spd * -(dsin(_ang));
        delPartGrav[i] = random_range(0.225, 0.425);
        delPartBlend[i] = delPartColor[irandom_range(0, delPartColors-1)];
        
        _numSpawned ++;
        if (_numSpawned &gt;= delPartsToCreate){
            break;
        }
    }
}
if (_numSpawned &lt; delPartsToCreate){
    var _difference = (delPartsToCreate - _numSpawned);
    for(var i=delPartSize + _difference - 1; i&gt;=delPartSize;i--){
        if (!delPartExists[i]){
            delPartExists[i] = true;
            delPartX[i] = clamp(lerp(delPartSpawnCoords[0], delPartSpawnCoords[2], ((_numSpawned div _partInSegment) + random_range(0, 0.99)) / (max(delPartsToCreate div _partInSegment, 0) + 1)) + irandom_range(-4, 4), delPartSpawnCoords[0], delPartSpawnCoords[2]) + irandom_range(0, 4);
            delPartY[i] = clamp(lerp(delPartSpawnCoords[1], delPartSpawnCoords[3], ((_numSpawned div _partInSegment) + random_range(0, 0.99)) / (max(delPartsToCreate div _partInSegment, 0) + 1)) + irandom_range(-4, 4), delPartSpawnCoords[1], delPartSpawnCoords[3]) + irandom_range(0, 4);
            delPartScale[i] = 1;
            delPartAng[i] = irandom(72);
            delPartRot[i] = random_range(3,7)*choose(1, -1);
            _spd = random_range(4, 6);
            _ang = random(360);
            delPartHspeed[i] = _spd * dcos(_ang);
            delPartVspeed[i] = _spd * -(dsin(_ang));
            delPartGrav[i] = random_range(0.225, 0.425);
            delPartBlend[i] = delPartColor[irandom_range(0, delPartColors-1)];
            
            _numSpawned ++;
            if (_numSpawned &gt;= delPartsToCreate){
                break;
            }
        }
    }
    delPartSize += _difference;
}
//in case this User Event gets called accidentally (idk just being safe)
delPartsToCreate = 0;
delPartSpawnCoords[4] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_blend_mode(bm_add);
for(var i=delPartSize-1; i&gt;=0; i--){
    if (delPartExists[i]){
        draw_sprite_ext(sprFinalP4DeleteParticle, 0, delPartX[i], delPartY[i], 0.4*delPartScale[i], 0.4*delPartScale[i], delPartAng[i], delPartBlend[i], 0.5);
    }
}
draw_set_blend_mode(bm_normal);

if (instance_exists(objFinalBossChar_4)){
    if (mouseIconAlpha &gt; 0){
        var _rad = lerp(14, 20, (sin(global.count/88 * pi)/2 + 0.5));
        var _dir = (16)*global.count;
        draw_sprite_ext(sprFinalP4MousePopup, 0, objFinalBossChar_4.x + lengthdir_x(_rad, _dir), objFinalBossChar_4.y + lengthdir_y(_rad, _dir), 1, 1, 0, c_white, mouseIconAlpha);
    }
    
    if (mousePopupTimer mod 80 &gt;= 40){
        if (!surface_exists(global.sharedSurf)){
            global.sharedSurf = surface_create(800, 608);
        }
        if (surface_exists(global.sharedSurf)){
            surface_set_target(global.sharedSurf);
            draw_clear_alpha(c_black, 0);
            draw_set_font(fStageClear);
            draw_set_color(c_white);
            draw_set_halign(fa_center);
            draw_set_valign(fa_top);
            draw_text_transformed_outline(400, min(((objFinalBossChar_4.bbox_bottom+1 - view_yview) + 40), 300), "DELETE HIM!", 4, c_black, 24, 1.5, 0.8, 0);
            surface_reset_target();
        }
        
        if (surface_exists(global.sharedSurf)){
            draw_surface_ext(global.sharedSurf, view_xview, view_yview, 1, 1, 0, c_white, 0.667);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
