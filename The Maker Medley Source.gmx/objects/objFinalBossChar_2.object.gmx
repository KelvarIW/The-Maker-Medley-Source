<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMrScribble</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objFinalBossScribbleParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General Initialization

// Initialize
event_inherited();
// Overwrite Parent Default
currentHPVal = 1;

//attacks
counter = 0;
attack = 0;
delayFrames = 0;

//movement
yCent = ystart;
movementTimer = 0;
counter = 0;  // ending anim
endingAnimPart = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the leash
leashPieces = 11;
leashBreakPoint = floor(leashPieces * 0.64);
ropePiece[leashPieces-1] = -4; //I know this won't initialize the whole array to -4, but let's pretend it will :)

//leash variables
velX = 0;
velY = 0;
tensionX = 0;
tensionY = 0;
mass = 20;

x += leashPieces*4;
var _endX;
if (instance_exists(objFinalKurath)){
    _endX = objFinalKurath.x;
    y = objFinalKurath.y;
}else{
    _endX = x;
}
for(var i=0;i&lt;=(leashPieces-1);i++){
    ropePiece[i] = instance_create(lerp(x, _endX, i/(leashPieces-1)), y, objFinalP2Leash);
    ropePiece[i].instId = i;
    ropePiece[i].instIdMax = leashPieces;
    ropePiece[i].mass += (mass/4);
}

ropePiece[0].connection1 = id;
for(var i=1;i&lt;=(leashPieces-1);i++){
    ropePiece[i].connection1 = ropePiece[i-1];
}
for(var i=0;i&lt;=(leashPieces-1)-1;i++){
    ropePiece[i].connection2 = ropePiece[i+1];
}

with (ropePiece[(leashPieces-1)]){
    connection2 = objFinalKurath;
    anchorXOff = 10;
    anchorYOff = 64;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
    
if (surface_exists(glowSurf))
    surface_free(glowSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fly upwards to avoid laser
endingAnimPart ++;
switch(endingAnimPart){
    case 1:
        var _inst = instance_create(x, bbox_top - 8, objFinalKnightWarning);
        _inst.alarm[0] = 40;
        alarm[0] = 40;
        break;
    case 2:
        audio_play_sound(sndMakerSamplePunch, 0, 0);
        
        if (instance_exists(ropePiece[leashBreakPoint])){
            ropePiece[leashBreakPoint].connection2 = noone;
        }
        if (instance_exists(ropePiece[(leashBreakPoint+1)])){
            ropePiece[(leashBreakPoint+1)].connection1 = noone;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inherit parent code
event_inherited();

//Leash behavior
//velX = 2 + 3*(0.5 + sin(global.count * pi/80)/2);
//velY = 3*sin(global.count * pi/80);

//velY = -1 - 2*(0.5 + sin(global.count * pi/80)/2);
if (endingAnimPart &lt; 2){
    movementTimer ++;
    var _ang = point_direction(x, y, max(view_xview, 0)+300, view_yview+224)  +  18*(sin(movementTimer/80 * pi));
    var _spd = 11;
    velX = _spd * ( dcos(_ang));
    velY = _spd * (-dsin(_ang));
}

if (endingAnimPart == 1){
    counter += 1;
    var _mult = max(1 - (counter/40), 0);
    velX *= _mult;
    velY *= _mult;
}else if (endingAnimPart &gt;= 2){
    velX = 0;
    if (view_xview &gt;= room_width-800){
        velY = min(velY - 0.375, -16);
    }else{
        velY = min(velY - 0.195, -12);
    }
}

//reset tension variables
with (objFinalP2Leash){
    tensionX = 0;
    tensionY = 0;
}
tensionX = 0;
tensionY = 0;

//move Kurath
with (objFinalKurath){
    if (sprite_index == sprFinalKurathChaserDisintegrate){
        var _inst = other.ropePiece[(other.leashPieces-1)];
        if (instance_exists(_inst)){
            _inst.anchorXOff = 28  -  (40*image_xscale) * sin(pi/2*(1 - animCount/8));
            _inst.anchorYOff = 64  +  (220*image_yscale) * (1 - animCount/8);
        }
    }else if (!global.dead &amp;&amp; sprite_index == sprFinalKurathChaser){
        x += velX;
        if (instance_exists(objMakerCamera)){
            if (x &gt;= xstart + 240 &amp;&amp; view_xview &lt; room_width - 800){
                with (objMakerCamera){
                    xTo = min(other.x - 80, room_width - 800);
                    moveCam = true;
                }
            }
        }
    }
}

//make each segment "pull" its anchor
//for (var i=(leashPieces-1); i &gt;= 0; i--){
for (var i=0; i &lt;= (leashPieces-1); i++){
    with (ropePiece[i]){
        if (ropePhysics){
            event_user(0);  // Leash "Pull" behavior
        }
    }
}

//make each segment "tug" its lead
for (var i=(leashPieces-1); i &gt;= 0; i--){
    with (ropePiece[i]){
        if (ropePhysics){
            event_user(1);  // Leash "Tug" behavior
        }
    }
}

//Anchor piece of leash should never move
if (instance_exists(ropePiece[(leashPieces-1)])){
    //Prepare for User Event 3
    with (objFinalP2Leash){
        xprevious = x;
        yprevious = y;
    }
    
    with (ropePiece[(leashPieces-1)]){
        if (instance_exists(connection2)){
            x = connection2.x + anchorXOff;
            y = connection2.y + anchorYOff;
            event_user(3); //snap connected pieces
        }
    }
    
    connection2 = objFinalKurath;
    anchorXOff = -28;
    anchorYOff = 64;
}
//modified from leash object User Event 1
var _ropeLength = 12, _connection2 = (ropePiece[0]);
if (instance_exists(_connection2)){  // "connection2"
    var _anchorX = _connection2.x + (_connection2.velX+_connection2.tensionX);
    var _anchorY = _connection2.y + (_connection2.velY+_connection2.tensionY);
    var _destX = (x + (velX+tensionX));
    var _destY = (y + (velY+tensionY));
    var _xDiff = (_anchorX - _destX);
    var _yDiff = (_anchorY - _destY);
    var _xExcess = 0, _yExcess = 0;
    var _tDist = sqrt( sqr(_xDiff) + sqr(_yDiff) );
    
    if (_tDist &gt; _ropeLength &amp;&amp; _ropeLength &gt;= 0){
        _xExcess = _xDiff * ((_tDist-_ropeLength)/_tDist);
        _yExcess = _yDiff * ((_tDist-_ropeLength)/_tDist);
        
        var _tensionMult = _connection2.mass/(_connection2.mass + mass);
        tensionX += _xExcess * _tensionMult;
        tensionY += _yExcess * _tensionMult;
        _connection2.tensionX -= _xExcess * (1 - _tensionMult);
        _connection2.tensionY -= _yExcess * (1 - _tensionMult);
    }
}

//Move leash objects based on velocity and tension
for (var i=0; i &lt; leashPieces; i++){
    with (ropePiece[i]){
        velX += tensionX;
        velY += tensionY;
        x += velX;
        y += velY;
    }
}

/*
with (ropePiece[(leashPieces-1)]){
    if (instance_exists(connection2)){
        if (connection2.sprite_index = sprFinalKurathChaserDisintegrate){  // should be detatched
            x = (connection2.x + 28)  -  (40*connection2.image_xscale) * sin(pi/2*(1 - connection2.animCount/8));
            y = (connection2.y + 64)  +  (608*connection2.image_yscale) * (1 - connection2.animCount/8);
            //event_user(3);  // Kurath dissolve adjustment
        }else{
            x = (connection2.x + 28);
            y = (connection2.y + 64);
        }
    }
}
*/

velX += tensionX;
velY += tensionY;
x += velX;
y += velY;

if (bbox_bottom &lt;= -280){  // why check `gravity &lt; 0`?  (Kelvar)  // just safety
    // destroy leash pieces that are connected to us
    for (var i=0; i &lt; leashPieces; i++){
        with (ropePiece[i]){
            instance_destroy();
            if (!instance_exists(connection2)){
                break;
            }
        }
    }
    //instance_destroy();  // Char_2 needs to exist to manage any remaining leash objects
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_blend == c_white){
    if (bbox_bottom &gt; 0 &amp;&amp; image_alpha &gt;= 1){
        if (iframes &gt; 0){
            if (iframes &lt;= iframesWhenHit/3)
                storedHit = true;
        }else{
            scrFinalScribbleDamage();
        }
    }
    with (other){
        x = xprevious;
        y = yprevious;
        scrMoveContactObject(sign(hspeed), 0, abs(hspeed), other);
        scrMoveContactObject(0, sign(vspeed), abs(vspeed), other);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
    
if (surface_exists(glowSurf))
    surface_free(glowSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
