<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerBubbleStart</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Collisions
if (sprite_index == sprMakerBubbleStart || sprite_index == sprTriggerMask){
    if (place_meeting(x, y, objMakerTelePlayer) &amp;&amp; !instance_exists(objMakerBubble)){
        with (objMakerTelePlayer){
            if (instance_exists(objPlayer)){
                event_user(1);
            }else{
                var _fade;
                _fade = instance_create(x, y, objMakerTeleFade);
                _fade.sprite_index = sprite_index;
                _fade.image_xscale = xScale;
                _fade.hspeed = -hspeed/2.5;
                audio_play_sound(sndMakerTeleCancel, 0, 0);
            }
            instance_destroy();
        }
    }
    if (place_meeting(x, y, objPlayer) &amp;&amp; !instance_exists(objMakerBubble)){
        with (objPlayer){
            if (!place_meeting(x, y, objBlock) &amp;&amp; !place_meeting(x, y, objMakerSpikeUp)){
                var _x = floor(x);
                var _y = floor(y);
                if (place_meeting(_x, _y, objBlock) || place_meeting(_x, _y, objMakerSpikeUp)){
                    _x = ceil(x);
                    _y = ceil(y);
                    if (place_meeting(_x, _y, objBlock) || place_meeting(_x, _y, objMakerSpikeUp)){  // ???
                        _x = x;
                        _y = y;
                    }
                }
                
                x = _x;  y = _y;  xprevious = x;  yprevious = y;
                instance_create(x, y, objMakerBubble);
                audio_play_sound(sndMakerPowerUp, 0, 0);
            }
        }
    }
    image_index = global.count*8/50;
}else if (sprite_index == sprMakerBubbleEnd){
    if (place_meeting(x, y, objPlayer) &amp;&amp; instance_exists(objMakerBubble)){
        with (objMakerBubble){
            event_user(0);
        }
    }
    //Visual
    var _index = global.count*8/50;
    if (_index &gt;= 4)
        _index -= 4;
    if (_index &lt; 3)
        image_index = _index;
    else
        image_index = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
