<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTriggerMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xPos = 0;
xView = 0;
spawnNext = 1;
counterSurf = -4;

topPipeY = -1;
topPipeYMin = 0;
topPipeYMax = 0;
topPipeYInc = 0;

botPipeYMin = 0;
botPipeYMax = 0;
botPipeYInc = 0;
botPipeY = -1;
counterAlpha = 0;
counterScore = 0;

spawnButtonAt = 5388;
positionCap = 6188;

drawXOff = 0;
drawYOff = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(counterSurf))
    surface_free(counterSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (xPos &gt; positionCap){
    xPos = positionCap;
}
//if (xPos - 276 &gt; 300*min(15, spawnNext) + 400*clamp(0, spawnNext - 15, 4) + 550*max(0, spawnNext - 19) &amp;&amp; spawnNext &gt; 0 &amp;&amp; spawnNext &lt;= 24){
var _singlePipes = 4;
var _doublePipes = 3;
var _triplePipes = 3;
if (xPos &gt; 300*min(_singlePipes, spawnNext) + 400*clamp(spawnNext - _singlePipes, 0, _doublePipes) + 550*max(spawnNext - (_singlePipes+_doublePipes), 0) &amp;&amp; spawnNext &gt; 0 &amp;&amp; spawnNext &lt;= (_singlePipes + _doublePipes + _triplePipes) + 1){
    switch(spawnNext){
        case 1:
            topPipeY = 304 - 128;
            botPipeY = 304 + 128;
            break;
        case 2:
            topPipeY = 80;
            botPipeY = 240;
            break;
        case 3:
            topPipeY = 368;
            botPipeY = 528;
            break;
        case 4:
            topPipeY = 280;
            topPipeYMin = 120;
            topPipeYMax = 320;
            topPipeYInc = -2;
            botPipeY = 480;
            botPipeYInc = -2;
            botPipeYMin = 320;
            botPipeYMax = 520;
            break;
        case 5:
        case 9:
            if (spawnNext == 5)
                topPipeYInc = 2;
            else
                topPipeYInc = -1;
            botPipeYInc = topPipeYInc;
            topPipeY = 280;
            topPipeYMin = 160;
            topPipeYMax = 320;
            botPipeY = 440;
            botPipeYMin = 320;
            botPipeYMax = 480;
            break;
        case 6:
        case 8:
            topPipeYMin = 120 + 40*(spawnNext mod 4 - 2);
            topPipeYMax = topPipeYMin + 140 + 40*(spawnNext mod 5);
            topPipeY = topPipeYMax - 120;
            if (spawnNext == 6)
                topPipeYInc = -2;
            else
                topPipeYInc = -1;
            botPipeYMin = 320 + 40*(spawnNext mod 4 - 2);
            botPipeYMax = botPipeYMin + 140 + 40*(spawnNext mod 5);
            botPipeY = botPipeYMax - 120;
            botPipeYInc = topPipeYInc;
            break;
        case 11:
            for(var i=0;i&lt;=4;i++){
                topPipeYMin = 180;
                topPipeYMax = 304;
                topPipeYInc = -pi/6;
                botPipeYMin = 304;
                botPipeYMax = 428;
                botPipeYInc = -topPipeYInc;
                var _pipe;
                _pipe = instance_create(872+120*i, 304, objS2FlappyPipe);
                _pipe.yMin = topPipeYMin;
                _pipe.yMax = topPipeYMax;
                _pipe.yInc = topPipeYInc;
                
                with (_pipe){
                    event_perform(ev_alarm, 0);
                    alarm[0] = -1;
                    sineVal = i*pi/9 + 3*pi/2;
                    image_yscale = -4;
                    scale = -1;
                }
                
                _pipe = instance_create(872+120*i, 304, objS2FlappyPipe);
                _pipe.yMin = botPipeYMin;
                _pipe.yMax = botPipeYMax;
                _pipe.yInc = botPipeYInc;
                _pipe.incrementCountX = 0;
                with (_pipe){
                    event_perform(ev_alarm, 0);
                    alarm[0] = -1;
                    sineVal = -(i*pi/9 + 3*pi/2);
                }
            }
            break;
        default:
            if (spawnNext mod 7 == 0 || spawnNext == 9 || spawnNext == 10){
                var _range;
                _range = (spawnNext mod 3)*40 + 120;
                topPipeYMin = (spawnNext*13.7) mod 480 + 64;
                if (topPipeYMin &lt; 64)
                    topPipeYMin = 64;
                if (topPipeYMin + 2*_range &gt; 544)
                    topPipeYMin = 544 - 2*_range;
                topPipeYMax = topPipeYMin + _range;
                topPipeY = topPipeYMin + _range*(0.2 + 0.6*(spawnNext mod 4)/3);
                botPipeYMin = topPipeYMax;
                botPipeYMax = botPipeYMin + _range;
                botPipeY = botPipeYMin + _range*(0.2 + 0.6*(spawnNext mod 4)/3);
                topPipeYInc = ((spawnNext mod 3.5) - 1.75)*1.4;
                botPipeYInc = topPipeYInc;
            }else{
                topPipeY = 140 + (173*spawnNext) mod 328;
                botPipeY = topPipeY + 96 + 128/max(1, (spawnNext*4.95) mod 3);
                if (botPipeY &gt; 544){
                    topPipeY -= botPipeY - 544;
                    botPipeY -= botPipeY - 544;
                }
            }
            break;
    }
    if (topPipeY != -1 || botPipeY != -1){
        var _pipe;
        var _totalPipes;
        if (spawnNext &gt;= (_singlePipes+_doublePipes)){
            _totalPipes = 3;
        }else if (spawnNext &gt; _singlePipes){
            _totalPipes = 2;
        }else{
            _totalPipes = 1;
        }
        for(var i=0; i&lt;_totalPipes; i++){
            if (topPipeY != -1){
                _pipe = instance_create(872+120*i, topPipeY, objS2FlappyPipe);
                _pipe.yMin = topPipeYMin;
                _pipe.yMax = topPipeYMax;
                _pipe.yInc = topPipeYInc;
                _pipe.overPeak = (spawnNext mod 3 == 0 || spawnNext mod 4 == 0);
                _pipe.scale = -1;
            }
            if (botPipeY != -1){
                _pipe = instance_create(872+120*i, botPipeY, objS2FlappyPipe);
                _pipe.yMin = botPipeYMin;
                _pipe.yMax = botPipeYMax;
                _pipe.yInc = botPipeYInc;
                _pipe.overPeak = (spawnNext mod 3 == 0 || spawnNext mod 4 == 0);
                if ((_totalPipes != 3 &amp;&amp; i == 0) || (_totalPipes == 3 &amp;&amp; i == 1)){
                    _pipe.incrementCountX = 0;
                    if (_totalPipes == 2){ //center is between the two pipes
                        _pipe.incrementCountX += 60;
                    }
                }
            }
        }
        topPipeY = -1;
        botPipeY = -1;
        topPipeYInc = 0;
        botPipeYInc = 0;
    }
    spawnNext ++;
}
if (xPos &gt; spawnButtonAt &amp;&amp; !instance_exists(objMakerButton)){
    var t_inst;
    t_inst = instance_create(1348, 304, objMakerButton);
    t_inst.image_xscale = -8;
    t_inst.image_yscale = 8;
    t_inst = instance_create(1348, 0, objBlock);
    t_inst.image_yscale = 19;
    t_inst = instance_create(804, 448, objBlock);
    t_inst.image_xscale = 17;
    t_inst.image_yscale = 7;
}

if (instance_exists(objS2FlappyShip)){
    objS2FlappyShip.x -= xPos - xView;
}
with (objSave){
    x -= other.xPos - other.xView;
    if (bbox_right &lt;= -3)
        instance_destroy();
}
with (objMakerCirclePart)
    x -= other.xPos - other.xView;
if (instance_exists(objMakerButton)){
    objMakerButton.x -= xPos - xView;
}
with (objBlock){
    x -= other.xPos - other.xView;
    if (bbox_right &lt;= -3)
        instance_destroy();
}
with (objS2FlappyPipe){
    if (incrementCountX != -1 &amp;&amp; x + incrementCountX &gt;= 230 &amp;&amp; x + incrementCountX - (other.xPos - other.xView) &lt; 230 &amp;&amp; instance_exists(objS2FlappyShip) &amp;&amp; !global.dead){
        other.counterScore ++;
        var _snd = audio_play_sound(sndMakerSampleOK, 0, 0);
        audio_sound_pitch(_snd, 1.1);
    }
    x -= other.xPos - other.xView;
}

xView = xPos;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(counterSurf))
    surface_free(counterSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.flappyStarted){
    with (objS2FlappyShip){
        openAngle = 0;
        active = true;
        sprite_index = sprS2FlappyShipActive;
        x -= 20;
        pHeadXOff = clamp(global.storedVal[0], -8, 8);
        if (global.storedVal[1] == -1)
            pHeadScale = -1;
        instance_destroy(objPlayer);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Tiles
if (xView &lt; 580){
    draw_set_color(make_color_rgb(65, 35, 49));
    draw_rectangle_offset(0-xView, 0, 255-xView, 1215, false);
    draw_rectangle_offset(256-xView, 416, 543-xView, 1215, false);
    draw_set_color(c_white);
    for(var i=288; i&lt;=480; i+=32){
        draw_sprite_offset(sprS2SmoothBlock, 2, i-xView, 384);
    }
    for(var j=0; j&lt;12; j+=1){
        draw_sprite_offset(sprS2SmoothBlock, 7, 256-xView, j*32);
    }
    for(var j=11; j&lt;38; j+=1){
        draw_sprite_offset(sprS2SmoothBlock, 7, 544-xView, j*32);
    }
    draw_sprite_offset(sprS2SmoothBlock, 4, 512-xView, 320);
    draw_sprite_offset(sprS2SmoothBlock, 5, 544-xView, 320);
    draw_sprite_offset(sprS2SmoothBlock, 6, 512-xView, 352);
    draw_sprite_offset(sprS2SmoothBlock, 3, 512-xView, 384);
    draw_sprite_offset(sprS2SmoothBlock, 1, 256-xView, 384);
}else if (xView &gt; (spawnButtonAt-88)){
    var t_brokenY, t_blockInd;
    t_brokenY = 672;
    if (instance_exists(objS2FlappyCrusher)){
        t_brokenY = objS2FlappyCrusher.highestY*32;
    }
    
    //left edge
    if (xView &lt;= positionCap){
        draw_sprite_offset(sprS2SmoothBlock, 4, positionCap - xView, 448);
        for(j=15;j&lt;38;j++){
            draw_sprite_offset(sprS2SmoothBlock, 6, positionCap - xView, 32*j);
        }
    }
    
    //top blocks (not breakable)
    for(i=max(0, ((positionCap+32) - xView)/32); i&lt;=25 &amp;&amp; (i &lt; floor((positionCap+256) - xView)/32 || (t_brokenY &gt; 448 &amp;&amp; i &lt; floor((positionCap+547) - xView)/32));i++){
        draw_sprite_offset(sprS2SmoothBlock, 2, 32*i, 448);
    }
    
    //breakable blocks
    if (t_brokenY &gt; 480){
        for(var i=floor((positionCap+256) - xView)/32; i&lt;=25 &amp;&amp; i &lt; floor((positionCap+547) - xView)/32; i++){
            draw_sprite_offset(sprS2SmoothBlock, 2, 32*i, 448);
        }
        if (t_brokenY &lt;= 640){
            for(var i=floor((positionCap+256) - xView)/32; i&lt;=25 &amp;&amp; i &lt; floor((positionCap+547) - xView)/32; i++){
                draw_sprite_offset(sprS2SmoothBlock, 9, 32*i, t_brokenY - 32);
            }
        }
    }else{
        if (t_brokenY == 480){
            for(var i=max(0, floor((positionCap+256) - xView)/32); i&lt;=25 &amp;&amp; i &lt; floor((positionCap+547) - xView)/32;i++){
                draw_sprite_offset(sprS2SmoothBlock, 0, 32*i, 448);
            }
        }else if (t_brokenY == 448){
            draw_sprite_offset(sprS2SmoothBlock, 12, (positionCap+224) - xView, 448);
        }else{
            draw_sprite_offset(sprS2SmoothBlock, 5, (positionCap+224) - xView, 448);
        }
    }
    
    //back wall
    for(var j=-2;j&lt;38;j++){
        draw_sprite_offset(sprS2SmoothBlock, 6, (positionCap+544) - xView, 32*j);
    }
    if (t_brokenY &gt; 480){
        draw_sprite_offset(sprS2SmoothBlock, 3, (positionCap+544)-xView, 448);
    }else if (t_brokenY == 480){
        draw_sprite_offset(sprS2SmoothBlock, 8, (positionCap+544)-xView, 448);
    }
    //Rectangles
    draw_set_color(make_color_rgb(65, 35, 49));
    //long rectangle
    draw_rectangle_offset((positionCap+ 32) - xView  - 0.5, 480  + 0.5, (positionCap+256) - xView  - 0.5, view_yview + 608  - 0.5, false);
    //tall rectangle
    draw_rectangle_offset((positionCap+576) - xView  - 0.5, view_yview  + 0.5, view_xview + 800  - 0.5, view_yview + 608  - 0.5, false);
    //cover breakable blocks
    if (t_brokenY &gt; 480){
        draw_rectangle_offset((positionCap+256) - xView  - 0.5, 480  + 0.5, (positionCap+608) - xView  - 0.5, t_brokenY-32  - 0.5, false);
    }
    draw_set_color(c_white);
    
    //left side of pit
    for(var j=max(15, t_brokenY/32);j&lt;38;j++)
        draw_sprite_offset(sprS2SmoothBlock, 7, (positionCap+224) - xView, 32*j);
    if (t_brokenY &gt; 480 &amp;&amp; t_brokenY &lt;= 640){
        draw_sprite_offset(sprS2SmoothBlock, 10, (positionCap+224) - xView, t_brokenY - 32);
        draw_sprite_offset(sprS2SmoothBlock, 11, (positionCap+544) - xView, t_brokenY - 32); // + pit top-right corner
    }
}


// "Score" Counter
if (drawXOff == 0 &amp;&amp; counterAlpha &gt; 0){
    if (!surface_exists(counterSurf))
        counterSurf = surface_create(128, 128);
    if (surface_exists(counterSurf)){
        surface_set_target(counterSurf);
        draw_clear_alpha(c_black, 0);
        draw_set_font(fFlappyCounter);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text_outline(64, 64, string(counterScore), 3, c_black, 12);
        surface_reset_target();
        
        draw_surface_ext(counterSurf, view_xview + 336, view_yview + 32, 1, 1, 0, c_white, counterAlpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
