<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTriggerMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>998</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(object_index) &gt; 1){
    instance_destroy();
}
if (room == rGeezer01 || room == rGeezerHitchcock){
    background_alpha[1] = 0.4 + 0.3*sin(global.count*pi/64);
    background_y[1] = (global.count - 1) mod 16;
    background_y[2] = -((global.count - 1) mod 16);
}
zililyCol = make_color_rgb(0, 2, 4);
sharkCol = make_colour_rgb(78, 78, 78);
patrickFailsafeCol = make_colour_rgb(0, 144, 255);
aceBrown = make_color_rgb(36, 23, 16);
NANGIntroColor =  make_color_rgb(0, 20, 81);
lobbyCol1 = make_color_rgb(0, 11, 126);
lobbyCol2 = make_color_rgb(0, 135, 161);

//drop shadows
drawXOff = 0;
drawYOff = 0;

lockBK = false;  // stop the scrolling lines in the Geezer fight during the ending cutscene
depthInit = depth;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!lockBK){
    if (room == rGeezer01 || room == rGeezerHitchcock){
        background_alpha[1] = 0.4 + 0.3*sin(global.count*pi/64);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lockBK = false;  // stop the scrolling lines in the Geezer fight during the ending cutscene
depth = depthInit;
background_alpha[0] = 1;
background_alpha[1] = 1;

switch(room){
    case rStage02Telejump:
        depth = -6;
    break;
    case rGeezer01:
    case rGeezerHitchcock:
        if (global.count mod 74 &lt; 54)
            background_alpha[2] = min(0.85, sin(pi*(global.count mod 74)/108));
        else
            background_alpha[2] = min(0.85, sin(pi*((global.count mod 74) - 34)/40));
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _resetShader = false;
if (room == rStage01Ace &amp;&amp; (!instance_exists(objS1Gravitron) || !objS1Gravitron.active)){
    draw_set_color(aceBrown);
    draw_rectangle(0-0.5, 0-0.5, 800-0.5, 608-0.5, false);
    draw_set_color(c_white);
    
    var i, j;
    for(j = 0; j &lt; 608; j += 32){
        for(i=-79; i &lt; 800; i += 128){ //~~1.5 per frame~~
            draw_background(bkGravitronPillarSmall, i, j);
        }
        for(i=-303; i &lt; 800; i += 272){ //~~2.0 per frame~~
            draw_background(bkGravitronPillarMedium, i, j);
        }
    }
    
    for(i=-273; i &lt; 830; i += 272){
        draw_sprite(sprS1GravitronTorch, global.count/3.75, i, 159);
        draw_sprite(sprS1GravitronTorch, global.count/3.75, i, 478);
    }
    
    for(j = 0; j &lt; 608; j += 32){
        for(i=-184; i &lt; 800;i += 272){ //2.5 per frame
            draw_background(bkGravitronPillarLarge, i, j);
        }
    }
}else if (room == rStage01Zilily){ //this will inflate my file size so much, but what choice do I have?
    draw_set_color(zililyCol);     //actually, Random, it really won't. Apparently sprite data is much smaller than you thought.  (Music, on the other hand...)
    //draw_rectangle(view_xview, view_yview, view_xview+800, view_yview+608, false);
    draw_sprite_ext(sprS1ZililyBK, global.count/2, 0, 0, 2, 2, 0, c_white, 1);
    draw_sprite_ext(sprS1ZililyBK, global.count/2, 800, 0, 2, 2, 0, c_white, 1);
    
    draw_set_color(c_black);
    draw_rectangle(1408  -0.5, 64  -0.5, 1536  +0.5, 544  +0.5, false);
    draw_set_color(c_white);
}else if (room == rStage01Purify){
    draw_background_tiled_ext(bkMakerSky, background_x[0], background_y[0], 1, 1, c_white, 1);
    with (objBeelzebubCtrl){
        if (global.hueshiftEnabled &amp;&amp; shaderAlpha &gt; 0){
            shader_set(shdHueShift);
            shader_set_uniform_f(global.hueshiftHandle, shaderCounter*pi/800);
            
            draw_background_tiled_ext(bkMakerSky, background_x[0], background_y[0], 1, 1, c_white, shaderAlpha);
            shader_reset();
        }
    }
}else if (room == rStage01Patrick){
    if (global.hueshiftEnabled){
        shader_set(shdHueShift);
        shader_set_uniform_f(global.hueshiftHandle, 1.745);
        draw_background_tiled(bkS2Abstr4ktNew, -(0.425*global.count mod 256), 0);
        shader_reset();
    }else{
        draw_set_color(c_white);
        draw_rectangle(0-0.5, 0-0.5, 800-0.5, 608-0.5, false);
        draw_background_tiled_ext(bkS2Abstr4ktShaderFailsafe, -(0.425*global.count mod 256), 0, 1, 1, patrickFailsafeCol, 1);
    }
}else if (room == rGeezer01){
    draw_set_color(c_black);
    draw_rectangle(-800, -608, 1600, 1216, false); //account for screen rotation
    draw_set_color(c_white);
}else if (room == rStage1to2Transition){
    draw_set_color(NANGIntroColor);
    draw_line_width(261, 0, 261, 608, 3);
    draw_line_width(267, 0, 267, 608, 3);
    draw_line_width(293, 0, 293, 608, 3);
    draw_line_width(538, 0, 538, 608, 3);
    draw_line_width(544, 0, 544, 608, 3);
    draw_line_width(506, 0, 506, 608, 3);
    draw_line_width(293, 192, 507, 192, 2); // -32
    draw_line_width(293, 197, 507, 197, 2); // -27
    draw_line_width(293, 212, 507, 212, 2); // -12
    draw_line_width(293, 426, 507, 426, 2);
    draw_line_width(293, 431, 507, 431, 2);
    draw_line_width(293, 446, 507, 446, 2);
    draw_set_color(c_white);
}else if (room == rStage02Flappy){
    var _pan = 0;
    with (objS2FlappyCtrl){
        _pan = (xPos div 20) mod 800;
    }
    draw_background(bkS2Flappy, view_xview - _pan, view_yview);
    draw_background(bkS2Flappy, view_xview - _pan + 800, view_yview);
}else if (room == rStage03Hub){
    scrDrawTexturedArea(global.knockoffBackTex, 0, 0, 0, 0, 800, 688);
    
    draw_background_part(tlS3Hub, 224, 96, 32, 16, 256, 688);
    draw_background_part(tlS3Hub, 224, 112, 32, 16, 512, 688);
}else if (room == rStage04New_1){
    //Abstr4kt
    scrDrawTiledArea(bkMakerSky, ((global.count+300) mod 500), 216, 64, 0, 608, 512);
    scrDrawTiledArea(bkMakerSky, ((global.count+472) mod 500), 360, 352, 80, 448, 544);  // platform climb section
    
    //Dice
    scrDrawTiledArea(bkMakerSky, ((global.count  +  (300 + 192)) mod 500), 108, 608, 0, 1120, 608);
    
    //Kurath
    var _height = 160;
    scrDrawTiledAreaExt(bkMakerSky, ((global.count  +  (300 + 100 + 308)) mod 500), (108 + 192), 628, 0  + _height, 896, 160  + _height, 1, -1, c_ltgray, 1);
    
    //Zilily
    if (!surface_exists(global.sharedSurf)){
        global.sharedSurf = surface_create(800, 608);
    }
    if (surface_exists(global.sharedSurf)){
        surface_set_target(global.sharedSurf);
        draw_clear_alpha(zililyCol, 1);  // clear with background color
        
        //background sprite
        var _leftCrop = 624/2;
        var _topCrop = 224/2;
        draw_sprite_part_ext(sprS1ZililyBK, global.count/2, _leftCrop, _topCrop, (400-_leftCrop), (304-_topCrop), 0, 0, 2, 2, c_white, 1);
        draw_sprite_part_ext(sprS1ZililyBK, global.count/2, 0, _topCrop, (1056-800)/2, (304-_topCrop), 2*(400-_leftCrop), 0, 2, 2, c_white, 1);
        
        draw_set_blend_mode(bm_subtract);
        //top left
        draw_rectangle(0, 0, 144, 32, false);
        //top right
        for (var i=0; i&lt;3; i++){
            draw_rectangle(336 + 32*i, 0, 336 + 32*(i+1), 128 + 32*i, false);
        }
        draw_set_blend_mode(bm_normal);
        surface_reset_target();
        
        if (surface_exists(global.sharedSurf)){
            draw_surface_part(global.sharedSurf, 0, 0, 432, 384, 464, 224);
        }
    }
}else if (room == rStage04New_2){
    //4-1 Dice
    scrDrawTiledArea(bkMakerSky, ((global.count+128) mod 500), 176, 1008, 176, 1508, 304);
    
    //Patrick
    if (global.hueshiftEnabled){
        shader_set(shdHueShift);
        shader_set_uniform_f(global.hueshiftHandle, pi/1.8); //100 degrees  =  100 * (pi/180)  =  pi/1.8
        scrDrawTiledArea(bkS2Abstr4ktNew, ((0.425*global.count)+96) mod 256, 0, 384, 256, 768, 608);
        
        _resetShader = true;
    }else{
        draw_set_color(c_white);
        draw_rectangle(0-0.5, 0-0.5, 800-0.5, 608-0.5, false);
        scrDrawTiledAreaExt(bkS2Abstr4ktShaderFailsafe, ((0.425*global.count)+96) mod 256, 0, 384, 256, 768, 608, 1, 1,  patrickFailsafeCol, 1);
    }
    
    //Purify
    //shader_set(shdHueShift);  // the shader is already set (if compiled) from the background of Patrick's stage
    if (global.hueshiftEnabled) {shader_set_uniform_f(global.hueshiftHandle, (2110 + global.count) * pi/800);}  // 0.225 degrees per frame  [180/800 = 0.225]
    var _top = 124;
    var _height = (500-124);
    var _left = (global.count+224) mod 500;
    draw_background_part_ext(bkMakerSky, _left, _top, 500 - _left, _height, 768, 264 + _height, 1, -1, c_white, 1);
    draw_background_part_ext(bkMakerSky, 0, _top, _left, _height, 1268 - _left, 264 + _height,  1, -1, c_white, 1);
    
    if (_resetShader){
        shader_reset();
    }
    
    //128
    scrDrawTexturedArea(global._128BackTex, 0, 0, 64, 256, 288, 608);
    
    //AceEmX
    if (!instance_exists(objS4Gravitron) || !objS4Gravitron.active){
        draw_set_color(aceBrown);
        draw_rectangle(64, 0, 528, 256, false);
        draw_set_color(c_white);
        
        var i, j;
        for(j = 0; j &lt; 608; j += 32){
            for(i=-79;i &lt; 1064;i += 128){ //1.5 per frame
                draw_background_ext(bkGravitronPillarSmall, 64+i/2.375, j/2.375, 1/2.375, 1/2.375, 0, c_white, 1);
            }
            for(i=-303; i &lt; 1064; i += 272){ //2.0 per frame
                draw_background_ext(bkGravitronPillarMedium, 64+i/2.375, j/2.375, 1/2.375, 1/2.375, 0, c_white, 1);
            }
        }
        
        for(i=-273; i &lt; 1135; i += 272){
            draw_sprite_ext(sprS1GravitronTorch, global.count/3.75, 64+i/2.375, 159/2.375, 1/2.375, 1/2.375, 0, c_white, 1);
            draw_sprite_ext(sprS1GravitronTorch, global.count/3.75, 64+i/2.375, 478/2.375, 1/2.375, 1/2.375, 0, c_white, 1);
        }
        
        for(j = 0; j &lt; 608; j += 32){
            for(i=-184; i &lt; 1064; i += 272){ //2.5 per frame
                draw_background_ext(bkGravitronPillarLarge, 64+i/2.375, j/2.375, 1/2.375, 1/2.375, 0, c_white, 1);
            }
        }
    }else{
        draw_set_color(c_black);
        draw_rectangle(64, 0, 528, 256, false);
        draw_set_color(c_white);
    }
}else if (room == rStage04New_3){
    //128
    scrDrawTexturedArea(global._128BackTex, 0, 32, 64, 480, 288, 608);
    
    //Shark 1 &amp; 2
    draw_set_color(sharkCol);
    draw_rectangle(96, 288, 288, 448, false);
    draw_rectangle(384, 320, 704, 448, false);
    draw_set_color(c_white);
    
    //Erik
    scrDrawTexturedArea(global.megaBackTex, 0, 0, 288, 352, 384, 448);
    
    //Klamy
    scrDrawTexturedArea(global.klamyBackTex, 0, 0, 704, 0, 992, 480);
    
    //(Abstr4kt is handled in objS2Abstrk4tNewRainbow)
}else if (room == rStage04New_4){
    //Thenewgeezer
    draw_set_color(c_black);
    draw_rectangle(64, 184, 432, 608, false);
    draw_set_color(c_white);
    
    //(Abstr4kt is handled in objS2Abstrk4tNewRainbow)
    
    //Vovka
    scrDrawTexturedArea(global.vovkaBackTex, 208, 0, 432, 0, 880, 480);
    
    //Flappy Fruit is going to be an experience
    with (objS4FlappyCtrl){
        scrDrawTiledArea(bkS2Flappy, 288 + ((((xView-xViewInit) + max(view_xview-roomViewXTo, 0)) div 20) mod 800), 0, 880, 0, 1536, 608);
    }
    //Never mind
}else if (room == rTMM_ClearLobby){
    draw_rectangle_colour(view_xview  -0.5, view_yview  -0.5, view_xview+view_wview  -0.5, view_yview+view_hview  -0.5, lobbyCol1, lobbyCol1, lobbyCol2, lobbyCol2, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rStage01Abstr4ktNew || room == rStage04New_1){
    draw_sprite_ext(sprMakerTree, 0, 51+drawXOff, 533+84+drawYOff, 1.75, 1.75, 0, c_white, 1);
    draw_sprite_ext(sprMakerTree, 0, 107+drawXOff, 520+48+drawYOff, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprMakerTree, 0, 209+drawXOff, 516+60+drawYOff, 1.25, 1.25, 0, c_white, 1);
    draw_sprite_ext(sprMakerTree, 0, 258+drawXOff, 528+48+drawYOff, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprMakerTree, 0, 310+drawXOff, 518+72+drawYOff, 1.5, 1.5, 0, c_white, 1);
    draw_sprite_ext(sprMakerTree, 0, 418+drawXOff, 521+48+drawYOff, 1, 1, 0, c_white, 1);
    if (room == rStage01Abstr4ktNew){
        draw_sprite_ext(sprMakerTree, 0, 614+drawXOff, 514+72+drawYOff, 1.5, 1.5, 0, c_white, 1);
        draw_sprite_ext(sprMakerTree, 0, 672+drawXOff, 520+48+drawYOff, 1, 1, 0, c_white, 1);
        draw_sprite_ext(sprMakerTree, 0, 750+drawXOff, 520+60+drawYOff, 1.25, 1.25, 0, c_white, 1);
    }
}else if (room == rStage01Ace &amp;&amp; instance_exists(objS1Gravitron)){
    draw_set_color(c_black);
    draw_rectangle(0, 0, 800, 608, false);
    draw_set_color(c_white);
}else if (room == rStage02Telejump){
    draw_set_color(c_white);
    with (objBlock)
        draw_rectangle(x, y, x + sprite_width - 1, y + sprite_height - 1, false);
}else if (room == rStage03Hub){
    for (var i=0; i&lt;=2; i++){
        draw_sprite(sprS3HubPortraits, i, 80+256*i, 368);
        if (global.SRCoin[i]){// xor (keyboard_check_pressed(ord(i+1)) &amp;&amp; global.debugMode){  // debug
            draw_sprite(sprS3HubPortraits, 3, 80+256*i, 368);
        }
    }
}else if (room == rStage04New_4){
    draw_set_color(c_white);
    with (objBlock){
        if (bbox_left &lt; 400 &amp;&amp; bbox_top &gt;= 184)
        draw_rectangle(x, y, x + sprite_width - 1, y + sprite_height - 1, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
