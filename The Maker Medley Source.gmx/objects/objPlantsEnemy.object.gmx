<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerKiller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
imgSpd = 1/15;
hp = 7;
hpLost = 0;  // how much hp to subtract when running User Event 1
dmg = 1;  // damage dealt to a plant when it's attacked
glowFrame = 0;
glowLen = 20;
subtype = 0;  // different behaviors in the same object
row = 0;

inheritAttacking = true;  // use default attacking behavior in parent
attacking = noone;
attackingTimer = 0;
attackingTimerLen = 30;

// Enemy death + gore
dead = false;
inheritGore = true;  // use default gore+destroying behavior in parent (destroying behavior can be disabled in scrPlantsEnemyStepEnd)
goreAmt = 0;
gore[0] = noone;
goreSpd = 1; //used to calculate hspeed multiplier for gore
bodyState = 0; //for creating gore and drawing the enemy in parts

// Crushing death (unused in TMM)
crushable = scrPlantsCrushable(object_index);
crushed = false;
usingCrushSurf = false;
crushTimer = 0;
preCrushX = x;
preCrushY = y;

shield = -4;
flag = -4;
shieldXOff = 0;
shieldYOff = 0;
visible = false;

image_xscale = 0;
image_yscale = 0;
scaleTo = 1;

moveDelay = 45;
wave = -1;
pushAmt = 0;
pushWeightMult = 1;

// Shadows
//scale of shadow sprite
automaticShadow = true;
shadowXScale = 1;
shadowYScale = 1;
shadowY = bbox_bottom - 6;
//sprite dimensions used to calculate shadow scale
automaticShadowInputs = true;
shadowInputWidth = sprite_width;
shadowInputHeight = sprite_height;

//ending death animation
frozen = false;
killing = false;
killingState = 0;
killingTimer = 0;  // for the action that *actually* kills the player
killingDelay = 120;  // delay between starting the game over scene and the enemy trying to kill the caged player
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(shield)){
    with (shield){instance_destroy();}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrPlantsEnemyStepEnd();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrPlantsEnemyStep();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Over `killing` animation
/* if (killingState == 0){

}else if (killingState == 1){
    
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadow
if (!dead){
    if (automaticShadow){
        var _shadowYOffset = -6;
        if (automaticShadowInputs){
            shadowY = (bbox_bottom+_shadowYOffset);
            shadowInputWidth = (bbox_right - bbox_left);
            shadowInputHeight = (shadowY - bbox_top);
        }
        if (shadowInputWidth &gt; 0 &amp;&amp; shadowInputHeight &gt; 0){
            var _shadowDim = scrPlantsShadow(shadowInputWidth, shadowInputHeight);
            draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, shadowY, _shadowDim[0], _shadowDim[1], image_angle, c_white, image_alpha);
        }
    }
}

/*  // shadow draw order does not matter
if (goreAmt &gt;= 1){
    for (var i=(goreAmt-1);i&gt;=0;i--){
        if (instance_exists(gore[i])){
            with (gore[i]){
                event_user(1);
            }
        }
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Gore
if (bodyState &gt;= 0 &amp;&amp; bodyState &lt; goreAmt){
    gore[bodyState] = instance_create(x, y, objPlantsGore);
    gore[bodyState].state = bodyState;
    gore[bodyState].sprite_index = sprite_index;
    gore[bodyState].image_index = image_index;
    gore[bodyState].drawSpr = gore[bodyState].sprite_index;
    gore[bodyState].glowSpr = gore[bodyState].drawSpr;
    gore[bodyState].drawInd = gore[bodyState].image_index;
    gore[bodyState].glowInd = gore[bodyState].drawInd;
    gore[bodyState].image_xscale = image_xscale;
    gore[bodyState].image_yscale = image_yscale;
    gore[bodyState].image_angle = image_angle;
    gore[bodyState].hspeed *= goreSpd;
    gore[bodyState].row = row;
    gore[bodyState].yBase = 160 + row*64 + 52;// + irandom_range(49, 57);
    with (gore[bodyState]){
        event_perform(ev_alarm, 0);  // set sprite offsets
    }
    bodyState ++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack Plant
if (!dead &amp;&amp; !killing &amp;&amp; instance_exists(attacking)){
    attackingTimer --;
    if (attackingTimer &lt;= 0){
        with (attacking){
            hp -= other.dmg;
            event_user(1);
        }
        attackingTimer = attackingTimerLen;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
if (!dead &amp;&amp; !killing){
    if (instance_exists(shield) &amp;&amp; !shield.fallen){
        with (shield){
            durability = 0;
            hspeed = random_range(0.8, 1.9)*other.goreSpd;
            vspeed = random_range(-2, -1);
            gravity = random_range(0.125, 0.149);
            fallen = true;
            glowFrame = 20;
        }
    }
    
    dead = true;
    glowFrame = 20;
    
    //create gore
    if (inheritAttacking){
        var _gore = (goreAmt-bodyState);
        if (_gore &gt;= 1){
            repeat(_gore){
                event_user(4);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage
if (!dead &amp;&amp; !killing &amp;&amp; hpLost &gt; 0){
    if (instance_exists(shield) &amp;&amp; !shield.fallen){
        with (shield){
            durability -= other.hpLost;
            if (durability &lt;= 0){
                hspeed = random_range(0.8, 1.9)*other.goreSpd;
                vspeed = random_range(-2, -1);
                gravity = random_range(0.125, 0.149);
                fallen = true;
            }else if (durability mod (image_index+1) == 0){
                event_user(1);
            }
            glowFrame = glowLen;
        }
    }else{
        glowFrame = glowLen;
        hp -= hpLost;
        if (hp &lt;= 0){
            event_user(2);
        }
        hpLost = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
if (goreAmt &gt;= 1){
    for (var i=(goreAmt-1);i&gt;=0;i--){
        if (instance_exists(gore[i])){
            with (gore[i]){
                event_user(0);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MAKES DEBUGGING EASIER
row = clamp(((y-160) div 64), 0, 5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
