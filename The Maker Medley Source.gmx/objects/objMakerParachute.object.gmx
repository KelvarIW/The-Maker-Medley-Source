<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerParachute</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>flipping = false;
flipAmt = 16;
angSine = 0;
scaleMult = 1;
image_speed = 1/6;
state = 0; //1 = picked up; 2 = flying away
yBase = ystart;
curveDir = 0; //disappearing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = (floor(image_index) mod 3);
if (room == rStage04New_1){
    image_index += 3;
}

switch(state){
    case 0:
        if (place_meeting(x, y, objPlayer) &amp;&amp; objPlayer.y &gt;= y - 8){
            state = 1;
            objPlayer.parachute = id;
            audio_play_sound(sndMakerParachuteGrab, 0, 0);
        }
        break;
    case 1:
        if (instance_exists(objPlayer)){
            x = objPlayer.x;
            yBase = objPlayer.y - 12*global.grav;
            
            // Red parachute shrink animation
            if (room == rStage04New_1){  // persists through landing
                var _shrink = false;
                    with (objPlayer){
                        if (parachute == other.id){
                            _shrink = place_meeting(x, y+global.grav, objBlock);
                        }
                    }
                if (_shrink){
                    image_xscale = max(image_xscale - scaleMult*1/20, 0);
                }else{
                    image_xscale = min(image_xscale + scaleMult*1/20, 1);
                }
                image_yscale = image_xscale;
            }
        }else{
            state = 2;
            hspeed = 3*dcos(image_angle + 90);
            vspeed = -1.8*sign(flipAmt);
            curveDir = -sign(hspeed);
            flipping = false;
            if (curveDir == 0){
                curveDir = 1;
            }
            audio_play_sound(sndMakerParachuteLost, 0, 0);
        }
        break;
    case 2:
        image_alpha -= 1/42;
        image_xscale -= scaleMult*13/840;
        image_yscale = image_xscale;
        if (image_alpha &lt;= 0 || image_xscale &lt;= 0 || image_yscale &lt;= 0){
            instance_destroy();
        }
        hspeed += curveDir/34;
        image_angle += sign(vspeed*hspeed)/28;
        break;
}

// Set y using yBase
if (state != 2){
    image_angle = 12*sin(global.count * pi/40);
    if (!flipping &amp;&amp; global.grav != sign(flipAmt)){
        flipping = true;
    }
    if (flipping){
        flipAmt += sign(global.grav);
        if (abs(flipAmt) &gt;= 16 &amp;&amp; sign(flipAmt) == sign(global.grav))
        {
            flipping = false;
            flipAmt = 16*sign(global.grav);
        }
    }
    y = (yBase) + 14.5*(flipAmt/16);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == 2){
    draw_sprite_ext(sprMakerParachute, image_index, x, y, image_xscale, image_yscale*flipAmt/16, image_angle, c_white, image_alpha);
    if (abs(flipAmt) != 16){
        draw_sprite_ext(sprMakerParachuteTop, image_index div 3, x, y - 14.5*flipAmt/16*image_yscale, image_xscale, image_yscale*(1-abs(flipAmt)/16), image_angle, c_white, image_alpha);
    }
}else if (!flipping){
    draw_sprite_ext(sprMakerParachute, image_index, x, y, image_xscale, image_yscale*sign(flipAmt), image_angle, c_white, image_alpha);
}else{
    draw_sprite_ext(sprMakerParachute, image_index, x, y, image_xscale, image_yscale*flipAmt/16, image_angle, c_white, image_alpha);
    if (abs(flipAmt) != 16){
        draw_sprite_ext(sprMakerParachuteTop, image_index div 3, x, y - 14.5*flipAmt/16*image_yscale, image_xscale, image_yscale*(1-abs(flipAmt/16)), image_angle, c_white, image_alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
