<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerTHRounded</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objMakerTHBullet</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ONLY for the Touhou section
//Not to be confused with objMakerTHBullet
event_inherited();
index = -1;
alarm[0] = 1;
value1 = 0;
value2 = 0;
value3 = 0;
value4 = 0;
value5 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alphaInc &lt; 0)
    exit;
switch(index){
    case 1:
    case 3:
    case 7:
        if (global.dead)
            break;
        index += 0.1;
        value3 = direction;
        value2 = -0.3;
        value5 = point_distance(xstart, ystart, x, y);
        break;
    case 4:
        if (global.dead)
            break;
        var i, _inst;
        for (i=0;i&lt;16;i++){
            _inst = instance_create(x, y, objTHBullet);
            _inst.index = 4.1;
            _inst.image_index = image_index;
            _inst.image_xscale = 2;
            _inst.image_yscale = 2;
            _inst.direction = value1 + 22.5*i;
        }
        audio_sound_pitch(audio_play_sound(sndMakerSamplePunch, 0, 0), random_range(1.4, 1.5));
        alarm[1] = 40;
        break;
    case 6:
        friction = -0.125;
        break;
    case 8:
        var _inst;
        _inst = instance_create(x, y, objTHBullet);
        _inst.direction = value3;
        _inst.index = 8.1;
        if (indexBase &gt; 0){ //orange
            _inst.image_index = 5;
        }
        
        audio_stop_sound(sndMakerSampleThrow);
        audio_sound_pitch(audio_play_sound(sndMakerSampleThrow, 0, 0), random_range(1.6, 1.7));
        alarm[1] = 6;
        break;
    case 9.3:
        speed = 3;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = true;
switch(index){
    case 1:
    case 3:
    case 7:
        sprite_index = sprMakerTHPointed;
        friction = speed/28;
        break;
    case 2:
        sprite_index = sprMakerTHOrb;
        gravity = 0.125;
        break;
    case 4:
        sprite_index = sprMakerTHOrb;
        if (value3 &lt; x)
            image_index = 8;
        else
            image_index = 4;
        image_xscale = 3;
        image_yscale = 3;
        break;
    case 4.1:
        sprite_index = sprMakerTHOrb;
        speed = 2.25;
        image_xscale = 2;
        image_yscale = 2;
        break;
    case 4.2:
        sprite_index = sprMakerTHOrb;
        speed = 3.5;
        break;
    case 5:
        sprite_index = sprMakerTHPointed;
        image_index = 30;
        value1 = 1;
        value2 = 16;  // speed
        value3 = value2;  // init speed
        break;
    case 5.1:
        sprite_index = sprMakerTHRounded;
        image_index = 20;
        value1 = 1.25; //speed multiplier for last part
        break;
    case 6:
        sprite_index = sprMakerTHPointed;
        speed = 3;
        image_index = 25;
        alarm[1] = 50;
        break;
    case 6.1:
        sprite_index = sprMakerTHOrb;
        image_index = irandom(6)*4;
        speed = 1;
        friction = -0.055;
        break;
    case 8:
        sprite_index = sprMakerTHOrb;
        image_xscale = 3;
        image_yscale = 3;
        value2 = direction + 72; //used to increment value3
        value3 = value2; //used to determine angle of THBullet
        alarm[1] = 3;
        if (value1 == 1)
            image_index = 0;
        else
            image_index = 4;
        break;
    case 8.1:
        sprite_index = sprMakerTHPointed;
        speed = 0.2;
        friction = -0.05;
        break;
    case 9:
        sprite_index = sprMakerTHOrb;
        image_index = 20;
        image_alpha = 0.5;
        image_xscale = 2;
        image_yscale = 2;
        break;
    case 9.1:
        sprite_index = sprMakerTHPointed;
        speed = 6;
        image_index = 30;
        break;
    case 9.2:
        sprite_index = sprMakerTHPointed;
        speed = 9;
        friction = 0.5;
        image_index = irandom(6)*5;
        break;
    case 9.3:
        sprite_index = sprMakerTHRounded;
        image_index = 20;
        speed = 8;
        friction = 0.6;
        alarm[1] = 10;
        break;
}

if (room == rFinalBoss_1){
    image_index = 20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (index == 1.1 || index == 3.1 || index == 7.1){
    value3 += value4*2;
    if (value2 &lt; 1)
        value2 = min(value2+0.015, 1);
    if (value2 &gt; 0)
        value5 += (1+(6-value1)*0.35)*value2;
    else if (value2 &lt; 0)
        value5 += (1+(value1)*0.5)*value2;
    if (value2 &gt;= 0.8){
        index += 0.1;
        speed = point_distance(x, y, xstart + lengthdir_x(value5, value3), ystart + lengthdir_y(value5, value3));
        direction = point_direction(x, y, xstart + lengthdir_x(value5, value3), ystart + lengthdir_y(value5, value3));
        friction = 0;
    }
    x = xstart + lengthdir_x(value5, value3);
    y = ystart + lengthdir_y(value5, value3);
}else if (index == 4){
    if (y &lt; 240){
        value2 = min(value2 + 1, 30);
        x = lerp(xstart, value3, value2/30);
        y = lerp(ystart, 240, value2/30);
        if (y &gt;= 240){
            y = 240;
            alarm[1] = 20 + 20*(x div 400);
        }
    }else
        value1 += 0.25;
}else if (index == 8){
    direction += value1*0.65;
    value4 += 3;
    value3 += (value2 div 45 + 1)*15.75;
    
    if (value4 &gt;= 576)
        instance_destroy();
    else{
        x = xstart + lengthdir_x(value4, direction);
        y = ystart + lengthdir_y(value4, direction);
    }
}else if (index == 9){
    if (value1 == 1 || value4 &lt; 1){
        if (value1 == 1){
            value3 ++;
        }else if (value4 &lt; 1){
            value4 += 1/10;
        }
        x = 304 + lengthdir_x(value2*value4, value3);
        y = 304 + lengthdir_y(value2*value4, value3);
    }
}

if (index != 8 &amp;&amp; speed == 0 &amp;&amp; (xprevious != x || yprevious != y)){
    direction = point_direction(xprevious, yprevious, x, y);
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (floor(index) == 5 &amp;&amp; instance_exists(objTHCtrl)){
    var _slowTop = objTHCtrl.slowdownY;
    var _slowBottom = (_slowTop + objTHCtrl.slowdownHeight);
    var _xComp = dcos(direction);
    var _yComp = -dsin(direction);
    var _slowdownMult = 1/8;
    var _postSlowMult = 1/4;
    
    if (_yComp &gt; 0){  // only affect bullets moving down
        if (index == 5.00 &amp;&amp; bbox_bottom + _yComp &gt; _slowTop){
            index = 5.01;  // no sub-index states  :(
        }
        if (index == 5.01){
            if (bbox_bottom + _yComp &gt; _slowTop &amp;&amp; bbox_top + _yComp &lt;= _slowBottom){  // inside slow field
                value2 = max(value2 - 2, value3*_slowdownMult);
            }else{  // outside slow field
                if (value2 &gt; value3*_postSlowMult){
                    value2 = max(value2 - 1, value3*_postSlowMult);
                }else if (value2 &lt; value3*_postSlowMult){
                    value2 = min(value2 + 0.2, value3*_postSlowMult);
                }
            }
        }
    }
    
    //movement
    x += value2*_xComp;
    y += value2*_yComp;
    //keep slowed down bullets inside or below the slowdown field
    if (index == 5.01 &amp;&amp; bbox_bottom &lt; _slowTop){
        y += (_slowTop - bbox_bottom);
    }
}else if (index == 8.1){
    if (speed &gt; 4.5){
        speed = 4.5;
        friction = 0;
    }
}else if (index == 9.2 || index == 9.3){
    if (speed &lt; 2){
        speed = 2;
        friction = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do nothing - drawn in Ctrl object
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
