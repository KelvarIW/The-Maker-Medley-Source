<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrLoadConfig();

sliderNum = 3;
sliderClicked = -1;
sliderSelected = -1;
sliderTopY = 400;
sliderYSep = 20;
sliderWidth = 360;
sliderHeight = 32;

sliderName[0] = "Main Volume";
sliderName[1] = "Music Volume";
sliderName[2] = "SFX Volume";

buttonNum = 2;
buttonY = 288;
buttonXSep = 320;
buttonClicked = -1;
buttonSelected = -1;

dblue = make_color_rgb(73, 74, 120);
nextButtonX = 688;
nextButtonY = 528;

transitioning = false;
transitionAlpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _playClick = false;  // after slider volume changes
var _buttonSelectedPrev = buttonSelected;
var _sliderSelectedPrev = sliderSelected;
buttonSelected = -1;
sliderSelected = -1;

if (!transitioning){
    mask_index = sprGUISquareButtons;
    
    // audio buttons
    for (var i=0; i&lt;buttonNum; i++;){
        x = 400 + buttonXSep*(i-0.5);
        y = buttonY;
        if (collision_point(mouse_x, mouse_y, id, true, false)){
            buttonSelected = i;
            
            if (mouse_check_button_released(mb_left)){
                buttonClicked = -1;
                audio_play_sound_nogroup(sndMakerMenuRelease, 0, 0);
                
                if (i == 0){
                    if (global.musicLevel &gt; 0 &amp;&amp; global.volumeLevel &gt; 0){
                        //audio_stop_sound(sndMakerSamplePinao);
                        var _snd = audio_play_sound(sndMakerSamplePinao, 0, 0);
                        audio_sound_gain(_snd, 0.4 * global.musicLevel/100 * global.volumeLevel/100, 0);
                    }
                }else if (i == 1){
                    if (global.sfxLevel &gt; 0 &amp;&amp; global.volumeLevel &gt; 0){
                        //audio_stop_sound(sndMakerSamplePunch);
                        var _snd = audio_play_sound(sndMakerSamplePunch, 0, 0);
                        audio_sound_gain(_snd, global.sfxLevel/100 * global.volumeLevel/100, 0);
                    }
                }
            }else if (mouse_check_button_pressed(mb_left)){
                buttonClicked = buttonSelected;
                audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
            }else if (_buttonSelectedPrev != buttonSelected){
                audio_play_sound_nogroup(sndMakerMenuSelect, 0, 0);
            }
        }
    }
    
    // "next" button ( -&gt; title )
    x = nextButtonX;
    y = nextButtonY;
    if (collision_point(mouse_x, mouse_y, id, true, false)){
        buttonSelected = 2;
        if (mouse_check_button_released(mb_left)){
            buttonClicked = -1;
            audio_play_sound_nogroup(sndMakerMenuRelease, 0, 0);
            transitioning = true;
        }else if (mouse_check_button_pressed(mb_left)){
            buttonClicked = buttonSelected;
            audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
        }else if (_buttonSelectedPrev != buttonSelected){
            audio_play_sound_nogroup(sndMakerMenuSelect, 0, 0);
        }
    }
    
    x = 0; y = 0;
    mask_index = -1;
    
    var _sliderLeft = (400 - sliderWidth/2);
    var _sliderRight = (400 + sliderWidth/2);
    var _sliderY = sliderTopY;
    var _pad = 0;
    for (var i=0; i&lt;sliderNum; i++;){
        if (point_in_rectangle(mouse_x, mouse_y, _sliderLeft, _sliderY, _sliderRight+_pad, _sliderY + sliderHeight)){
            sliderSelected = i;
            if (mouse_check_button_pressed(mb_left) &amp;&amp; sliderClicked != i){
                sliderClicked = i;
                _playClick = true;
            }else if (_sliderSelectedPrev != sliderSelected){
                audio_play_sound_nogroup(sndMakerMenuSelect, 0, 0);
            }
        }
        _sliderY += (sliderYSep + sliderHeight);
    }
    
    // slider behavior
    if (sliderClicked &gt;= 0){
        var _value = clamp((100*(mouse_x-_sliderLeft)/sliderWidth), 0, 100);
        if (sliderClicked == 0){
            global.volumeLevel = _value;
        }else if (sliderClicked == 1){
            global.musicLevel = _value;
        }else if (sliderClicked == 2){
            global.sfxLevel = _value;
        }
    }
    
    if (_playClick){
        audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
    }
    
    // reset clicked variables if appropriate
    if (mouse_check_button_released(mb_left) || !mouse_check_button(mb_left)){
        buttonClicked = -1;
        if (sliderClicked != -1){
            sliderClicked = -1;
            audio_play_sound_nogroup(sndMakerMenuRelease, 0, 0);
            scrSaveConfig();
        }
    }
}

if (transitioning){
    transitionAlpha += 0.1;
    if (transitionAlpha &gt;= 1){
        room_goto(rTitle);
        var _fade = instance_create(0, 0, objScreenFade);
        _fade.fade = 1;
        _fade.fadeOut = 0.04;
        _fade.alpha = 1 + _fade.fadeOut;
        _fade.color = c_white;
        
        _fade.persistent = true;
        _fade.depth = -4001;
        _fade.roomTo = rTitle;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

draw_set_font(fFlappyCounter);
draw_text(400, 112, "Volume Check");

draw_set_font(fDefault12);

var _sliderX = (400 - sliderWidth/2);
var _sliderY = sliderTopY;
for(var i=0; i&lt;sliderNum; i++;){
    if (i == 0){
        t_percent = global.volumeLevel;
    }else if (i == 1){
        t_percent = global.musicLevel;
    }else if (i == 2){
        t_percent = global.sfxLevel;
    }
    
    draw_sprite_stretched(sprMakerSettingsSlider, 1, _sliderX, _sliderY, sliderWidth, sliderHeight);
    draw_sprite_stretched(sprMakerSettingsSlider, 0, _sliderX, _sliderY, sliderWidth*(t_percent/100), sliderHeight);
    draw_set_halign(fa_left);
    scrDrawTextOutline(_sliderX, (_sliderY - sliderHeight/2) + 8, sliderName[i], c_white, dblue);
    draw_set_halign(fa_center);
    scrDrawTextOutline(400, (_sliderY + sliderHeight/2) + 2, string(roundSane(t_percent)), c_white, dblue);
    if (sliderSelected == i){
        draw_set_colour(c_white);
        // highlight slider
        draw_set_blend_mode(bm_add);
        draw_set_alpha(0.2);
        draw_rectangle(_sliderX, _sliderY, (_sliderX + (sliderWidth-1)), (_sliderY + (sliderHeight-1)), false);
        draw_set_alpha(1);
        draw_set_blend_mode(bm_normal);
    }
    _sliderY += (sliderYSep + sliderHeight);
}

var _buttonIndex = 0;
for (var i=0; i&lt;buttonNum; i++;){
    if (buttonSelected == i){
        if (buttonClicked == i){
            _buttonIndex = 2;
        }else{
            _buttonIndex = 1;
        }
    }else{
        _buttonIndex = 0;
    }
    draw_sprite(sprGUISquareButtons, 3 + 3*i + _buttonIndex, 400 + buttonXSep*(i-0.5), buttonY);
}

// "next" button ( -&gt; title)
if (buttonSelected == 2){
    if (buttonClicked == 2){
        _buttonIndex = 2;
    }else{
        _buttonIndex = 1;
    }
}else{
    _buttonIndex = 0;
}
draw_sprite(sprGUISquareButtons, 3 + 3*(2) + _buttonIndex, nextButtonX, nextButtonY);

if (transitionAlpha &gt; 0){
    draw_set_alpha(transitionAlpha);
    draw_rectangle(0  -0.5, 0  -0.5, 800  -0.5,  608  -0.5, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
