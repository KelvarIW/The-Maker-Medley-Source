<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGeezerCase</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>180</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phase = -1;
active = false;
sineVal = pi;
image_xscale = 7;
image_yscale = 7;
turnOn = false;
offAmt = 116;
staticFrames = 0;
staticIndex = 0;
particleDelay = 0;
squareDelay = 6;
projCount = 0;
projDelay = 0;
projSprite = noone;
projIndex = 0;
projAngle = 1/3;
phaseCounter = 0;
waiting = false; //waiting for the player to do something
hp = 60;
bkAlpha = 0;
megaEyeAngle = 0;
cursorAngle = 0;
cursorScale = 1;
zoomSine = pi;
bkFade = 0;
musicVol = 1; //fade out to Hitchcock

// Geezer Face
faceTrailNum = 0;
faceTrailMax = 20;
for (var i=(faceTrailMax-1); i&gt;=0; i--;){
    faceTrailX[i] = -999;
    faceTrailY[i] = -999;
    faceTrailAng[i] = 0;
}
faceColor = c_black;  // screen background color
faceAngle = 0;
faceIndex = 0;
faceFrame = 0;
faceFlashFrame = 0;
faceMoveSpeed = 4;
faceX = 0;
faceY = 0;
faceXPrev = faceX;
faceYPrev = faceY;
faceXTo = 0;
faceYTo = 0;
faceMovementPos = 0;
faceMovementLen = 0;

faceDizzyTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Display Sprite
staticFrames = 8;
audio_play_sound(sndGeezerStatic, 0, 0);
projSprite = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Scenery
bkAlpha = 0;
switch(phase){
    case 1:
        bkFade = 1;
        bkAlpha = 0;
        with(objGeezerBlock){
            blockSprite = sprGeezerVovkaTiles;
            if ((x == 0 || x == 768) &amp;&amp; (y == 384 || y == 576)){
                if (y == 384){
                    blockIndex = 0;
                }else if (y == 576){
                    if (x &lt; 400)
                        blockIndex = 3;
                    else
                        blockIndex = 4;
                }
            }else if (y == 576){
                blockIndex = 1;
            }else{
                blockIndex = 2;
            }
            blockAlphaMult = 0;
            blockFade = 1;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Phase
switch(phase){
    case 0:
    case 0.75:
        phase = 1;
        alarm[5] = 4;
        break;
    case 1:
        phase ++;
        waiting = false;
        phaseCounter = 0;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Final dialogue box
dialogueBox = instance_create(0, -115, objGeneralDialogue);
dialogueBox.text = "DIE DIE DIE";
dialogueBox.textLength = string_length("DIE DIE DIE");
dialogueBox.alarm[0] = -1;
dialogueBox.textDelay = 4;
dialogueBox.soundDelay = 4;
dialogueBox.subMessage = 5;
dialogueBox.speakerSprite = sprGeezerFace;
dialogueBox.speakerIndex = 6;
alarm[4] = 80;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Face Flashing Colors
faceColor=make_color_hsv(random(255), 127, 255);
if (global.screenshotMode){
    faceColor = $83ff80;
}
alarm[2] = 7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Computer
turnOn = true;
audio_play_sound(sndGeezerStartup, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///objGeezerMegaEye collisions w/ objBullet
with (objBullet){
    if (place_meeting(x, y, objGeezerMegaEye)){
        var _inst = noone, _instDist = 999;
        // only register collision with closest enemy
        with (objGeezerMegaEye){
            if (place_meeting(x, y, other) &amp;&amp; abs(x - other.xprevious) &lt; _instDist){
                _inst = id;
                _instDist = abs(x - other.xprevious);
            }
        }
        // trigger collision code
        with (_inst){
            event_user(0);
        }
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Post-virus hit facial-expression flashing
if (phase == 0.5){
    if (faceFrame mod 3 == 0){
        faceFlashFrame = (faceFlashFrame + irandom_range(1, 3)) mod 6;
    }
    faceFrame += 1;
}

if (!global.dead){
    switch(phase){
        case 1:
            megaEyeAngle = 22.5*global.countPersistent;
            if (waiting &amp;&amp; phaseCounter &lt; 520){
                var _stopWaiting = (!instance_exists(objGeezerMegaEye));
                if (phaseCounter &lt; 460){  // stop "waiting" before all are destroyed
                    if ((!buff() &amp;&amp; phaseCounter &lt; 240 &amp;&amp; instance_number(objGeezerMegaEye) &lt;= 2) || (buff() &amp;&amp; ((phaseCounter &lt; 240 &amp;&amp; instance_number(objGeezerMegaEye) &lt;= 3) || (instance_number(objGeezerMegaEye) &lt;= 2)))){
                        _stopWaiting = true;
                    }
                }
                
                if (_stopWaiting){
                    waiting = false;
                }
            }
            
            if (!waiting){
                phaseCounter ++;
                if (phaseCounter == 1){
                    // reveal Met enemies
                    with (objMakerSpikeUp){
                        instance_create(bbox_left + sprite_width/2, bbox_bottom, objGeezerMegaMet);
                        nokill = 1;
                        if (x &lt; 400){
                            hspeed = -1.4;
                            vspeed = -2.2;
                        }else{
                            hspeed = 1.4;
                            vspeed = -2.2;
                        }
                        gravity = 0.0875;
                    }
                    audio_play_sound(sndMakerSampleGlass, 0, 0);
                }
                
                if (phaseCounter == 20){
                    staticFrames = 8;
                    audio_play_sound(sndGeezerStatic, 0, 0);
                    projSprite = sprGeezerMegaEyeBlur;
                    scrIdentAttack(rGeezer01, 0);
                }
                if (phaseCounter &gt;= 20 &amp;&amp; phaseCounter &lt;= 170 &amp;&amp; (phaseCounter-20) mod 30 == 0){
                    projDelay = 14;
                }
                if (phaseCounter == 190){
                    audio_play_sound(sndGeezerStatic, 0, 0);
                    staticFrames = 8;
                    projSprite = sprGeezerGuide1;
                    waiting = true;
                    alarm[6] = 28;
                }
                if (phaseCounter == 240){
                    staticFrames = 8;
                    audio_play_sound(sndGeezerStatic, 0, 0);
                    projSprite = sprGeezerMegaEyeBlur;
                }
                if (phaseCounter &gt;= 240 &amp;&amp; phaseCounter &lt;= 390 &amp;&amp; (phaseCounter-240) mod 30 == 0){
                    projDelay = 8;
                    if (phaseCounter == 390){waiting = true;alarm[6] = 18;}
                }
                if (phaseCounter == 442){
                    staticFrames = 8;
                    audio_play_sound(sndGeezerStatic, 0, 0);
                    projSprite = sprGeezerMegaEyeBlur;
                }
                var _delay = 8;
                if (!buff()){
                    _delay = 10;
                }
                if (phaseCounter &gt;= 450 &amp;&amp; phaseCounter &lt;= 490 &amp;&amp; ((phaseCounter-450) mod _delay) == 0){
                    var _total = (490 - 450) div _delay;
                    var _num = (other.phaseCounter - 450) div _delay;
                    var _pos = 0;
                    // from outer; to center
                    if ((_num mod 2) == 0){
                        _pos = (_num div 2);
                    }else{
                        _pos = (_total - (_num div 2));
                    }
                    
                    var _inst = instance_create(x, y, objGeezerMegaEye);
                    var _x = 400 + 300*(2*(_pos/_total) - 1);
                    
                    with (_inst){
                        speed = 4.2;
                        rotatingAngle = other.megaEyeAngle;
                        gravity = 0.18;
                        
                        /*if (buff()){
                            if (t_count == 0 || t_count == 5){
                                slideSpd += 6/3;
                            }else if (t_count == 1 || t_count == 4){
                                slideSpd += 4/3;
                            }else if (t_count == 2 || t_count == 3){
                                slideSpd += 2/3;
                            }
                        }else{
                            slideSpd += 0.5;
                        }*/
                        slideSpd += 0.5;
                        
                        //if (other.phaseCounter &gt;= 474){_x += 100;}
                        if (_x != 400){
                            direction = scrBallisticAngle(x, y, _x, 560, speed, gravity, 1);
                        }else{
                            direction = 270;
                        }
                        /*if (buff()){
                            hp = 2;
                        }else{
                            hp = 1;
                        }*/
                        hp = 1;
                    }
                    audio_play_sound(sndGeezerThrow, 0, 0);
                    if (phaseCounter == 490){audio_play_sound(sndGeezerStatic, 0, 0); staticFrames = 8; waiting = true; alarm[6] = 18;}
                }
                if (phaseCounter == 532){
                    audio_play_sound(sndGeezerStatic, 0, 0);
                    staticFrames = 8;
                    projSprite = sprGeezerCursor;
                    
                    with (objGeezerMegaMet){
                        shootDelay = -1;
                    }
                    with (objMakerTHBullet){
                        nokill = true;
                        alphaDec = 0.04;
                    }
                }
                if (phaseCounter == 540){
                    waiting = true;
                    zoomSine = 0;
                    with (instance_create(400, 96, objMakerBossHP)){
                        hp = 20;
                        hpMax = hp;
                    }
                    bkFade = -1;
                    with (objGeezerBlock){
                        blockFade = -1;
                    }
                }
            }
            break;
        case 2:
            if (!waiting){
                phaseCounter ++;
                if (phaseCounter &gt;= 26 &amp;&amp; phaseCounter &lt;= 71 &amp;&amp; ((phaseCounter - 26) mod 15 == 0)){
                    audio_play_sound(sndGeezerStatic, 0, 0);
                    staticFrames = 8;
                    projSprite = sprGeezerPacPhantom;
                    projIndex = ((phaseCounter - 26) div 15) * 4;
                }
                if (phaseCounter &gt;= 40 &amp;&amp; phaseCounter &lt;= 85 &amp;&amp; ((phaseCounter - 40) mod 15 == 0)){
                    with (instance_create(x, y, objGeezerPacGhost)){
                        color = ((other.phaseCounter - 26) div 15);
                        destX += 56*color;
                        direction = scrBallisticAngle(x, y, destX, destY, speed, gravity, -1);
                    }
                    audio_play_sound(sndGeezerThrow, 0, 0);
                }
                if (phaseCounter == 86){
                    audio_play_sound(sndGeezerStatic, 0, 0);
                    staticFrames = 24;
                    projSprite = sprGeezerGuide2;
                    alarm[6] = 48;
                }
                if (phaseCounter == 142){
                    instance_create(0, 0, objGeezerPacCtrl);
                    waiting = true;
                }
                if (phaseCounter == 178){
                    audio_play_sound(sndGeezerStatic, 0, 0);
                    staticFrames = 8;
                    projSprite = sprGeezerCursor;
                }
                if (phaseCounter == 186){
                    waiting = true;
                    zoomSine = 0;
                    instance_create(400, 96, objMakerBossHP);
                    with (objMakerBossHP){
                        hp = 20;
                        hpMax = hp;
                    }
                    bkFade = -1;
                    with (objGeezerBlock) blockFade = -1;
                }
            }
            break;
        case 3:
            phaseCounter ++;
            if (musicVol &gt; 0){
                musicVol -= 1/48;
                if (musicVol &lt;= 0){
                    audio_stop_sound(global.currentMusic);
                    with (objWorld)
                        playMusic = false;
                }else
                    audio_sound_gain(global.currentMusic, musicVol * 0.4*global.musicLevel/100 * global.volumeLevel/100, 0);
            }
            if (phaseCounter == 48){
                staticFrames = 34;
                projDelay = 64;
                projSprite = sprGeezerCursor;
                audio_play_sound(sndGeezerStatic, 0, 0);
            }
            break;
    }
    
    // Shooting
    if (projDelay &gt; 0){
        projDelay --;
        if (projDelay &lt;= 0){
            projAngle += 2.2;
            switch(projSprite){
                case sprGeezerMegaEyeBlur:
                    with (instance_create(x, y, objGeezerMegaEye)){
                        rotatingAngle = other.megaEyeAngle;
                        alarm[0] = 38 + 12*sin(other.projAngle*2);
                        speed = 6.2 + 1.4*sin(other.projAngle);
                        direction = radtodeg(other.projAngle*2.3) mod 180;
                        /*if ((floor(other.phaseCounter-420) mod 16) &lt; 8 || true){  // debug
                            lowestY -= 32;
                        }*/
                        var _range = 0;
                        if (buff()){
                            _range = 1.28;
                        }else{
                            _range = 1.28 - 0.72;
                        }
                        slideSpd += _range * abs(sin(other.projAngle*1.13));
                    }
                    audio_play_sound(sndGeezerThrow, 0, 0);
                    break;
            }
        }
    }
    
    // Turning on/off
    if (turnOn){
        offAmt -= 8;
        if (offAmt &lt;= 0){turnOn = false;offAmt = 0;}
    }
    
    if (projSprite == sprGeezerCursor &amp;&amp; staticFrames &lt;= 0){
        if (instance_exists(objPlayer)){
            cursorAngle = point_direction(x, y, objPlayer.x, objPlayer.y) - 125;
            
            if (phase &lt; 3){
                if (cursorScale == 1) audio_play_sound(sndGeezerCursorCharge, 0, 0);
                cursorScale += 7/34;
                if (cursorScale &gt;= 8){
                    cursorScale = 1;
                    audio_play_sound(sndGeezerCursorShoot, 0, 0);
                    instance_create(-96, 52, objGeezerLaser);
                    with (objGeezerMegaMet){
                        instance_create(x-16, y-32, objMakerSpikeUp);
                        instance_destroy();
                    }
                    with (instance_create(x, y, objGeezerCursor)){
                        image_angle = other.cursorAngle;
                    }
                    projSprite = noone;
                }
            }else if (projDelay &gt; 0){
                projDelay --;
                if (projDelay &lt;= 0){
                    with (instance_create(x, y, objGeezerCursor)){
                        image_angle = other.cursorAngle;
                        targetGeezer = false;
                        audio_play_sound(sndGeezerCursorShoot, 0, 0);
                    }
                    projSprite = noone;
                }
            }
        }
    }
}else{
    // Reset Display Sprite
    if (projSprite != noone){
        if (staticFrames == 0){
            event_perform(ev_alarm, 6);
            alarm[6] = -1;
        }else{ //already showing static
            projSprite = noone; //reset the displayed sprite
        }
    }
}

// Background Changes
if (bkFade == 1 &amp;&amp; bkAlpha &lt; 1){bkAlpha += 0.035; if (bkAlpha &gt; 1) bkAlpha = 1; background_alpha[0] = bkAlpha;}
else if (bkFade == -1 &amp;&amp; bkAlpha &gt; 0){bkAlpha -= 0.02; background_alpha[0] = bkAlpha;}

// Shared Geezer visual effects
event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.dead || instance_exists(objGeezerPacCtrl) || instance_exists(objGeezerMegaEyeCollider)) exit;
if (instance_exists(objGeezerCursor) &amp;&amp; hp &gt; 60 - 20*phase &amp;&amp; (objGeezerCursor.pickedUp || global.debugNoDeath)){
    hp --;
    with(objMakerBossHP){
        event_user(0);
    }
    if (hp &lt;= 60 - 20*phase){
        hp = 60 - 20*phase;
        var _snd = audio_play_sound(sndGeezerDamage, 0, 0);
        audio_sound_pitch(_snd, PITCH_FLUCT);
        with (objGeezerCursor){
            event_user(0);
            with (instance_create(drawPX, drawPY, objPlayer)){
                xScale = other.drawPScale;
                sprite_index = sprPlayerFall; //for the practice mode
                alarm[0] = -1;
                alarm[1] = -1;
            }
            //if (other.phase == 2) objPlayer.frozen = true;
        }
        sineVal = 0;
        faceAngle = 1440;
        with (objGeezerLaser){fade = -1;sprite_index = sprGeezerLaserOff}
        if (global.practicing &amp;&amp; global.practiceWaypointEnd == phase)
            scrPracticeEnd();
    }
    with (other){
        x = xprevious;
        scrMoveContactObject(sign(hspeed), 0, abs(hspeed), other);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Geezer Face and trail
var _cent = 112;

if (!surface_exists(global.sharedSurf)){
    global.sharedSurf = surface_create(800, 608);
}
if (surface_exists(global.sharedSurf)){
    surface_set_target(global.sharedSurf);
    draw_clear_alpha(c_black, 0);
    
    // Eye/Mouth values for expanding effect
    var _eyeXOff = 8, _eyeYOff = -6, _mouthYOff = 8;
    var _eyeDist = point_distance(0, 0, _eyeXOff, _eyeYOff);
    var _eyeRDir = point_direction(0, 0, _eyeXOff, _eyeYOff);
    var _eyeLDir = point_direction(0, 0, -_eyeXOff, _eyeYOff);
    var _mouthDist = _mouthYOff, _mouthDir = 270;
    
    //dizzy
    var _dizzyAngChange = 8;
    var _dizzyMag = 8;
    if (buff()){
        _dizzyAngChange = 8;
        _dizzyMag = 14;
    }
    _dizzyMag = 0;
    
    var _dizzyAngOff = (faceDizzyTimer*_dizzyAngChange);
    var _eyeLDizzyDef = 25, _eyeRDizzyDef = 225, _mouthDizzyDef = 90;
    var _eyeLDizzyCur = _eyeLDizzyDef + _dizzyAngOff;
    var _eyeRDizzyCur = _eyeRDizzyDef + _dizzyAngOff;
    var _mouthDizzyCur = _mouthDizzyDef + _dizzyAngOff;
    
    if (faceDizzyTimer != 0){
        _eyeLDizzyCur -= _dizzyAngChange * (faceTrailNum-1);
        _eyeRDizzyCur -= _dizzyAngChange * (faceTrailNum-1);
        _mouthDizzyCur -= _dizzyAngChange * (faceTrailNum-1);
    }
    
    // Draw expanding trail
    var _scaleInit = 7, _scaleInc = 2;
    var _scale = 1, _alpha = 0;
    var _amt = 0;  // used for calculating effects based on value of `i` in regards to faceTrailMax
    for (var i=max(faceTrailNum-1, 0); i&gt;=0; i--;){
        _amt = ((i+1)/(faceTrailMax+1));
        _scale = _scaleInit  +  (_scaleInc * _amt);
        _alpha = 0.72*(1 - _amt);
        if (i == 0){
            _alpha = 1;
        }
        
        // sprite
        draw_sprite_ext(sprGeezerFace, 7, _cent + faceTrailX[i]  +  _scale * (lengthdir_x(_eyeDist, faceTrailAng[i] + _eyeLDir))     +  (_dizzyMag * ( dcos(_eyeLDizzyCur)  - dcos(_eyeLDizzyDef)) ), _cent + faceTrailY[i]  +  _scale*(lengthdir_y(_eyeDist, faceTrailAng[i] + _eyeLDir))  +  (_dizzyMag * -( dsin(_eyeLDizzyCur) - dsin(_eyeLDizzyDef) )), -_scale, _scale, faceTrailAng[i], c_white, _alpha);  // left eye
        draw_sprite_ext(sprGeezerFace, 7, _cent + faceTrailX[i]  +  _scale * (lengthdir_x(_eyeDist, faceTrailAng[i] + _eyeRDir))     +  (_dizzyMag * ( dcos(_eyeRDizzyCur)  - dcos(_eyeRDizzyDef)) ), _cent + faceTrailY[i]  +  _scale*(lengthdir_y(_eyeDist, faceTrailAng[i] + _eyeRDir))  +  (_dizzyMag * -( dsin(_eyeRDizzyCur) - dsin(_eyeRDizzyDef) )), _scale, _scale, faceTrailAng[i], c_white, _alpha);  // right eye
        draw_sprite_ext(sprGeezerFace, 8, _cent + faceTrailX[i]  +  _scale * (lengthdir_x(_mouthDist, faceTrailAng[i] + _mouthDir))  +  (_dizzyMag * ( dcos(_mouthDizzyCur) - dcos(_mouthDizzyDef)) ), _cent + faceTrailY[i]  +  _scale*(lengthdir_y(_mouthDist, faceTrailAng[i] + _mouthDir))  +  (_dizzyMag * -( dsin(_mouthDizzyCur) - dsin(_mouthDizzyDef) )), _scale, _scale, faceTrailAng[i], c_white, _alpha);
        
        // dizzy offset
        if (faceDizzyTimer != 0){
            _eyeLDizzyCur += _dizzyAngChange;
            _eyeRDizzyCur += _dizzyAngChange;
            _mouthDizzyCur += _dizzyAngChange;
        }
    }
    surface_reset_target();
    
    if (surface_exists(global.sharedSurf) &amp;&amp; visible){  // visible check is for objGeneralDialogue
        draw_surface_part(global.sharedSurf, 0, 0, 2*_cent, 2*_cent, x-_cent, y-_cent);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shared Geezer Visual Effects

// Virus Particles and Squares
var _fightActive = false;
if (object_index == objGeezerBoss){
    _fightActive = (phase &gt; 0.5);
}else if (object_index == objGeezerSurvival){
    _fightActive = (active &amp;&amp; (!dying || (dieCounter &gt;= 310 &amp;&amp; dieCounter &lt; 380)));
}
if (_fightActive){
    particleDelay --;
    if (particleDelay &lt;= 0 &amp;&amp; staticFrames &lt;= 0){
        instance_create(x + irandom_range(-100, 100), y + irandom_range(-95, 95), objGeezerVPart);
        particleDelay = 4;
    }
    squareDelay --;
    if (squareDelay &lt;= 0){
        instance_create(choose(-40, 840), irandom_range(50, 558), objGeezerSquare);
        squareDelay = 28;
    }
}

// Static effect
if (staticFrames &gt; 0){
    staticIndex += 1/3;
    staticFrames --;
    if (staticFrames &lt;= 0){
        audio_stop_sound(sndGeezerStatic);
    }
}

// Cursor appearance zoom
if (zoomSine &lt; pi &amp;&amp; staticFrames &lt;= 0){
    if (zoomSine &lt; pi/2) zoomSine += pi/68;
    else zoomSine += pi/20;
    if (zoomSine &gt; pi)
        zoomSine = pi;
    view_xview = 147*sin(zoomSine);
    view_wview = 800 - 2*view_xview;
    view_yview = 80*sin(zoomSine);
    view_hview = view_wview * 608/800;
}

// Hurt Screen tilting
if (sineVal &lt; pi){
    if (sineVal &lt; pi/2) sineVal += pi/18;
    else sineVal += pi/36;
    
    if (sineVal &gt;= pi){
        sineVal = pi;
        view_angle = 0;
        
        if (object_index == objGeezerBoss){
            if (phase &lt; 0.75){
                phase = 0.75;
                event_perform(ev_alarm, 0);
                event_perform(ev_alarm, 2);
                if (instance_exists(objGeezerCutscene)){
                    var _skipping = objGeezerCutscene.skipping;
                    with (objGeezerCutscene){
                        instance_destroy();
                    }
                    if (!_skipping &amp;&amp; (alarm[3] &gt; 10 || alarm[3] &lt;= 0)){  //shorten alarm time
                        alarm[3] = min(alarm[3], 10);
                    }
                }
            }
        }
    }else{
        view_angle = -50*sin(sineVal);
    }
}

// [GEEZER FACE]

// Update face trail array
// ** Must be before "Move face position" **
for (var i=(faceTrailNum-1); i&gt;=1; i--;){
    faceTrailX[i] = faceTrailX[(i-1)];
    faceTrailY[i] = faceTrailY[(i-1)];
    faceTrailAng[i] = faceTrailAng[(i-1)];
}
faceTrailX[0] = faceX;
faceTrailY[0] = faceY;
faceTrailAng[0] = faceAngle;

if (_fightActive){
    faceTrailNum = min(faceTrailNum + 1, faceTrailMax);
}

// Move face position
faceMoveSpeed = 4 + 3*clamp(1 - hp/60, 0, 1);
if (object_index == objGeezerSurvival){
    faceMoveSpeed += 2*clamp(counter/40, 0, 1);
}
if (!buff()){
    //faceMoveSpeed = floor(faceMoveSpeed * 0.92);  // makes buffed mode look cooler
}
faceMovementPos += faceMoveSpeed;

if (faceMovementPos &gt;= faceMovementLen){
    faceX = faceXTo;
    faceY = faceYTo;
    faceXPrev = faceX;
    faceYPrev = faceY;
    
    var _mag = 0;
    if (hp &lt;= 0){
        _mag = 8;
        if (object_index == objGeezerSurvival){
            if (faceAngle == 0 &amp;&amp; dieCounter &lt; 120){  // get `dieCounter` threshold from objGeezerSurvival step event
                faceDizzyTimer ++;
            }else{
                _mag = 20;
                faceDizzyTimer = 0;
            }
        }
    }else{
        _mag = 8 + 3*clamp((60-hp)/20, 0, 3);
        if (object_index == objGeezerSurvival){
            _mag += 4*clamp(counter/40, 0, 1);
        }
    }
    if (faceAngle != 0){
        _mag -= 2;
    }
    
    faceXTo = (_mag - irandom_range(0, 4)) * choose(1, -1);
    faceYTo = (_mag - irandom_range(0, 4)) * choose(1, -1);
    
    faceMovementPos = 0;
    faceMovementLen = max( roundSane(point_distance(faceXPrev, faceYPrev, faceXTo, faceYTo)), 1);
}else{
    faceX = lerp(faceXPrev, faceXTo, faceMovementPos/faceMovementLen);
    faceY = lerp(faceYPrev, faceYTo, faceMovementPos/faceMovementLen);
}

// Rotate face at end of shooting phase
if (faceAngle &gt; 0){
    faceAngle -= 30;
    if (faceAngle &lt;= 0){
        faceAngle = 0;
        if (object_index == objGeezerBoss){
            if (!global.practicing || global.practiceWaypointEnd &gt; phase){
                if (phase == 1){
                    alarm[4] = 30;
                }else if (phase == 2){
                    phase = 3;
                    waiting = false;
                    phaseCounter = 0;
                }
            }
        }else if (object_index == objGeezerSurvival){
            alarm[6] = 18;
        }
    }
}
// [End GEEZER FACE]
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Practice mode start
if (global.practicing){
    if (global.practiceWaypointStart &lt;= 1){
        phase = global.practiceWaypointStart + 1;
        hp = 60 - 20*(phase-1);
        
        // skip opening to Pac-Man
        if (phase == 2){
            for (var i=0; i&lt;4; i++;){
                with (instance_create(x, y, objGeezerPacGhost)){
                    color = i;
                    destX += 56*color;
                    
                    x = destX;
                    y = destY;
                    speed = 0;
                    gravity = 0;
                    image_xscale = 1;
                    image_yscale = 1;
                }
            }
            phaseCounter = 142;
            instance_create(0, 0, objGeezerPacCtrl);
            waiting = true;
        }
    }else{ //shouldn't be in this room
        room_goto(rGeezerHitchcock);
    }
    event_perform(ev_alarm, 2);
    alarm[4] = -1;
    alarm[5] = 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.infJump = false;
audio_stop_sound(global.BGMBoss2a);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phase == 1){
    draw_set_alpha(bkAlpha);
    scrDrawTiledArea(bkGeezerMegaSky, global.count mod 500, 0, 0, 0, 800, 608);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (staticFrames &gt; 0){
    draw_sprite_ext(sprGeezerStatic, staticIndex, x, y, 7, 7, 0, c_white, 1);
}else{
    if (phase == -1){
        draw_sprite_ext(sprGeezerFace, faceFrame, x, y, 7, 7, 0, c_white, 1);
        draw_set_color(c_black);
        draw_rectangle(x-112, y-112, x+112, y-112 + offAmt, false);  // total difference in x and y should be 32*7
        draw_rectangle(x-112, y+7 + (112-offAmt), x+112, y+112, false);  // total difference in x and y should be 32*7
        draw_set_color(c_white);
    }else if (phase == 0.5){
        draw_sprite_ext(sprGeezerFace, faceFlashFrame, x, y, 7, 7, 0, c_white, 1);
    }else if (phase &gt; 0.5){
        if (image_blend == c_white){
            draw_set_color(faceColor);
        }else{
            draw_set_color(merge_color(faceColor, image_blend, 0.5));
        }
        draw_rectangle(x-112 + 0.5, y-112 + 0.5, x+112 - 0.5, y+112 - 0.5, false);
        draw_set_color(c_white);
        
        if (projSprite != noone){
            if (projSprite == sprGeezerCursor){
                if (phase &lt; 3){draw_sprite_ext(sprGeezerCursor, 0, x, y, cursorScale, cursorScale, cursorAngle, c_white, 1);}
                else{draw_sprite_ext(sprGeezerCursor, 0, x, y, 8, 8, cursorAngle, c_white, 1);}
            }else if (projSprite == sprGeezerPacPhantom){
                draw_sprite_ext(sprGeezerPacPhantom, projIndex + ((floor(global.count) mod 20) div 5), x, y, 7, 7, 0, c_white, 1);
                draw_sprite_ext(sprGeezerPacPhantomEyes, projIndex + 3, x, y, 7, 7, 0, c_white, 1);
            }else if (projSprite == sprGeezerMegaEyeBlur){
                draw_sprite_ext(sprGeezerMegaEyeBlur, 0, x, y, 6/3, 6/3, megaEyeAngle, c_white, 1);
            }else{
                draw_sprite_stretched(projSprite, projIndex, x - 96, y - 96, 192, 192);
            }
        }else{
            event_user(2);  // Draw Geezer Face and trail
        }
    }
}
draw_self();

//Pac-Man Screenwrap
with (objPlayer){
    if (x &lt; 17 || x &gt; 783){
        var drawY = y;
        draw_sprite_ext(sprite_index,image_index,x - 800*sign(x - 400)+drawXOff, drawY,image_xscale*xScale,image_yscale*global.grav,image_angle,image_blend,image_alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
