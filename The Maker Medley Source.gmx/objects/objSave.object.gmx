<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerSave</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>12</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
canSave = true;
grav = 1;       //sets which player gravity this save works with

saveID = 1;
saveRoom = 0;
fadeout = false;

//Unused:
disabled = false;
disabledAlpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restore ability to save
canSave = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (canSave &amp;&amp; !fadeout){ //allow the button to remain green for a bit after being shot
    var _touchingPlayer = place_meeting(x, y, objPlayer);  // instance_exists(objPlayer) &amp;&amp; collision_point(objPlayer.x, objPlayer.y, id, true, false)
    if (room == global.endRoom){
        if (_touchingPlayer){
            image_index = 26;
        }else{
            image_index = 25;
        }
    }else if (room != rFinalBoss_3){
        if (_touchingPlayer &amp;&amp; grav == global.grav){
            if (global.practicing){
                if (global.practiceModeBuffed){
                    image_index = 19;
                }else{
                    image_index = 9;
                }
            }else{
                if (object_index == objMakerBossSaveHard){
                    image_index = 16;
                }else if (object_index == objMakerBossSave){
                    image_index = 6;
                }else{
                    image_index = 1;
                }
            }
        }else{
            if (global.practicing){
                if (global.practiceModeBuffed){
                    image_index = 18;
                }else{
                    image_index = 8;
                }
            }else{
                if (object_index == objMakerBossSaveHard){
                    image_index = 15;
                }else if (object_index == objMakerBossSave){
                    image_index = 5;
                }else{
                    image_index = 0;
                }
            }
        }
    }else{
        if (global.practicing){
            if (global.practiceModeBuffed){
                image_index = 23;
            }else{
                image_index = 13;
            }
        }else{
            if (object_index == objMakerBossSaveHard){
                image_index = 21;
            }else{
                image_index = 11;
            }
        }
        
        if (instance_exists(objFinalP3Player)){
            _touchingPlayer = collision_point(objFinalP3Player.x, objFinalP3Player.y, id, true, false);
        }
    }
    
    if (_touchingPlayer &amp;&amp; scrButtonCheckPressed(global.shootButton)){ //save if player is touching the save and shooting
        event_user(0);
    }
}

if (fadeout){
    if (image_alpha &gt; 0){
        image_alpha = max(image_alpha - 0.1, 0);
        
        if (image_alpha &lt;= 0){
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move player to save
var _movePlayer = (saveID == global.roomSaveTo &amp;&amp; (global.roomSaveTo &gt;= 1 &amp;&amp; room != rGeezer01));

//show_debug_message("running user event 2 for " + object_get_name(object_index) + "; saveID = " + string(saveID) + "; global.roomSaveTo = " + string(global.roomSaveTo));
if (_movePlayer){
    if (object_index == objMakerBossSave || object_is_ancestor(object_index, objMakerBossSave)){
        if (scrGetRoomNum(room) == scrGetRoomNum(rFinalBoss_1)){
            //show_debug_message("global.finalStartAtBuffed: " + string(global.finalStartAtBuffed) + "; (object_index == objMakerBossSaveHard || object_is_ancestor(object_index, objMakerBossSaveHard)): " + string((object_index == objMakerBossSaveHard || object_is_ancestor(object_index, objMakerBossSaveHard))));
            _movePlayer = (global.finalStartAtBuffed == (object_index == objMakerBossSaveHard || object_is_ancestor(object_index, objMakerBossSaveHard)));
            //show_debug_message("_movePlayer = " + string(_movePlayer) + " for " + object_get_name(object_index));
        }else{
            _movePlayer = !(object_index == objMakerBossSaveHard || object_is_ancestor(object_index, objMakerBossSaveHard));
            //show_debug_message("_movePlayer = " + string(_movePlayer) + " for " + object_get_name(object_index));
        }
    }
}

if (_movePlayer){
    //show_debug_message("moving player position to " + object_get_name(object_index));
    var _player = objPlayer;
    if (room == rFinalBoss_3){
        _player = objFinalP3Player;
    }
    
    if (instance_exists(_player)){
        with (_player){
            x = other.x + 1;
            y = other.y;
            
            //move bottom to save bottom (if possible)
            if (!place_meeting(x, y+7*abs(other.image_yscale)*global.grav, objBlock)){
                y += 7*abs(other.image_yscale)*global.grav;
            }else{
                scrMoveContactObject(0, global.grav, 7, objBlock);
            }
            
            if (other.object_index == objMakerBossSave || object_is_ancestor(other.object_index, objMakerBossSave)){
                scrMoveContactObject(0, 1, 64, objBlock);
            }
            xprevious = x;
            yprevious = y;
        }
        //show_debug_message("successfully moved player to " + object_get_name(object_index));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///save the game
var _player = objPlayer;
if (room == rFinalBoss_3){
    _player = objFinalP3Player;
}

if (canSave &amp;&amp; instance_exists(_player) &amp;&amp; global.grav == grav)
{
    if (!((_player.x &lt; -5 || _player.x &gt; room_width+5 || _player.y &lt; -5 || _player.y &gt; room_height+5) &amp;&amp; global.edgeDeath))  //make sure the player isn't saving outside the room to prevent save locking
    {
        var _roomNum = clamp(scrGetRoomNum(room), 0, global.stageRooms-1);
        global.roomProgress[_roomNum] = max(global.roomProgress[_roomNum], saveID, 1);
        global.farthestRoom = max(global.farthestRoom, _roomNum);
        
        if (_roomNum == scrGetRoomNum(rFinalBoss_1)){
            global.roomProgress[_roomNum] = max(global.roomProgress[_roomNum], scrGetFinalBossCheckpoint());
            if (buff()){
                global.finalBossBuffCheckpoint = max(global.finalBossBuffCheckpoint, scrGetFinalBossCheckpoint());
            }
        }
        if (!global.autosave){
            var _color = c_white, _coins = 0;
            if (room == rStage01Onetwentyeight){
                for (var i=0;i&lt;=3;i++){
                    if (global.QuadCoin[i] != global.QuadCoinAtStart[i])
                        _coins ++;
                    global.QuadCoinAtStart[i] = global.QuadCoin[i];
                }
            }else if (room == rStage03Hub){
                for (var i=0;i&lt;=2;i++){
                    if (global.SRCoin[i] != global.saveSRCoin[i]){
                        _coins ++;
                    }
                }
            }
            
            if (global.practicing){
                image_index = 7;
            }else{
                if (room == global.endRoom){
                    image_index = 27;
                }else{
                    image_index = 2;
                }
            }
            
            // blue coin animation
            if (_coins != 0 &amp;&amp; object_index == objSave){
                _color = make_color_rgb(83, 150, 200);
                image_index = 3;
                (instance_create(x, y+5, objMakerBlueCoinSaver)).coins = _coins;
            }
            
            // circular particles
            if (!global.screenshotMode){
                if (room == rFinalBoss_3){
                    _color = c_white;
                }else{
                    _color = make_color_rgb(143, 200, 82);
                }
                
                if (room == rTMM_ClearLobby){
                    var _saveColorDefault = _color;
                    _color = make_color_rgb(247, 194, 61);
                    scrMakeStars(x, y+6*image_yscale, 90, 5, random_range(3, 4.2), 1, objMakerCirclePart);
                    with (objMakerCirclePart){
                        if (color == _saveColorDefault &amp;&amp; roomStart == room){  // using `roomStart` to track if they've been created before
                            color = _color;
                            depth = -7;
                            speed *= random_range(1.4, 1.6);
                            direction += random_range(-2.24, 2.24);
                            roomStart = rInit;
                        }
                    }
                }else{
                    repeat(irandom_range(10, 17)){
                        t_part = instance_create(x, y+6*image_yscale, objMakerCirclePart);
                        t_part.color = _color;
                        t_part.depth = -7;
                    }
                }
            }
            canSave = false; //make it so that the player can't save again immediately
            alarm[0] = 30;   //set alarm so the player can save again
            if (room == rTMM_ClearLobby){
                var _snd = audio_play_sound(sndMakerSave, 0, 0);
                audio_sound_pitch(_snd, PITCH_FLUCT);
                audio_sound_gain(_snd, 0.7, 0);
                
                _snd = audio_play_sound(sndMakerSampleApplause, 0, 0);
                audio_sound_pitch(_snd, PITCH_FLUCT);
                audio_sound_gain(_snd, 1.3, 0);
            }else{
                var _snd = audio_play_sound(sndMakerSave, 0, 0);
                audio_sound_pitch(_snd, PITCH_FLUCT);
            }
        }else{
            global.autosave = false;
        }
        if (!global.practicing){
            scrSaveGame(true);
        }
        event_user(1); //for special saves
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 0;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if (disabledAlpha &gt; 0){
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_gray, disabledAlpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
