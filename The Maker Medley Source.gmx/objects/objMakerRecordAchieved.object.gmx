<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-400</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer = 0;

strType = "!!!";
subtext = "!!!";
ident = 0;
lifespan = 240;
col1 = make_color_rgb(234, 210, 100);
col2 = make_color_rgb(173, 146, 24);

scrSaveGame(false);

var _snd = audio_play_sound(sndMakerSampleApplausePersist, 0, 0);
audio_sound_pitch(_snd, 1 + 2*(PITCH_FLUCT-1));  // twice as much fluctuation
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer ++;
if (timer &gt;= lifespan){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize text based on "ident"
var _strFirst = "First Clear!";
var _strPB = "Personal Best!";
var _strChallenge = "Challenge Complete!";
var _strPerfect = "Perfect Run!";
var _strBuffed = "Buffed Clear!";
var _strSep = "  -  ";

switch(floor(ident)){
    case 0:
    case 1:
    case 3:
    case 4:
        var _val = -1;
        var _type = (ident mod 1);
        
        if (_type == 0.0 || _type == 0.3){
            strType = _strFirst;
        }else if (_type == 0.1 || _type == 0.4){
            strType = _strPB;
        }else if (_type == 0.2 || _type == 0.5){
            strType = _strPerfect;
        }
        
        if (floor(ident) == 0){
            if (global.challengeMode){
                _val = global.beelzHardHitLowest;
            }else{
                _val = global.beelzHitLowest;
            }
            subtext = "Fly of Beelzebub";
            col2 = make_color_rgb(84, 11, 27);
        }else if (floor(ident) == 1){
            if (global.challengeMode){
                _val = global.chaozHardHitLowest;
            }else{
                _val = global.chaozHitLowest;
            }
            subtext = "Chaoz Airflow";
            col2 = make_color_rgb(33, 41, 54);
        }else if (floor(ident) == 3){
            _val = global.undertaleHitLowest;
            subtext = "Knockoff Undertale";
            col2 = c_white;
            //col2 = make_color_rgb(31, 77, 52);
        }else if (floor(ident) == 4){
            _val = global.touhouHitLowest;
            subtext = "Knockoff Touhou";
            col2 = make_color_rgb(79, 29, 76);
        }
        
        // append text to fight name
        subtext += _strSep;
        if (_type &gt;= 0.3){  // buffed version (Beelz and Chaoz)
            subtext += "Buffed ";
        }
        subtext += scrLabelNumber(_val, "Hit", "Hits", "Hitless");
        show_debug_message("_val: " + string(_val));
        show_debug_message("global.beelzHitLowest: " + string(global.beelzHitLowest));
        show_debug_message("global.shieldHitsTaken: " + string(global.shieldHitsTaken));
        break;
    case 2:    // Geezer
        subtext = "Geezer" + _strSep;
        if (ident == 2.0){  // first clear
            strType = _strFirst;
            subtext += "Cleared";
        }else if (ident == 2.1){  // no autosaves
            strType = _strChallenge;
            subtext += "No Checkpoints";
        }else if (ident == 2.2){  // no hit
            strType = _strChallenge;
            subtext += "No Hit";
        }else if (ident == 2.3){  // no hit + no autosaves
            strType = _strPerfect;
            subtext += "No Hit/Checkpoint";
        }else if (ident == 2.4){  // buffed
            strType = _strBuffed;
            subtext += "Buffed";
        }
        col2 = make_color_rgb(181, 230, 29);
        break;
    case 5:    // Scribble
        subtext = "Mr. Scribble" + _strSep;
        if (ident == 5.0){  // first clear
            strType = _strFirst;
            subtext += "Cleared";
        }else if (ident == 5.1){  // buffed
            strType = _strBuffed;
            subtext += "Buffed";
        }else if (ident == 5.2){  // no autosaves
            strType = _strPerfect;
            subtext += "Saveless";
        }else if (ident == 5.3){  // Buffed + no autosaves
            strType = _strChallenge;
            subtext += "Buffed Saveless";
        }
        col2 = make_color_rgb(55, 55, 211);
        break;
    case 6:    // PvZ
        if (ident == 6.0){
            strType = _strFirst;
        }else if (ident == 6.1){
            strType = _strPB;
        }
        
        var _frames = floor(global.pvzFastest);
        var _minutes = (_frames div 3000);
        var _seconds = ((_frames - 3000*_minutes) / 50);  // includes milliseconds
        
        subtext = "Knockoff PvZ in " + string(_minutes) + ":" + string_format(_seconds, string_length(string(floor(_seconds))), 3);
        col2 = make_color_rgb(60, 41, 11);
        break;
    case 7:
        strType = _strChallenge;
        subtext = "Fractured Flashbacks - No Checkpoint";
        col2 = make_color_rgb(64, 36, 102);
        break;
}

if ((floor(ident) != 6 &amp;&amp; floor(ident) != 7) &amp;&amp; ident - floor(ident) == 0.0){  // 6 is PvZ, 7 is Flashbacks
    lifespan = 170;  // not really important
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.screenshotMode){exit;}
draw_set_font(fFlappyCounter);
draw_set_halign(fa_center);
draw_set_valign(fa_bottom);

var _amt = 1;
if (timer &lt; 30){
    _amt = timer/30;
    _amt = 1 - power(1 - _amt, 4);
}else if (timer &gt;= (lifespan-30)){
    _amt = (lifespan-timer)/30;
    _amt = 1 - power(1 - _amt, 4);
}

//Streamlined version of "get_coords_relative_toview()" in GMS2 engine
var _distFromCenter = abs(304 - (-28 + 180 * _amt));
var _dirFromCenter = 90;
var _returnX;
var _returnY;

_returnX = view_xview + view_wview/2 + lengthdir_x(_distFromCenter+60, _dirFromCenter - view_angle) * view_wview/800;
_returnY = view_yview + view_hview/2 + lengthdir_y(_distFromCenter+60, _dirFromCenter - view_angle) * view_hview/608;
draw_set_color(col1);
draw_text_transformed_outline(_returnX, _returnY, string(strType), 6, c_black, 16, 800/view_wview, 608/view_hview, -view_angle);

_returnX = view_xview + view_wview/2 + lengthdir_x(_distFromCenter, _dirFromCenter - view_angle) * view_wview/800;
_returnY = view_yview + view_hview/2 + lengthdir_y(_distFromCenter, _dirFromCenter - view_angle) * view_hview/608;
draw_set_color(col2);
draw_text_transformed_outline(_returnX, _returnY, string(subtext), 6, c_black, 16, 0.72 * 800/view_wview, 0.72 * 608/view_hview, -view_angle);
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
