<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerTeleporter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cRed = make_color_rgb(206, 95, 91);
cOra = make_color_rgb(249, 163, 27);
cYel = make_color_rgb(246, 245, 143);
cGre = make_color_rgb(89, 193, 53);
cCya = make_color_rgb(166, 252, 219);
cBlu = make_color_rgb(44, 232, 245);
cPur = make_color_rgb(188, 74, 155);
cPin = make_color_rgb(245, 160, 151);
cGra = make_color_rgb(90, 105, 136);
cWhi = c_white; 
index = 0;
color = c_white;
alarm[0] = 1; //choose color
//closeIndex = 0;
active = true;
image_speed = 0;
camDir = 0;
drawXOff = 0;
drawYOff = 0;
vAccel = 0;
vSpd = 0;
save = false;
createPlayer = (room != rStage03Hub);
grav = 1; //gravity on next screen
warpX = -1;
warpY = -1;
roomTo = rStage01Abstr4ktNew;

//if not changing rooms
teleRotAng = 0;
teleRotAmp = 0;
teleRotAmpMax = 135;
teleScale = 1;
exitScale = 1;
exitDelay = 0;

if (room == rTMM_ClearLobby){
    exitDelay = 6;
    depth = 10;
}else if (room == rStage01Onetwentyeight){
    exitDelay = 0;
    depth = 10;
}
exitDelayTimer = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transition
if (global.grav != grav){
    scrFlipGrav();
}

if (room == rStage01Onetwentyeight){
    for(var i=0; i&lt;=3; i++){
        global.QuadCoin[i] = 0;
        global.QuadCoin[i] = 0;
    }
}

global.canRestart = false;
var _roomTransition;
_roomTransition = instance_create(warpX, warpY, objMakerTeleTransition);
_roomTransition.exitIndex = index;
_roomTransition.exitPartCol = color;
_roomTransition.camDir = camDir;
_roomTransition.roomTo = roomTo; //prevents C1 Biff-like errors if player restarts
_roomTransition.offset = 8;
_roomTransition.sprite = scrGetScreenSprite();
_roomTransition.save = save;
_roomTransition.createPlayer = createPlayer;

if (!save){
    global.roomProgress[scrGetRoomNum(roomTo)] = max(global.roomProgress[scrGetRoomNum(roomTo)], 1);
    global.farthestRoom = max(scrGetRoomNum(roomTo), global.farthestRoom);
    scrSaveGame(false);
}

if (roomTo == rStage02Klamy){  // wipe prior Klamy saves
    // this will only affect the save data if the player saves in this room
    if (global.klamySaves != global.klamyMax){
        global.klamySaves = global.klamyMax;
        for(var i=0;i&lt;=global.klamyMax;i++;){
            global.klamySaveCoord[i, 0] = -1; //x
            global.klamySaveCoord[i, 1] = -1; //y
        }
    }
}else if (roomTo == rStage02Abstr4ktNew){
    global.abstr4ktGrav = 0;
}

with (objPlayer){instance_destroy();}
room_goto(roomTo);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(index){
    case 0:
        color = cRed;
        break;
    case 1:
        color = cOra;
        break;
    case 2:
        color = cYel;
        break;
    case 3:
        color = cGre;
        break;
    case 4:
        color = cCya;
        break;
    case 5:
        color = cBlu;
        break;
    case 6:
        color = cPur;
        break;
    case 7:
        color = cPin;
        break;
    case 8:
        color = cGra;
        break;
    case 9:
        color = cWhi;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Beelz
if (room == rStage01Purify){  // S1 Midboss ending
    vSpd += vAccel;
    y += min(16, vSpd);
}else{
    var _sineOffset = 0;
    if (room == rStage03Hub){
        _sineOffset = (1-(x div 272)/3) * (pi/2);
    }
    y = ystart + 4*(-sin((global.count * pi/80) + _sineOffset));
}

if (teleRotAmp &gt; 0){
    teleRotAmp -= teleRotAmpMax/36;
    if (teleRotAmp &lt;= 0){
        teleRotAng = 0;
        image_angle = 0;
    }else{
        teleRotAng += 4*pi/36;
        image_angle = teleRotAmp*sin(teleRotAng);
    }
}

if (teleScale &lt; 1)
    teleScale = min(teleScale+0.005, 1);

if (exitDelayTimer &gt;= 0){
    exitDelayTimer -= 1;
    if (exitDelayTimer &lt;= 0){
        repeat(irandom_range(14, 18)){
            with (instance_create(warpX, warpY, objMakerCirclePart)){
                color = other.color;
                curve = random_range(1.3, 2.78);
            }
        }
        with (instance_create(warpX, warpY, objExpandFade)){
            sprite_index = sprMakerTeleporterExitExpand;
            depth = -4;
            image_speed = 0;
            image_alpha = 0.8;
            scaleInc = 0.08;
            alphaInc = -0.15;
        }
    }
}

if (exitDelayTimer &lt;= 0){
    if (exitScale &gt; 1)
        exitScale = max(exitScale-0.05, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (active &amp;&amp; !global.practicing){
    if (roomTo != room){
        //Record shield hits for Purify
        if (room == rStage01Purify){
            if (!global.practicing &amp;&amp; global.shieldHitsTaken &lt;= 3){  // can't be above 3, unless a glitch occurred
                var _previousLowest = -1;
                if (!global.challengeMode){
                    _previousLowest = global.beelzHitLowest;
                    if (_previousLowest &lt; 0 || _previousLowest &gt; global.shieldHitsTaken){
                        global.beelzHitLowest = global.shieldHitsTaken;
                    }
                }else{
                    _previousLowest = global.beelzHardHitLowest;
                    if (_previousLowest &lt; 0 || _previousLowest &gt; global.shieldHitsTaken){
                        global.beelzHardHitLowest = global.shieldHitsTaken;
                    }
                }
                if (global.beelzHardHitLowest &gt;= 0 &amp;&amp; (global.beelzHitLowest &lt; 0 || global.beelzHitLowest &gt; global.beelzHardHitLowest)){
                    global.beelzHitLowest = global.beelzHardHitLowest;
                }
                
                // Get clear type and set relevant variables
                var _ident = noone;
                if (global.challengeMode){
                    if (global.shieldHitsTaken == 0){
                        _ident = 0.5;  // perfect
                    }else if (_previousLowest == -1){  // first clear
                        _ident = 0.3;
                    }else if (global.shieldHitsTaken &lt; _previousLowest){
                        _ident = 0.4;
                    }
                    global.beelzHardCompleted = true;
                }else if (global.shieldHitsTaken == 0){
                    _ident = 0.2;
                }else if (_previousLowest == -1){  // first clear
                    _ident = 0.0;
                }else if (global.shieldHitsTaken &lt; _previousLowest){
                    _ident = 0.1;
                }
                
                //  Create Pop-up
                if (_ident != noone){
                    var _popup = instance_create(0, 0, objMakerRecordAchieved);
                    with (_popup){
                        ident = _ident;
                        event_user(0);
                    }
                }
            }
        }
        event_perform(ev_alarm, 1); //Transition
    }else{
        other.x = warpX;
        other.y = warpY;
        exitDelayTimer = exitDelay;
        
        // Prevent any weird screen panning stuffz
        if (room == rTMM_ClearLobby){
            with (objMakerCamera){
                camX = xTo;
                camY = yTo;
            }
        }
        if (room == rStage01Onetwentyeight){
            var _ident;
            _ident = clamp(x div 400 + 2*(y div 304), 0, 3);
            if (global.QuadCoin[_ident] == 0){
                global.QuadCoin[_ident] = 1;
                with (objS1_128ExpandBlock){
                    if (index == _ident){
                        block = instance_create(x, y, objBlock);
                        block.image_yscale = 2;
                    }
                }
                audio_sound_pitch(audio_play_sound(sndMakerCoinBlue, 0, 0), PITCH_FLUCT);
                repeat(irandom_range(3, 5))
                    instance_create(warpX + irandom_range(-3, 3), warpY + irandom_range(-3, 3), objMakerBlueCoinPart);
                
                with (objMakerMoveSpike){
                    if (trigger == _ident){
                        triggered = true;
                    }
                }
            }
            if (global.QuadCoinEverCollected[_ident] == 0){
                global.QuadCoinEverCollected[_ident] = 1;
            }
        }
        
        
        image_angle = -180;
        teleRotAng = 0;
        teleRotAmp = teleRotAmpMax;
        teleScale = 0.85
        
        if (room == rStage01Onetwentyeight){
            with (object_index){
                if (index == other.index){
                    exitScale = 1.25;
                }
            }
        }else{
            if (exitScale &gt; 0){
                exitScale = 1.25;
            }
        }
        audio_sound_pitch(audio_play_sound(sndMakerTeleport, 0, 0), PITCH_FLUCT);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (active){t_alpha = 1;}
else{t_alpha = 0.4;}

draw_sprite_ext(sprMakerTeleporter, index + 8*abs(((global.count div 5) + 5) mod 10 - 5), x, y, teleScale, teleScale, image_angle, c_white, t_alpha);

if (room == roomTo &amp;&amp; exitScale &gt; 0){
    draw_sprite_ext(sprMakerTeleporterExit, index + 8*abs(((global.count div 5) + 3) mod 6 - 3), (warpX + (x-xstart)), (warpY + (y-ystart)), exitScale, exitScale, 0, c_white, t_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
