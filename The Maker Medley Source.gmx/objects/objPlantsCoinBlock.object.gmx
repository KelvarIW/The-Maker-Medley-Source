<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlantsCoinBlockGlow</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objPlantsPlant</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sunflower
event_inherited();

animTime = -65;
headAnimTime = pi/2 + ((pi/56) * animMult);  // set to starting value when the plant finishes growing
coinTimer = 0;
coinSpawnTime = 810;
coinGlow = 0;
glowIncFrames = 25;
glowDecFrames = 10;

leafShade1 = c_white; //make_color_rgb(230, 230, 230);
leafShade2 = make_color_rgb(180, 180, 180);
numberColor = make_color_rgb(51, 32, 65);
numberColorGlow = make_color_rgb(190, 172, 204);
inheritGore = false;

coinsGiven = 0;
shrinkFrame = 0;
headX = 0;
headY = 0;
growingLen = 64;
stretchX = 0;
stretchY = 0;
stretchXAmp = 1.5;
stretchYAmp = 1.8;
blockScale = 0.8;
shadowLength = 24;
if (instance_exists(objPlantsCtrl) &amp;&amp; (objPlantsCtrl.roundState == 1 || objPlantsCtrl.roundState == 2)){
    produce = true;
}else{
    produce = false;
}
scrPlantsGoreInit(6);

snd = audio_play_sound(sndPlantsGrow, 0, 0);
lastSpawnedCoin = -4;
moundY = y+22;
heightPercent = 0.88;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    if (!dead){
        scrPlantsCrushStep();
        animTime ++;
        if (!growing){
            if (instance_exists(objPlantsCtrl)){
                produce = (objPlantsCtrl.roundState == 1 || objPlantsCtrl.roundState == 2);
            }
            
            if (produce){
                coinTimer ++;
                if (coinTimer == coinSpawnTime){
                    lastSpawnedCoin = instance_create(x, y+4, objPlantsCoinBlockCoin);
                    lastSpawnedCoin.yBase = min(y, 512);
                    lastSpawnedCoin.row = row;
                    lastSpawnedCoin.speed = (x+y+2) mod 4;
                    lastSpawnedCoin.direction = ((x+y+20) mod 22.5) + 45;
                    lastSpawnedCoin.vspeed -= 3;
                    
                    coinsGiven ++;
                    coinTimer = 0;
                }
            }else{
                if (coinTimer &lt; glowDecFrames){
                    coinTimer ++;
                }else if (coinTimer &gt;= (coinSpawnTime-glowIncFrames)){
                    coinTimer --;
                }
            }
        }else{
            var _riseLen = 30;
            var _scaleStartTime = _riseLen + 10;
            var _scaleLen = 15;
            growingTimer ++;
            if (growingTimer &lt; _riseLen){
                dirtDelay --;
                if (dirtDelay &lt;= 0){
                    dirtDelay = irandom_range(2, 4);
                    (instance_create(x + irandom_range(-18, 18)*((0.8 + 0.2*(growingTimer/_riseLen)) * blockScale), y+22, objPlantsDirt)).row = row;
                }
            }else if (growingTimer &gt;= _scaleStartTime &amp;&amp; growingTimer &lt; _scaleStartTime + _scaleLen){
                if (growingTimer == _scaleStartTime){
                    audio_sound_pitch(audio_play_sound(sndMakerPlayerGrowBig, 0, 0), 1);
                }
                blockScale = lerp(0.8, 1.2, scrEaseInOut(((growingTimer-_scaleStartTime)+1)/_scaleLen));
                
                if (dirtDelay &lt;= 0){
                    dirtDelay = irandom_range(1, 2);
                    (instance_create(x + irandom_range(-18, 18) * blockScale, y+22, objPlantsDirt)).row = row;
                }
            }
            
            if (growingTimer &gt;= growingLen){
                growing = false;
            }
        }
        
        if (instance_exists(objPlantsCtrl)){
            stretchX = floor(stretchXAmp * (sin(pi/72 * objPlantsCtrl.plantsCount*animMult)));
            stretchY = floor(stretchYAmp * sin(pi/72 * objPlantsCtrl.plantsCount*animMult));
            image_index = max((floor(objPlantsCtrl.plantsCount) mod 98) - 48, 0)/50;
        }
    }else{
        shrinkFrame += 1;
        if (shrinkFrame &gt; 20){
            instance_destroy();
        }else if ((shrinkFrame mod 2) == 0){
            event_perform_object(objMakerCoinBlock, ev_other, ev_user0);
        }
        
        image_index = 0;
    }
}

// Glowing
var _glowAmp = 1.3;
if (coinTimer &gt; coinSpawnTime-glowIncFrames){
    coinGlow = min( _glowAmp*sin(pi/2 * (1-min((coinTimer - coinSpawnTime)/glowIncFrames, 1))) , 1);
}else if (coinTimer &lt; glowDecFrames &amp;&amp; coinsGiven &gt; 0){
    coinGlow = min( _glowAmp*sin(pi/2 *   (min((glowDecFrames - coinTimer)/glowDecFrames, 1))) , 1);
}else{
    coinGlow = 0;
}
if (coinGlow &gt; 0){
    stretchX = lerp(stretchX, -2*stretchXAmp, coinGlow);
    stretchY = lerp(stretchY, -2*stretchYAmp, coinGlow);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw `objPlantsCtrl.smallSurf` Surface  (plant-specific)
var _riseLen = 30;
var _riseAmt = 1;
if (growing &amp;&amp; growingTimer &lt; _riseLen){
    _riseAmt = (growingTimer/_riseLen);
}

if (instance_exists(objPlantsCtrl)){
    if (surface_exists(objPlantsCtrl.smallSurf)){
        var _dim = objPlantsCtrl.smallSurfDim;
        var _tex = surface_get_texture(objPlantsCtrl.smallSurf);
        
        // image_xscale and image_yscale are used for shrinking animation
        var _left = x   - (16*blockScale)*image_xscale;
        var _right = _left   + (32*blockScale)*image_xscale;
        var _bot = moundY   - (16*blockScale)*(1-image_yscale);
        var _top = _bot   - ((32*_riseAmt*heightPercent) * blockScale)*image_yscale;
        
        var _xOff = (stretchX * blockScale) * _riseAmt;
        var _yOff = (stretchY * blockScale) * _riseAmt;
        
        var _tex_left = 0;
        var _tex_top = 0;
        var _tex_right = 32/_dim;
        var _tex_bottom = ((_tex_right*heightPercent) * _riseAmt);
        draw_primitive_begin_texture(pr_trianglestrip, _tex);
        draw_vertex_texture(_left  - _xOff, _top  + _yOff, _tex_left, _tex_top);
        draw_vertex_texture(_right  + _xOff, _top  + _yOff, _tex_right, _tex_top);
        draw_vertex_texture(_right  + _xOff, _bot, _tex_right, _tex_bottom);
        draw_vertex_texture(_left  - _xOff, _bot, _tex_left, _tex_bottom);
        draw_vertex_texture(_left  - _xOff, _top  + _yOff, _tex_left, _tex_top);
        draw_primitive_end();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadows
//if (deathShadowMult &gt; 0){
if (shrinkFrame &lt; 20){
    var _riseLen = 30;
    var _riseAmt = 1;
    if (growing &amp;&amp; growingTimer &lt; _riseLen){
        _riseAmt = (growingTimer/_riseLen);
    }
    var _xscale = ((0.8 + 0.35*_riseAmt) * blockScale);
    var _yscale = _riseAmt + 0.2*(blockScale-1);
    
    //block shadow
    var _xOff = (stretchX * blockScale) * _riseAmt;
    var _yOff = (stretchY * blockScale) * _riseAmt;
    
    var _shadowDim;
    _shadowDim = scrPlantsShadow(32 * (blockScale*image_xscale) + _xOff, (32*heightPercent) * (blockScale*image_yscale) + _yOff);
    draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, moundY, _shadowDim[0], _shadowDim[1], 0, c_white, 1);
    
    // mound shadow
    _shadowDim = scrPlantsShadow(45 * _xscale, 15 * _yscale, 1.12);
    draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, moundY, _shadowDim[0], _shadowDim[1], 0, c_white, (1 - shrinkFrame/20));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
if (!dead){
    dead = true;
    shrinkFrame = 1;
    audio_sound_pitch(audio_play_sound(sndMakerCoinBlock, 0, 0), PITCH_FLUCT);
}
/*
// Old Gore
if (!growing){
    headX = 9 + 5*cos(headAnimTime); //4 to 14
    if (headAnimTime &lt;= pi/2 || headAnimTime &gt;= 3*pi/2){
        headY = lerp(0, 2, 1-abs(sin(headAnimTime))) - 9;
    }else{
        headY = lerp(0, 5, 1-abs(sin(headAnimTime))) - 9;
    }
    gore[2] = instance_create((x-10) + headX, (y-6) + headY, objPlantsParts);
    gore[2].sprite_index = sprMakerCoin;
    gore[2].image_xscale = 2.5;
    gore[2].image_yscale = 2.5;
    if (glowTime &gt; 785){
        gore[2].val1 = 1.3*sin(pi*(glowTime-785)/35);
    }
    gore[3] = instance_create(x, y, objPlantsParts);
    gore[3].sprite_index = sprPlantsCoinationStem;
    gore[3].image_index = (headX-4);
    gore[3].y += 16;
}else if (growingTimer &gt; 32 &amp;&amp; growing){
    headX = 9 + lerp(0, 10, sin((growingTimer - 32)/32 * pi)); //9 to 19
    headY = -64*power((growingTimer - 32)/32, 1/3)+5;
    gore[2] = instance_create((x-30) + headX, (y+24) + headY, objPlantsParts);
    gore[2].sprite_index = sprMakerCoin;
    gore[2].image_xscale = 2.5;
    gore[2].image_yscale = 2.5;
    gore[2].val1 = (-20/54)*headY;
    gore[2].growing = true;
    with (gore[2]){
        scrAdjustForOrigin(0, 0, 8, val1/2, image_angle, image_xscale, image_yscale);
    }
    gore[3] = instance_create(x, y, objPlantsParts);
    gore[3].sprite_index = sprPlantsCoinationStemGrowing;
    gore[3].image_index = min((growingTimer - 32)/3, 10);
    gore[3].y += 16;
}

var _leafAngle = 18*sin(pi*(animTime mod 170)/170);
//leaves
if (growingTimer &lt;= 25){
    var _leafRot = (90 - 90*sqr(growingTimer/25)) + _leafAngle;
    var _rotCoords = scrChangeOrigin(0, 0, 1, 11, _leafRot);
    var _rotCoordsInv = scrChangeOrigin(0, 0, -1, 11, -_leafRot);
    gore[5] = instance_create((x-2), (y+14), objPlantsParts);
    gore[5].sprite_index = sprPlantsCoinationLeaves;
    gore[5].image_angle = _leafRot;
    gore[5].image_blend = leafShade2;
    gore[5].growing = true;
    gore[5].val1 = growingTimer;
    
    gore[4] = instance_create((x-2), (y+14), objPlantsParts);
    gore[4].sprite_index = sprPlantsCoinationLeaves;
    gore[4].image_index = 1;
    gore[4].image_xscale = -1;
    gore[4].image_angle = -_leafRot;
    gore[4].image_blend = leafShade2;
    gore[4].growing = true;
    gore[4].val1 = growingTimer;
    
    gore[1] = instance_create((x-2), (y+20), objPlantsParts);
    gore[1].sprite_index = sprPlantsCoinationLeaves;
    gore[1].image_angle = _leafRot;
    gore[1].image_blend = leafShade1;
    gore[1].growing = true;
    gore[1].val1 = growingTimer;
    
    gore[0] = instance_create((x-2), (y+20), objPlantsParts);
    gore[0].sprite_index = sprPlantsCoinationLeaves;
    gore[0].image_xscale = -1;
    gore[0].image_index = 1;
    gore[0].image_xscale = -1;
    gore[0].image_angle = -_leafRot;
    gore[0].image_blend = leafShade1;
    gore[0].growing = true;
    gore[0].val1 = growingTimer;
}else{
    gore[5] = instance_create(x-2, y+14, objPlantsParts);
    gore[5].sprite_index = sprPlantsCoinationLeaves;
    gore[5].image_angle = _leafAngle/3;
    gore[5].image_blend = leafShade2;
    
    gore[4] = instance_create(x-2, y+14, objPlantsParts);
    gore[4].sprite_index = sprPlantsCoinationLeaves;
    gore[4].image_index = 1;
    gore[4].image_xscale = -1;
    gore[4].image_angle = _leafAngle/3;
    gore[4].image_blend = leafShade2;
    gore[4].image_xscale = -1;
    
    gore[1] = instance_create(x-2, y+20, objPlantsParts);
    gore[1].sprite_index = sprPlantsCoinationLeaves;
    gore[1].image_angle = 2*_leafAngle/3;
    gore[1].image_blend = leafShade1;
    
    gore[0] = instance_create(x-2, y+20, objPlantsParts);
    gore[0].sprite_index = sprPlantsCoinationLeaves;
    gore[0].image_index = 1;
    gore[0].image_xscale = -1;
    gore[0].image_angle = -2*_leafAngle/3;
    gore[0].image_blend = leafShade1;
}*/

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw plant
scrPlantsCrushStart(64, 96);

var _riseLen = 30;
var _riseAmt = 1;
if (growing &amp;&amp; growingTimer &lt; _riseLen){
    _riseAmt = (growingTimer/_riseLen);
}

if (instance_exists(objPlantsCtrl)){
    var _dim = objPlantsCtrl.smallSurfDim;
    if (!surface_exists(objPlantsCtrl.smallSurf)){
        objPlantsCtrl.smallSurf = surface_create(_dim, _dim);
    }
    if (surface_exists(objPlantsCtrl.smallSurf)){
        var _drawCoin = false;
        if (instance_exists(lastSpawnedCoin)){
            if (lastSpawnedCoin.behind){  // failsafe
                _drawCoin = true;
            }
        }
        // for HP text
        draw_set_font(fDefault12);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        
        var _numCol = c_white;
        if (_drawCoin){
            // draw back; draw coin; draw front
            
            // draw back
            if (surface_exists(objPlantsCtrl.smallSurf)){
                surface_set_target(objPlantsCtrl.smallSurf);
                draw_clear_alpha(c_black, 0);
                
                if (coinGlow &lt;= 0){
                    draw_sprite(sprPlantsCoinBlockBack, image_index, 0, 0);
                }else if (coinGlow &gt;= 1){
                    draw_sprite(sprPlantsCoinBlockGlowBack, image_index, 0, 0);
                }else{
                    draw_sprite(sprPlantsCoinBlockBack, image_index, 0, 0);
                    draw_set_colour_write_enable(1, 1, 1, 0);
                    draw_sprite_ext(sprPlantsCoinBlockGlowBack, image_index, 0, 0, 1, 1, 0, c_white, coinGlow);
                    draw_set_colour_write_enable(1, 1, 1, 1);
                }
                
                surface_reset_target();
                event_user(4);  // Draw `objPlantsCtrl.smallSurf` Surface
            }
            
            // draw coin
            with (lastSpawnedCoin){draw_self();}
            
            // draw front
            if (surface_exists(objPlantsCtrl.smallSurf)){
                surface_set_target(objPlantsCtrl.smallSurf);
                draw_clear_alpha(c_black, 0);
                
                if (coinGlow &lt;= 0){
                    draw_sprite(sprPlantsCoinBlockFront, image_index, 16, 16);
                    _numCol = numberColor;
                }else if (coinGlow &gt;= 1){
                    draw_sprite(sprPlantsCoinBlockGlowFront, image_index, 16, 16);
                    _numCol = numberColorGlow;
                }else{
                    draw_sprite(sprPlantsCoinBlockFront, image_index, 16, 16);
                    draw_set_colour_write_enable(1, 1, 1, 0);
                    draw_sprite_ext(sprPlantsCoinBlockGlowFront, image_index, 16, 16, 1, 1, 0, c_white, coinGlow);
                    draw_set_colour_write_enable(1, 1, 1, 1);
                    _numCol = merge_colour(numberColor, numberColorGlow, coinGlow);
                }
                
                // HP left
                if (!dead || crushed){
                    draw_set_color(_numCol);
                    draw_text(16+2, 16+3, string(hp));
                    draw_set_color(c_white);
                }
                
                surface_reset_target();
                event_user(4);  // Draw `objPlantsCtrl.smallSurf` Surface
            }
        }else{
            // draw entire block at once
            if (surface_exists(objPlantsCtrl.smallSurf)){
                surface_set_target(objPlantsCtrl.smallSurf);
                draw_clear_alpha(c_black, 0);
                
                if (coinGlow &lt;= 0){
                    draw_sprite(sprMakerCoinBlock, image_index, 16, 16);
                    _numCol = numberColor;
                }else if (coinGlow &gt;= 1){
                    draw_sprite(sprPlantsCoinBlockGlow, image_index, 16, 16);
                    _numCol = numberColorGlow;
                }else{
                    draw_sprite(sprMakerCoinBlock, image_index, 16, 16);
                    draw_set_colour_write_enable(1, 1, 1, 0);
                    draw_sprite_ext(sprPlantsCoinBlockGlow, image_index, 16, 16, 1, 1, 0, c_white, coinGlow);
                    draw_set_colour_write_enable(1, 1, 1, 1);
                    _numCol = merge_colour(numberColor, numberColorGlow, coinGlow);
                }
                
                // HP left
                if (!dead || crushed){
                    draw_set_color(_numCol);
                    draw_text(16+2, 16+3, string(hp));
                    draw_set_color(c_white);
                }
                surface_reset_target();
                event_user(4);  // Draw `objPlantsCtrl.smallSurf` Surface
            }
        }
    }
}

draw_sprite_ext(sprPlantsMound, 0, x, moundY, (0.8 + 0.2*_riseAmt) * blockScale, _riseAmt + 0.2*(blockScale-1), 0, c_white, (1 - shrinkFrame/20));
scrPlantsCrushEnd(crushTimer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
