<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlantsSpinner</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer = 0;
holding = true;
surf = -4;
image_alpha = 0;
miku = noone;
row = 1;

visible = false;
for(var i=0;i&lt;4;i++){
    cherry[i] = noone;
    slotEmpty[i] = false;
    slotMask[i] = sprCherry;
    slotHP[i] = 7;
    glowFrame[i] = 0;
}
glowLen = 20;
frozen = false;

dir = 0;
dirInc = 6;
lineStartDist = 16;
lineEndDist = 48;
slotMaxDist = 64;
lineCurDist = lineStartDist;
slotDistance = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    // Animation
    dir += dirInc;
    timer ++;
    var _expandAmt = min(timer/50, 1);
    slotDistance = slotMaxDist * _expandAmt;
    lineCurDist = lineEndDist * _expandAmt;
    
    // Projectile -&gt; Slot collisions
    if (holding){
        holding = false;  // will be set to true in "for" loop
        var _ang = 0, _xoff = 0, _yoff = 0;
        for(var i=0;i&lt;4;i++){
            if (!slotEmpty[i] &amp;&amp; slotHP[i] &gt; 0){
                _ang = dir+90*i;
                _xoff =  slotDistance*dcos(_ang);
                _yoff =  slotDistance*(-dsin(_ang));
                mask_index = slotMask[i];
                
                if (place_meeting(x  + _xoff, y  + _yoff, objPlantsShuriken)){
                    with (objPlantsShuriken){
                        if (row == other.row + round(-dsin(_ang))){
                            if (place_meeting(x  - _xoff, y  - _yoff, other)){
                                if (!(timer &lt; 34 || destroyed)){
                                    event_user(1);
                                    with (other){
                                        var _prevHP = slotHP[i];
                                        slotHP[i] = 0;
                                        var _inst = instance_create(x + slotDistance*dcos(_ang), y + slotDistance*(-dsin(_ang)), objPlantsGore);
                                        _inst.sprite_index = sprCherry;
                                        _inst.state = 1;
                                        _inst.row = row - round(-dsin(_ang));
                                        _inst.fromEnemy = false;
                                        with(_inst){event_perform(ev_alarm, 0);}
                                        
                                        var _dir = dir + 90*i + 90;
                                        _inst.hspeed += 2.54*dcos(_ang + 90);
                                        _inst.vspeed += 2.54*(-dsin(_ang + 90));
                                        
                                        if (_prevHP &gt; 3){
                                            var _inst = instance_create(x + slotDistance*dcos(_ang), y + slotDistance*(-dsin(_ang)), objPlantsGore);
                                            _inst.sprite_index = sprCherry;
                                            _inst.state = 0;
                                            _inst.row = row - round(-dsin(_ang));
                                            _inst.fromEnemy = false;
                                            with(_inst){event_perform(ev_alarm, 0);}
                                            
                                            _inst.hspeed += 2.54*dcos(_ang + 90);
                                            _inst.vspeed += 2.54*(-dsin(_ang + 90));
                                        }
                                        
                                        slotEmpty[i] = true;
                                    }
                                    scrPlantsLimitedSFX(sndMakerCannonball);
                                }
                            }
                        }
                    }
                }else if (place_meeting(x + slotDistance*dcos(_ang), y + slotDistance*(-dsin(_ang)), objPlantsProjectile)){
                    with (objPlantsProjectile){
                        if (row == other.row + round(-dsin(_ang))){
                            if (place_meeting(x  - _xoff, y  - _yoff, other)){
                                if (!(collided || (projType == 1 &amp;&amp; behind) || (projType == 2 &amp;&amp; !target))){
                                    event_user(1);
                                    with (other){
                                        var _prevHP = slotHP[i];
                                        slotHP[i] -= other.projType;
                                        if (slotHP[i] &lt;= 0){
                                            var _inst = instance_create(x + slotDistance*dcos(_ang), y + slotDistance*(-dsin(_ang)), objPlantsGore);
                                            _inst.sprite_index = sprCherry;
                                            _inst.state = 1;
                                            _inst.row = row - round(-dsin(_ang));
                                            _inst.fromEnemy = false;
                                            with(_inst){event_perform(ev_alarm, 0);}
                                            
                                            var _dir = dir + 90*i + 90;
                                            _inst.hspeed += 2.54*dcos(_ang + 90);
                                            _inst.vspeed += 2.54*(-dsin(_ang + 90));
                                            
                                            slotEmpty[i] = true;
                                            
                                        }else{
                                            glowFrame[i] = glowLen;
                                            
                                            if (slotHP[i] &lt;= 3 &amp;&amp; _prevHP &gt; 3){
                                                var _inst = instance_create(x + slotDistance*dcos(_ang), y + slotDistance*(-dsin(_ang)), objPlantsGore);
                                                _inst.sprite_index = sprCherry;
                                                _inst.state = 0;
                                                _inst.row = row - round(-dsin(_ang));
                                                _inst.fromEnemy = false;
                                                with(_inst){event_perform(ev_alarm, 0);}
                                                
                                                var _dir = dir + 90*i + 90;
                                                _inst.hspeed += 2.54*dcos(_ang + 90);
                                                _inst.vspeed += 2.54*(-dsin(_ang + 90));
                                            }
                                        }
                                    }
                                    scrPlantsLimitedSFX(sndMakerCannonball);
                                }
                            }
                        }
                    }
                }
                if (glowFrame[i] &gt; 0){
                    glowFrame[i] --;
                }
                
                if (!slotEmpty[i]){
                    holding = true;
                }
            }
        }
        
        mask_index = -1;
        
        // Deposit held enemies
        if (holding){
            if (timer &gt; 70 &amp;&amp; (abs(floor(dir)) mod 90) &lt; 6){
                var _inst;
                dir = (dir div 90) * 90;
                for(var i=0;i&lt;4;i++){
                    if (!slotEmpty[i] &amp;&amp; slotHP[i] &gt; 0){
                        var _ang = 0, _xoff = 0, _yoff = 0;
                        _ang = dir+90*i;
                        _xoff =  slotDistance*dcos(_ang);
                        _yoff =  slotDistance*(-dsin(_ang));
                        if ((row == 0 &amp;&amp; i == 0) || (row == 5 &amp;&amp; i == 2) || (instance_exists(cherry[i]) &amp;&amp; !cherry[i].dead)){
                            _inst = instance_create(x + slotDistance*dcos(_ang), y + slotDistance*(-dsin(_ang)), objPlantsMikuSpinnerFailed);
                            if (slotHP[i] &lt;= 3){
                                _inst.sprite_index = sprPlantsCherry;
                            }
                            _inst.direction = ((dir-dirInc) + 90*i + 90);
                            _inst.angleInc *= sign(_inst.hspeed);
                        }else{
                            _inst = instance_create(x + slotDistance*dcos(_ang), y + slotDistance*(-dsin(_ang)), objPlantsDancingCherry);
                            _inst.row = row - round(dcos(90*i));
                            _inst.mikuXOff = slotDistance*round(dcos(_ang));
                            _inst.image_xscale = 1;
                            _inst.image_yscale = 1;
                            _inst.miku = miku;
                            _inst.danceTimer = 90+timer;
                            _inst.hp = slotHP[i];
                            if (_inst.hp &lt;= 3){
                                _inst.bodyState = 1;
                            }
                            
                            if (instance_exists(miku) &amp;&amp; !miku.dead){
                                miku.cherry[i] = _inst;
                            }
                        }
                        slotEmpty[i] = true;
                    }
                }
                holding = false;
            }
        }
    }
    
    if (holding &amp;&amp; image_alpha &lt; 1){
        image_alpha = min(1, image_alpha + 0.05);
    }else if (!holding){
        image_alpha -= 0.025;
        if (image_alpha &lt;= 0){
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(surf)){
    surf = surface_create(256, 256);
}

if (surface_exists(surf)){
    surface_set_target(surf);
    draw_clear_alpha(c_black, 0);
    
    var _cosVal, _sinVal;
    for(var i=0;i&lt;4;i++){
        _cosVal =  dcos(dir+90*i);
        _sinVal = -dsin(dir+90*i);
        
        // spinner lines
        if (lineCurDist &gt;= (lineStartDist+6)){
            draw_set_color(c_black);  // black outline
            draw_line_width(128 + lineStartDist*_cosVal, 128 + lineStartDist*_sinVal, 128 + lineCurDist*_cosVal, 128 + lineCurDist*_sinVal, 4);
            draw_set_color(c_white);  // white main line
            draw_line_width(128 + (lineStartDist+2)*_cosVal, 128 + (lineStartDist+2)*_sinVal, 128 + (lineCurDist-2)*_cosVal, 128 + (lineCurDist-2)*_sinVal, 2);
        }
        
        if (holding &amp;&amp; !slotEmpty[i] &amp;&amp; slotHP[i] &gt; 0){
            var _spr = sprCherry;
            if (slotHP[i] &lt;= 3){
                _spr = sprPlantsCherry;
            }
            draw_sprite(sprCherry, 0, 128 + slotDistance*_cosVal, 128 + slotDistance*_sinVal);
            
            if (glowFrame[i] &gt; 0){
                var _glowAlpha = scrPlantsGlow(glowFrame[i], glowLen);
                var _glowInd = image_index;
                if (_spr == sprPlantsCherry){
                    _glowInd += 2;
                }
                draw_sprite_ext(sprPlantsCherryHit, _glowInd, x, y, 1, 1, 0, c_white, _glowAlpha);
            }
        }
        
        draw_sprite(sprPlantsSpinner, 1, 128 + slotDistance*_cosVal, 128 + slotDistance*_sinVal);
    }
    draw_sprite_ext(sprPlantsSpinner, 0, 128, 128, 1, 1, dir, c_white, 1);  
    
    surface_reset_target();
    
    draw_set_alpha(image_alpha);
    draw_surface(surf, x-128, y-128);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
