<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFinalDribixWave</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nametag = scrFinalBossNametag(x, y-60, 7);
nametag.alphaMult = 1;

with (objFinalRNGDie){
    event_user(0);
    targetObj = other.object_index;
    grow = true;
    shrink = false;
}

hp = 30;
delayFrames = 0;
attack = 0;
sndCount = 0;
alarm[4] = 2;
drawXOff = 0;
drawYOff = 0;
image_xscale = sign(400 - x);

sineAngle = 0;
followPlayer = false;
ballTimer = -1;
spikeBuffTimer = 0;
image_speed = 0.2;

backGlow = 0;
backGlowAng = -pi/2;
backScaleMult = 0;

/*
//Let's make it so Dribix always throws out the same number of spikes
spikeBurst[4] = 0;

spikeOption[4] = 4;
spikeOption[3] = 4;
spikeOption[2] = 5;
spikeOption[1] = 5;
spikeOption[0] = 6;

var _choosing, _loopFailsafe;
for (var i=0; i&lt;=4; i++){
    _choosing = irandom(4);
    
    _loopFailsafe = 0;
    while (spikeOption[_choosing] == -1){
        _choosing = (_choosing + 1) mod 5;
        _loopFailsafe ++;
        if (_loopFailsafe &gt;= 5){
            break;
        }
    }
    spikeBurst[i] = spikeOption[_choosing];
    spikeOption[i] = -1;
}
*/

surf = -4;
glowSurf = -4;
glowAlpha = 0;
hspd = 0;
vspd = 0;
grav = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
    
if (surface_exists(glowSurf))
    surface_free(glowSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _snd = audio_play_sound(sndMakerSampleThrow, 0, 0);
audio_sound_pitch(_snd, random_range(1.3, 1.4));
sndCount ++;
if (sndCount &lt; 4){
    alarm[0] = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>backGlowAng += pi/40;
backGlow = (sin(backGlowAng)/2 + 0.5);
if (backScaleMult &lt; 1){
    backScaleMult = min(backScaleMult+0.025, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (delayFrames &gt; 0){
    delayFrames --;
}else if (hp &gt; 0 &amp;&amp; grav == 0 &amp;&amp; attack &gt;= 0){
    if (attack == 0){
        var _speed;
        if (buff()){
            _speed = 12;
        }else{
            _speed = 16;
        }
        
        hspd = _speed*sign(400-xstart);
        if (hspd &gt; 0){
            if ((x &lt; 168 &amp;&amp; x+hspd &gt;= 168) || (false &amp;&amp; x &lt; 400 &amp;&amp; x+hspd &gt;= 400) || (x &lt; 632 &amp;&amp; x+hspd &gt;= 632)){
                instance_create(x+20*image_xscale, y-12, objFinalP3DribixBallBig);
                audio_play_sound(sndMakerSampleThrow, 0, 0);
            }
        }else if (hspd &lt; 0){
            if ((x &gt; 168 &amp;&amp; x+hspd &lt;= 168) || (x &gt; 632 &amp;&amp; x+hspd &lt;= 632)){
                instance_create(x+20*image_xscale, y-12, objFinalP3DribixBallBig);
                audio_play_sound(sndMakerSampleThrow, 0, 0);
            }
        }
        if ((hspd &gt; 0 &amp;&amp; bbox_left + hspd &gt; 800) || (hspd &lt; 0 &amp;&amp; bbox_right + hspd &lt; 0)){
            x += hspd;
            hspd = 0;
            attack = -1;
            spikeBuffTimer = 0;
            with (objFinalBossChar_3){
                attack = 1;
            }
            sprite_index = sprFinalDribixWave;
        }else{
            //Spike spiral-ish attack  (removed)
            /*if (buff()){
                var _delay = 6;
                spikeBuffTimer ++;
                if (spikeBuffTimer &gt;= 0 &amp;&amp; (floor(spikeBuffTimer) mod _delay) == 1 &amp;&amp; instance_exists(objFinalP3Player)){
                    var _destAng = 270, _inst = noone;
                    var _num = (spikeBuffTimer div _delay);
                    
                    _inst = instance_create(x, y, objFinalP3DribixSpike);
                    _inst.direction = 270 + 45*cos(pi * (1 + (spikeBuffTimer div _delay)/4));
                    
                    audio_stop_sound(sndMakerSampleThrow);
                    var _snd = audio_play_sound(sndMakerSampleThrow, 0, 0);
                    audio_sound_pitch(_snd, random_range(0.85, 1.1));
                    audio_sound_gain(_snd, 1 - clamp((abs(objFinalP3Player.x - x)/200), 0, 1)/2, 0);
                }
            }*/
        }
    }else if (attack == 1){
        var _speed = 16;
        
        hspd = -_speed*sign(400-xstart);
        if (abs(400-x) &lt;= 16 &amp;&amp; sign(400-x) == sign(hspd) &amp;&amp; !instance_exists(objFinalP3DribixTorchBall)){  // if exactly 16 pixels away from center, it will drop objFinalP3DribixTorchBall that frame, but not the next since on the next frame, sign(400-x) would return 0, which is not sign(hspd)
            var _inst;
            _inst = instance_create(400, y, objFinalP3DribixTorchBall);
            _inst.destX = 200;
            _inst = instance_create(400, y, objFinalP3DribixTorchBall);
            _inst.destX = 600;
        }
        if ((hspd &gt; 0 &amp;&amp; bbox_left + hspd &gt; 800) || (hspd &lt; 0 &amp;&amp; bbox_right + hspd &lt; 0)){
            with (objFinalBossChar_3){
                attack = 2;
                delayFrames = 160;
            }
            with (objFinalRNGDie){
                shrink = true;
                grow = false;
            }
            with (nametag){
                instance_destroy();
            }
            instance_destroy();
        }
    }
}

x += hspd;
sineAngle += pi/100;
y = ystart + 24*sin(sineAngle);

if (hspd != 0){
    image_xscale = sign(hspd);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFinalP3Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp &gt; 0){
    with (other){
        event_user(0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
    
if (surface_exists(glowSurf))
    surface_free(glowSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(surf))
    surf = surface_create(320, 320);

if (surface_exists(surf)){
    surface_set_target(surf);
    draw_clear_alpha(c_black, 0);
    draw_sprite_ext(sprite_index, image_index, 160, 160, image_xscale, image_yscale, image_angle, image_blend, 1);
    surface_reset_target();
}

draw_surface(surf, x-160, y-160);

if (global.finalGlowEnabled &amp;&amp; global.extraEffects &amp;&amp; drawXOff == 0){
    if (glowAlpha &gt; 0){
        if (!surface_exists(glowSurf))
            glowSurf = surface_create(320, 320);
        
        if (surface_exists(glowSurf)){
            surface_set_target(glowSurf);
            draw_clear_alpha(c_black, 0);
            draw_sprite_ext(sprite_index, image_index, 160, 160, image_xscale, image_yscale, image_angle, image_blend, 1);
            surface_reset_target();
            
            if (surface_exists(glowSurf)){
                shader_set(shdFinalWhite);
                shader_set_uniform_f(global.finalGlowHandle, 320, 320, 10, glowAlpha*image_alpha);
                draw_surface(glowSurf, x-160, y-160);
                shader_reset();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
