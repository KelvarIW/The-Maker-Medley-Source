<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerKillBlock</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frozen = false;
timer = 0;
len = 24;
shownHeight = -8;
yBase = 26;
delay = 4;
row = 0;
holeTransition = delay*1.5;
image_speed = 0;
image_xscale = 2;
image_yscale = 2;
holeYScale = 0;

visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    timer ++;
    if (timer &gt;= delay &amp;&amp; timer &lt; len-delay){
        var _amt = (timer-delay) / (len - 2*delay);
        shownHeight = 32*sin(pi * _amt);
    }else{
        if (timer &gt;= len){
            instance_destroy();
        }else if (timer &lt; delay){
            shownHeight = -3*(delay-timer);
        }else if (timer &gt; (len-delay)){
            shownHeight = -3*(timer - (len-delay));
        }
    }
    
    if (timer &lt; holeTransition){
        holeYScale = timer/holeTransition;
    }else if (timer &gt; len-holeTransition){
        holeYScale = (len - timer)/holeTransition;
    }else{
        holeYScale = 1;
    }
    
    if (instance_exists(objPlantsCtrl)){
        image_index = max(0,  5*((objPlantsCtrl.plantsCount mod 96)/24 - 3))
    }
    
    //col
    if (shownHeight &gt; 0){
        with (objPlantsEnemy){
            if (row == other.row &amp;&amp; !dead &amp;&amp; (collision_rectangle(other.bbox_left, other.y + (other.yBase - other.shownHeight), other.bbox_right+1, other.y + other.yBase, id, true, false) == id)){
                if (object_index == objPlantsGuy){
                    var _hit = true;
                    //prevent getting hit by an instakill twice
                    for (var i = (instasNeeded-1); i &gt;= 0; i--){
                        if (instaHit[i] == other.id){
                            _hit = false;
                            break;
                        }
                    }
                    if (_hit){
                        // store id to prevent double-hits
                        for (var i = (instasNeeded-1); i &gt; 0; i--){
                            instaHit[i] = instaHit[i-1];
                        }
                        instaHit[0] = other.id;
                        
                        // register hit
                        hpLost = ceil(hpInit/instasNeeded);
                        if (hp &lt;= hpLost){
                            event_user(2);
                        }else{
                            event_user(1);
                        }
                    }
                }else{
                    event_user(2);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw hole
draw_sprite_ext(sprPlantsHole, 0, xstart, y+26, 1.2, holeYScale, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw shadow
if (shownHeight &gt; 0){
    var _shadowDim = scrPlantsShadow(64, 2*shownHeight);
    draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, y+yBase, _shadowDim[0], _shadowDim[1], 0, c_white, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _drew = false;
if (instance_exists(objPlantsCtrl)){
    var _dim = objPlantsCtrl.smallSurfDim;
    if (!surface_exists(objPlantsCtrl.smallSurf)){
        objPlantsCtrl.smallSurf = surface_create(_dim, _dim);
    }
    if (surface_exists(objPlantsCtrl.smallSurf)){
        surface_set_target(objPlantsCtrl.smallSurf);
        draw_clear_alpha(c_black, 0);
    
        draw_sprite_ext(sprite_index, image_index, 32, (64+yBase) - shownHeight, image_xscale, image_yscale, image_angle, c_white, 1);
        draw_set_blend_mode(bm_subtract);
        draw_sprite_ext(sprPlantsHoleMask, 0, 32, (32+yBase), 1.2, holeYScale, 0, c_white, 1);
        draw_set_blend_mode(bm_normal);
        
        surface_reset_target();
            
        if (surface_exists(objPlantsCtrl.smallSurf)){
            draw_surface_part(objPlantsCtrl.smallSurf, 0, 0, 64, 64, x-32, y-32);
            _drew = true;
        }
    }
}

if (!_drew){
    draw_sprite_part_ext(sprite_index, image_index, 0, 0, 32, shownHeight/2, x-16*image_xscale, (y+yBase) - shownHeight, image_xscale, image_yscale, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
