<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprS4Rift</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-30</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NOTE:  Instances will not spawn if there is an existing persistent instance of the same room instance
roomInit = room;
edgeSize = 4;
// Used to draw the main rift "pieces"
segmentSize = 128;
xAmt = 0;
yAmt = 0;
alarm[1] = 1;  // calculate x/yAmt
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate x/yAmt
if (image_angle == 0 || image_angle == 180){
    xAmt = 0;
    if (image_angle == 0){
        yAmt = segmentSize;
    }else{
        yAmt = -segmentSize;
    }
}else{
    if (image_angle == 90){
        xAmt = segmentSize;
    }else{
        xAmt = -segmentSize;
    }
    yAmt = 0;
}

var _scale = (image_xscale/2);
xAmt *= _scale;
yAmt *= _scale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///"Closing" rifts behind the player
speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with player
if (collision_ellipse(x - 15*image_xscale, y - 15*image_xscale, x + 15*image_xscale, y + 15*image_xscale, objPlayer, true, true) || place_meeting(x, y, objPlayer) || collision_ellipse((x + (64*image_yscale)*xAmt) - 15*image_xscale, (y + (64*image_yscale)*yAmt) - 15*image_xscale, (x + (64*image_yscale)*xAmt) + 15*image_xscale, (y + (64*image_yscale)*yAmt) + 15*image_xscale, objPlayer, true, true)){
    scrKillPlayer();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw to objS4NewDraw surface
if (instance_exists(objS4NewDraw)){
    var _scale = (image_xscale/2);
    if (_scale &gt; 0){
        // simplified version of scrChangeOriginScaled for better performance
        var _xDiff = -64*_scale, _yDiff = 32*_scale;
        var _rotCoords;
        _rotCoords[0] = 0;
        _rotCoords[1] = 0;
        if (object_index == objS4NewRiftSloped){  // image_angle is not multiple of 90 degrees
            _rotCoords[0] = (_xDiff * dcos(image_angle) - _yDiff * dsin(image_angle));
            _rotCoords[1] = -(_xDiff * dsin(image_angle) + _yDiff * dcos(image_angle));
        }else{
            // simplified version of scrChangeOriginScaled for better performance for multiples of 90 degrees
            var _num = (image_angle div 90);
            if (_num == 0){
                _rotCoords[0] = _xDiff;
                _rotCoords[1] = -_yDiff;
            }else if (_num == 1){
                _rotCoords[0] = -_yDiff;
                _rotCoords[1] = -_xDiff;
            }else if (_num == 2){
                _rotCoords[0] = -_xDiff;
                _rotCoords[1] = _yDiff;
            }else if (_num == 3){
                _rotCoords[0] = _yDiff;
                _rotCoords[1] = _xDiff;
            }
        }
        //show_debug_message( "_rotCoords[0]: " + string(_rotCoords[0]) + ";  _rotCoords[1]: " + string(_rotCoords[1]) );
        
        var _segments = ((image_yscale/2) / _scale);
        var _fullSegments = floor(_segments);
        if (surface_exists(objS4NewDraw.riftBodySurf)){
            if (_segments == _fullSegments){  // no partial segments
                for(var i=0; i&lt;_segments; i++){
                    draw_surface_ext(objS4NewDraw.riftBodySurf, (x + _rotCoords[0]  + i*xAmt)  - view_xview, (y + _rotCoords[1]  + i*yAmt)  - view_yview, _scale, _scale, image_angle, c_white, 1);
                }
            }else{
                for(var i=0; i&lt;_fullSegments; i++){
                    draw_surface_ext(objS4NewDraw.riftBodySurf, (x + _rotCoords[0]  + i*xAmt)  - view_xview, (y + _rotCoords[1]  + i*yAmt)  - view_yview, _scale, _scale, image_angle, c_white, 1);
                }
                var _start = _fullSegments;
                var _extra = (_segments - _start);
                draw_surface_general(objS4NewDraw.riftBodySurf, 0, 0, segmentSize, objS4NewDraw.riftBodyBuffer + segmentSize*_extra, ((x + _rotCoords[0]) + _start*xAmt) - view_xview, ((y + _rotCoords[1])  + _start*yAmt) - view_yview, _scale, _scale, image_angle, image_blend, image_blend, image_blend, c_white, 1);
            }
        }
        
        if (surface_exists(objS4NewDraw.riftEndSurf)){
            //update _rotCoords
            _xDiff = -64*_scale;
            _yDiff = 64*_scale;
            
            if (object_index == objS4NewRiftSloped){  // image_angle is not multiple of 90 degrees
                _rotCoords[0] = (_xDiff * dcos(image_angle) - _yDiff * dsin(image_angle));
                _rotCoords[1] = -(_xDiff * dsin(image_angle) + _yDiff * dcos(image_angle));
            }else{
                // simplified version of scrChangeOriginScaled for better performance for multiples of 90 degrees
                //var _num = (image_angle div 90);
                if (_num == 0){
                    _rotCoords[0] = _xDiff;
                    _rotCoords[1] = -_yDiff;
                }else if (_num == 1){
                    _rotCoords[0] = -_yDiff;
                    _rotCoords[1] = -_xDiff;
                }else if (_num == 2){
                    _rotCoords[0] = -_xDiff;
                    _rotCoords[1] = _yDiff;
                }else if (_num == 3){
                    _rotCoords[0] = _yDiff;
                    _rotCoords[1] = _xDiff;
                }
            }
            
            
            draw_surface_ext(objS4NewDraw.riftEndSurf, (x + _rotCoords[0])  - view_xview, (y + _rotCoords[1])  - view_yview, _scale, _scale, image_angle, c_white, 1);
            
            // 180 degree rotation
            _rotCoords[0] *= -1;
            _rotCoords[1] *= -1;
            draw_surface_ext(objS4NewDraw.riftEndSurf, (x + (_segments*xAmt) + _rotCoords[0])  - view_xview, (y + (_segments*yAmt) + _rotCoords[1])  - view_yview, _scale, _scale, image_angle+180, c_white, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
