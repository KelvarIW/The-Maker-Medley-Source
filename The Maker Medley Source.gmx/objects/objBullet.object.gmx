<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerBullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//get the bullet's direction based off the direction the player is facing

var bulletDir;
if (instance_exists(objPlayer))
    bulletDir = objPlayer.xScale;
else
    bulletDir = 1;

//set the bullet's speed
hspeed = bulletDir * 16;
origGrav  = global.grav;
image_xscale = bulletDir;
image_speed = 14/room_speed;
explode = true;
alarm[0] = 40;

if (global.screenshotMode){
    alarm[0] = 2;
}

//solid schenanigans
xprev = xprevious;
yprev = yprevious;
//persistent shenanigans
roomStart = room;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (explode){
    t_effect = instance_create(x, y, objGeneralNonkiller);
    t_effect.sprite_index = sprMakerBulletCrash;
    t_effect.image_speed = 16/room_speed;
    t_effect.image_xscale = image_xscale;
    if (sprite_index == sprMakerBulletVert || abs(image_angle mod 180) == 90){
        t_effect.image_angle = 90*image_xscale;
        t_effect.x += irandom_range(-2, 2);
        t_effect.y = y+2*sign(vspeed);
    }else{
        t_effect.x = x + 3*image_xscale;
        t_effect.y += irandom_range(-1, 2)*origGrav;
    }
    t_effect.depth = depth;
    t_effect.animOnce = true;
    
    audio_sound_pitch(audio_play_sound(sndMakerBulletHit, 0, 0), PITCH_FLUCT);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>explode = false;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///make sure we don't pass over shootable objects
//bbox coordinates (purposely do not include outermost pixel because of bullet sprites' corners
var _checkX1 = xprevious - 2*sign(hspeed);
var _checkX2 = x + 2*sign(hspeed);
var _checkY1 = y - 2;
var _checkY2 = y + 2;

var _colliding;
if (room == rChaozB &amp;&amp; instance_exists(objChaozC01a)){
    _colliding = collision_rectangle(_checkX1, _checkY1, _checkX2, _checkY2, objChaozC01a, true, true);
    if (_colliding != noone &amp;&amp; _colliding.bounce){
        _colliding.hspeed += hspeed * 3/8;
        _colliding.vspeed -= (_colliding.y - y)/2;
        _colliding.speed = min(_colliding.speed, 8);
        x = xprevious;
        scrMoveContactObject(sign(hspeed), 0, abs(hspeed), _colliding);
        with (_colliding)
            event_user(0);
        instance_destroy();
    }
}

if (hspeed != 0 &amp;&amp; (instance_exists(objMakerReflector) || instance_exists(objFinalP4MidReflector))){ //prevent skipping over the final boss' reflector objects
    _colliding = collision_rectangle(_checkX1, _checkY1, _checkX2, _checkY2, objMakerReflector, true, true);
    if (_colliding == noone){
        _colliding = collision_rectangle(_checkX1, _checkY1, _checkX2, _checkY2, objFinalP4MidReflector, true, true);
    }
    if (instance_exists(_colliding) &amp;&amp; _colliding.image_alpha &gt;= 1){
        var _oldX;
        _oldX = x;
        
        x = xprevious;
        scrMoveContactObject(sign(hspeed), 0, abs(hspeed), _colliding);
        
        if ((_colliding.object_index == objFinalP4MidReflector &amp;&amp; !_colliding.disabled) || sign(hspeed) == -sign(_colliding.image_xscale)){
            image_angle = -90*sign(_colliding.image_xscale*_colliding.image_yscale);
            y += abs(_oldX - x)*sign(-_colliding.image_yscale);
            vspeed = abs(hspeed)*sign(-_colliding.image_yscale);
            hspeed = 0;
            audio_play_sound(sndMakerReflector, 0, 0);
            alarm[0] = max(40, alarm[0]);
        }else{
            instance_destroy();
        }
    }
}

//final boss has reflectors
if ((room == rFinalBoss_1 || room == rFinalBoss_4) &amp;&amp; bbox_bottom &lt; 0){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xprev = xprevious;
yprev = yprevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSaveBlocker">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = xprevious;
y = yprevious;
scrMoveContactObject(sign(hspeed), 0, abs(hspeed), other); //for explosion effect
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.solid || other.object_index == objBetterBlock || object_is_ancestor(other.object_index, objBetterBlock)){
    if ((other.bbox_right &gt;= 0 &amp;&amp; other.bbox_left &lt; room_width) &amp;&amp; !(room == rStage03Touhou)){
        x = xprevious;
        y = yprevious;
        //for explosion effect
        scrMoveContactObject(sign(hspeed), 0, abs(hspeed), other);
        scrMoveContactObject(0, sign(vspeed), abs(vspeed), other);
        
        /*if (room == rStage03Touhou){
            explode = false;
        }*/
        instance_destroy();
    }else{
        x = xprev + hspeed;
        y = yprev + vspeed;
        xprevious = x;
        yprevious = y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (persistent){
    if (room == roomStart)
        persistent = false;
    else{
        explode = false;
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != rFinalBoss_2){
    explode = false;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
