<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprUndertaleBird</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>battleSelect = 0;
showMenu = -1;
submenu = -1;
submenuSelect = 0;
subActionText = 0;
hitpoints = 20;
playerDmg = 5;
activated = false;
jokesMade = 0;
attacksAttempted = 0;
nonRouletteActions = 0; //used for normal attacks
alarm[0] = 24;

barProgress = 0;
lastAction = "None";
createAttack = false;
//main window text
windowText = "Walker Jr strides slowly towards#you.";
windowTextLast = windowText;
windowTextPos = 0;
windowTextLength = string_length(windowText);
moreText = false; //more than one line of text?

//menu 0
fightAlpha = 0;
fightMissTimer = -1;
fightShots = 0;
fightCursorNum = 4;
for(var i=fightCursorNum-1; i&gt;=0; i--;){
    cursorX[i] = 0;
    cursorHit[i] = false;
    //hit fadeout
    cursorAlpha[i] = 1; //0-1
    cursorColor[i] = c_white;
}
currentCursor = 0;

//level rolling
/* LEVELS
0 - "Generic corridor needle"
1 - Needle w/ Pikachu picture
2 - Geezer rupees and Keese
3 - Taisa Green seeds
4 - Precision needle
*/
rolled[4] = 0;
totalToRoll = 5;
needToRoll = (totalToRoll - 1);
levelRolled = 0;
coinTimer = -1;
spareFreezeFrame = -1;
firstRedHeartMsg = true;
bkSquareColor = make_color_rgb(31, 77, 52);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resize window
with (objUndertaleWindow)
    size = 690;

battleSelect = 0;
submenu = -1;
showMenu = -1;
submenuSelect = 0;
subActionText = 0;
var _col;
_col = make_color_rgb(228, 59, 68);
repeat(irandom_range(14, 18)){
    with (instance_create(128, 544, objMakerCirclePart)){
        color = _col;
        curve = random_range(1.3, 2.78);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transition to hub
var _roomTransition;
_roomTransition = instance_create(400, 256, objMakerTeleTransition);
_roomTransition.exitIndex = 1;
_roomTransition.camDir = 270;
_roomTransition.roomTo = rStage03Hub; //prevents C1 Biff-like errors if player restarts
_roomTransition.offset = 8; //between this screen and the last one
_roomTransition.sprite = scrGetScreenSprite();
_roomTransition.save = false;
_roomTransition.exitPartCol = make_color_rgb(249, 163, 27);
room_goto(rStage03Hub);
audio_sound_pitch(audio_play_sound(sndMakerTeleportPersist, 0, 0), PITCH_FLUCT);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up next turn
activated = true;
switch(lastAction){
    case "Fight":
        if (attacksAttempted &gt;= 2){
            windowText = "Maybe you should try another#tactic.";
        }else if (jokesMade == 0){
            windowText = "Walker Jr is disinterested in#your presence.";
        }else{
            windowText = "Walker Jr appears not to notice#your attack.";
        }
        break;
    case "Joke":
        if (jokesMade == 2){
            windowText = "Walker Jr appears to be much#more cheerful.";
        }else if (jokesMade == 1){
            windowText = "Walker Jr appears a little less#sad.";
        }else{
            windowText = "Maybe it's time to play a game.";
        }
        break;
    case "Joke (Failed)":
        if (needToRoll == totalToRoll){
            windowText = "Maybe it's time to play a game.";
        }else if (needToRoll &gt; 0){
            windowText = "Maybe you should play another#level.";
        }else{
            windowText = "Now might be a good time to#leave.";
        }
        break;
    case "Roulette (Failed)":
        windowText = "Walker Jr is too sad to do#anything at the moment";
        break;
    case "Roulette":
        if (needToRoll &lt;= 0){
            windowText = "Now might be a good time to#leave.";
        }else{
            windowText = "Walker Jr is enjoying playing#with you.";
        }
        break;
    case "Servers down":
        windowText = "Now might be a good time to#leave.";
        break;
    case "Check":
    case "Flee":
        windowText = windowTextLast;
        break;
}
//failsafe
if (windowText == ""){
    windowText = "Walker Jr strides slowly towards#you.";
}

windowTextPos = 0;
windowTextLast = windowText;
windowTextLength = string_length(windowText);
lastAction = "None";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///User Event 0  -  Start enemy turn
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///After reaching the end of a line of text...
if (moreText){
    if (showMenu == 1){
        if (submenuSelect == 0){
            if (needToRoll &lt;= 0){
                windowText += "##He seems satisfied.#Now might be a good time to leave.";
            }else if (jokesMade &gt;= 2){
                if (needToRoll == totalToRoll){
                    windowText += "##He seems happier.#Maybe it's time to play a game.";
                }else{
                    windowText += "##He seems happier.#Maybe you should play another game.";
                }
            }else{
                windowText += "##He is too sad to do anything at the moment.";
            }
        }else if (submenuSelect == 1){
            if (jokesMade == 1)
                windowText += "##Walker Jr is slightly amused.";
            else if (jokesMade == 2)
                windowText += "##Walker Jr is feeling much better.";
        }else if (submenuSelect == 2){
            switch(levelRolled){
                case 0:
                    windowText += "##It's generic corridor needle.";
                    break;
                case 1:
                    windowText += "##It's needle with a picture on the#side.";
                    break;
                case 2:
                    windowText += "##It's a recreation of a boss.";
                    break;
                case 3:
                    windowText += "##It's an avoidance.";
                    break;
                case 4:
                    windowText += "##It's precision needle!#You're screwed!";
                    break;
            }
        }
    }else if (showMenu == 3){
        if (needToRoll &lt;= 0){
            var _coins;
            if (!global.SRCoin[1]){
                _coins = "1 blue#coin.";
                coinTimer = 0;
            }else{
                _coins = "0 blue#coins.";
                alarm[4] = 150;
            }
            windowText += "##You earned 0 EXP and " + _coins;
        }
    }
    moreText = false;
    windowTextLength = string_length(windowText);
    windowTextPos += 2; //for the '##'
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activate and play music
scrIdentAttack(room, 0);  // basically scrIdentRoom();
if (room != rStage03UndertalePractice){
    activated = true;
    with (objWorld){
        playMusic = true;
        alarm[0] = -1;
    }
    
    with (objUndertaleWindow){
        activated = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (activated){
    if (!global.dead){
        if (showMenu != -1 &amp;&amp; submenu != -1 &amp;&amp; scrButtonCheckPressed(global.jumpButton)){
            if (submenu &lt;= 0){
                battleSelect = showMenu;
                showMenu = -1;
                submenu = -1;
            }else{
                submenu --;
            }
            audio_stop_sound(sndUndertaleBoop);
            var _snd = audio_play_sound(sndUndertaleBoop, 0, 0);
            audio_sound_pitch(_snd, 0.72);
        }
        if (showMenu == -1){
            if (scrButtonCheckPressed(global.rightButton)){
                battleSelect += 1;
                audio_stop_sound(sndUndertaleBeep);
                audio_play_sound(sndUndertaleBeep, 0, 0);
                if (battleSelect &gt; 3){
                    battleSelect = 0;
                }
            }else if (scrButtonCheckPressed(global.leftButton)){
                battleSelect -= 1;
                audio_stop_sound(sndUndertaleBeep);
                audio_play_sound(sndUndertaleBeep, 0, 0);
                if (battleSelect &lt; 0){
                    battleSelect = 3;
                }
            }
            if (scrButtonCheckPressed(global.shootButton)){
                if (battleSelect != 2){
                    if (battleSelect == 0){
                        fightAlpha = 0;
                        fightMissTimer = -1;
                        fightShots = 0;
                        for(var i=(fightCursorNum-1); i&gt;=0; i--){
                            cursorX[i] = -64 - 96*i;
                            cursorHit[i] = false;
                            cursorAlpha[i] = 1; //0-1
                            cursorColor[i] = c_white;
                        }
                        currentCursor = 0;
                    }
                    windowTextPos = string_length(windowText);
                    showMenu = battleSelect;
                    submenuSelect = 0;
                    submenu = 0;
                    audio_stop_sound(sndUndertaleBoop);
                    audio_play_sound(sndUndertaleBoop, 0, 0);
                }else{
                    audio_stop_sound(sndMakerMenuInvalid);
                    audio_play_sound_nogroup(sndMakerMenuInvalid, 0, 0);
                }
            }
        }else if (showMenu == 0){
            if (submenu == 0){
                if (scrButtonCheckPressed(global.shootButton)){
                    submenu = -1;
                    audio_stop_sound(sndUndertaleBoop);
                    audio_play_sound(sndUndertaleBoop, 0, 0);
                }
            }else if (submenu == -1){
                if (currentCursor &lt; 4 &amp;&amp; scrButtonCheckPressed(global.shootButton) &amp;&amp; cursorX[currentCursor] &gt; 7){
                    if (cursorX[currentCursor] &lt; 78 || cursorX[currentCursor] &gt; 611){  // failed hit
                        // fade out
                    }else if (cursorX[currentCursor] &lt;= 222 || cursorX[currentCursor] &gt;= 469){  // weak hit
                        cursorColor[currentCursor] = c_yellow;
                    }else if (cursorX[currentCursor] &lt;= 304 || cursorX[currentCursor] &gt;= 388){  // stronger hit
                        cursorColor[currentCursor] = c_red;
                    }else if (cursorX[currentCursor] &lt;= 336 || cursorX[currentCursor] &gt;= 356){  // stronger hit
                        cursorColor[currentCursor] = c_aqua;
                    }else{  // perfect hit!!!
                        cursorColor[currentCursor] = c_yellow;
                    } //all meaningless, but it looks cool
                    audio_sound_pitch(audio_play_sound(sndUndertaleFightBar, 0, 0), 0.5 + (1-max(abs(cursorX[currentCursor] - 346) - 10, 0)/346)/1);
                    cursorHit[currentCursor] = true;
                    currentCursor ++;
                    fightShots ++;
                    if (currentCursor == 4){
                        fightMissTimer = 0;
                        attacksAttempted ++;
                        lastAction = "Fight";
                    }
                }
                if (currentCursor == 4 &amp;&amp; fightMissTimer &gt;= 0){
                    fightMissTimer ++;
                    if (fightShots == 0 &amp;&amp; fightMissTimer == 30){
                        //did not attack
                        lastAction = "Flee";
                        fightMissTimer = -1;  // stop animation
                        event_user(0);
                    }else if ((fightMissTimer == 30 || fightMissTimer == 40 || fightMissTimer == 50 || fightMissTimer == 60) &amp;&amp; fightShots &gt;= 1){
                        audio_play_sound(sndShootLoud, 0, 0);
                        fightShots --;
                        if (fightShots &lt;= 0){
                            fightMissTimer = 60;
                        }
                    }
                    if (fightMissTimer == 70){
                        audio_play_sound(sndMakerSpotlight, 0, 0);
                        alarm[2] = 80;
                    }
                }else if (currentCursor &lt; 3 &amp;&amp; fightAlpha &lt; 1){
                    fightAlpha = min(fightAlpha+0.1, 1);
                }
                for(var i=0; i&lt;fightCursorNum; i++;){
                    if (i &lt; currentCursor){
                        if (cursorAlpha[i] &gt; 0){
                            cursorAlpha[i] -= 0.03;
                        }
                        if (global.count mod 3 == 0 &amp;&amp; cursorX[i] &gt;= 336 &amp;&amp; cursorX[i] &lt;= 356){
                            switch(cursorColor[i]){
                                case c_yellow:
                                    cursorColor[i] = c_red;
                                    break;
                                case c_red:
                                    cursorColor[i] = c_aqua;
                                    break;
                                default:
                                    cursorColor[i] = c_yellow;
                                    break;
                            }
                        }
                    }else{
                        cursorX[i] += 8;
                        if (cursorX[i] &gt;= 685){
                            cursorHit[i] = false;
                            currentCursor ++;
                            cursorX[i] = 685;
                            if (currentCursor == 4){
                                fightMissTimer = 0;
                            }
                        }
                    }
                }
            }
        }else if (showMenu == 1){
            if (submenu == 0){
                if (scrButtonCheckPressed(global.shootButton)){
                    submenu = 1;
                    submenuSelect = 0;
                    audio_stop_sound(sndUndertaleBoop);
                    audio_play_sound(sndUndertaleBoop, 0, 0);
                }
            }else if (submenu == 1){
                if (scrButtonCheckPressed(global.rightButton) || scrButtonCheckPressed(global.leftButton)){
                    if ((submenuSelect mod 2) == 0){
                        submenuSelect = 1;
                    }else if ((submenuSelect mod 2) == 1){
                        submenuSelect -= 1;
                    }
                    audio_stop_sound(sndUndertaleBeep);
                    audio_play_sound(sndUndertaleBeep, 0, 0);
                }
                if ((scrButtonCheckPressed(global.upButton) || scrButtonCheckPressed(global.downButton)) &amp;&amp; submenuSelect != 1){
                    if (submenuSelect == 0){
                        submenuSelect = 2;
                    }else if (submenuSelect == 2){
                        submenuSelect = 0;
                    }
                    audio_stop_sound(sndUndertaleBeep);
                    audio_play_sound(sndUndertaleBeep, 0, 0);
                }
                
                if (scrButtonCheckPressed(global.shootButton)){
                    switch(submenuSelect){
                        case 0: //Check
                            windowText = "WALKER JR  -  ATK 1 DEF 1";
                            moreText = true;
                            alarm[1] = string_length(windowText)*2 + 40;
                            lastAction = "Check";
                            break;
                        case 1: //Joke
                            if (jokesMade == 0)
                                windowText = 'You tell Walker Jr crushers look#like "knockoff thwomps".';
                            else if (jokesMade == 1)
                                windowText = 'You play the song "Lonely UFO"#and yell "254!"';
                            else
                                windowText = "You try to think of another joke,#but can't.";
                            alarm[1] = string_length(windowText)*2 + 40;
                            if (jokesMade &lt; 2){
                                jokesMade ++;
                                lastAction = "Joke";
                                moreText = true;
                            }else
                                lastAction = "Joke (Failed)";
                            break;
                        case 2:
                            if (jokesMade &lt; 2){
                                windowText = "Walker Jr doesn't want to play anything right now.";
                                lastAction = "Roulette (Failed)";
                            }else{
                                levelRolled = -1;
                                
                                var _hits = (20-hitpoints) div playerDmg;
                                var _offset = floor(1.5*_hits + (totalToRoll-needToRoll));
                                var _ind = -1;
                                for (var i=0; i&lt;totalToRoll; i++;){
                                    _ind = ((i+_offset) mod totalToRoll);
                                    if (rolled[_ind] == 0){
                                        levelRolled = _ind;
                                        break;
                                    }
                                }
                                if (levelRolled &gt;= 0){
                                    needToRoll --;
                                    rolled[levelRolled] = 1;
                                    enemyAtk = levelRolled + 4;
                                    windowText = "You roll a level in Roulette...";
                                    alarm[1] = string_length(windowText)*2 + 40;
                                    lastAction = "Roulette";
                                    moreText = true;
                                }else{
                                    windowText = "You attempt to roll another level, but the servers appear to be down.";
                                    lastAction = "Servers down";
                                }
                            }
                            break;
                    }
                    createAttack = true;
                    submenu = -1;
                    windowTextLength = string_length(windowText);
                    windowTextPos = 0;
                    
                    audio_stop_sound(sndUndertaleBoop);
                    audio_play_sound(sndUndertaleBoop, 0, 0);
                }
            }
        }else if (showMenu == 2){
            
        }else if (showMenu == 3){
            if (submenu != -1){
                if ((scrButtonCheckPressed(global.upButton) || scrButtonCheckPressed(global.downButton))){
                    if (submenuSelect == 0){
                        submenuSelect = 1;
                    }else if (submenuSelect == 1){
                        submenuSelect = 0;
                    }
                    audio_stop_sound(sndUndertaleBeep);
                    audio_play_sound(sndUndertaleBeep, 0, 0);
                }
                if (scrButtonCheckPressed(global.shootButton)){
                    switch(submenuSelect){
                        case 0: //Spare
                        case 1: //Flee
                            if (needToRoll &gt; 0){
                                if (submenuSelect == 1){
                                    windowText = "Who are you running from?";
                                    createAttack = true;
                                    lastAction = "Flee";
                                    windowTextLength = string_length(windowText);   
                                    windowTextPos = 0;
                                }else{
                                    lastAction = "Flee";
                                    event_user(0);
                                }
                            }else{
                                windowText = "YOU WON!";
                                windowTextLength = string_length(windowText);
                                windowTextPos = 0;
                                alarm[1] = string_length(windowText)*2 + 40;
                                moreText = true;
                                
                                var _hitsTaken = ceil((20-hitpoints) / playerDmg);
                                if (!global.practicing &amp;&amp; _hitsTaken &gt;= 0){
                                    var _previousLowest = global.undertaleHitLowest;
                                    if (_previousLowest &lt; 0 || _previousLowest &gt; _hitsTaken){
                                        global.undertaleHitLowest = _hitsTaken;
                                    }
                                    
                                    // Get clear type and set relevant variables
                                    var _ident = noone;
                                    if (_hitsTaken == 0){
                                        _ident = 3.2;
                                    }else if (_previousLowest == -1){  // first clear
                                        _ident = 3.0;
                                    }else if (_previousLowest &gt; _hitsTaken){
                                        _ident = 3.1;
                                    }
                                    //  Create Pop-up
                                    if (_ident != noone){
                                        var _popup = instance_create(0, 0, objMakerRecordAchieved);
                                        with (_popup){
                                            ident = _ident;
                                            event_user(0);
                                        }
                                    }
                                }
                                
                                spareFreezeFrame = global.count*10/room_speed;
                                with (objWorld){
                                    playMusic = false;
                                }
                                
                                var _ang = 20;
                                var _inst;
                                for(var i=0;i&lt;5;i++){
                                    _inst = instance_create(400, 160, objMakerDeathEffect);
                                    _inst.direction = _ang + 72*i;
                                    _inst.speed = 8;
                                }
                                audio_play_sound(sndUndertaleSpare, 0, 0);
                            }
                            break;
                    }
                    submenu = -1;
                    audio_stop_sound(sndUndertaleBoop);
                    audio_play_sound(sndUndertaleBoop, 0, 0);
                }
            }
        }
    }
    
    //Text
    if (showMenu != 0 &amp;&amp; submenu == -1 &amp;&amp; windowTextLength &gt; 0 &amp;&amp; !global.dead){
        if (windowTextPos &lt; windowTextLength){
            if (scrButtonCheckPressed(global.jumpButton) &amp;&amp; windowTextPos &gt;= 0.5){
                windowTextPos = windowTextLength;
                if (alarm_get(1) &gt; 40){
                    alarm[1] = 40;
                }
                audio_stop_sound(sndUndertaleText);
                audio_play_sound(sndUndertaleText, 0, 0);
            }else{
                windowTextPos = min(windowTextPos+0.5, windowTextLength);
                if (windowTextPos mod 2 == 0){ //&lt; 0.5)
                    audio_stop_sound(sndUndertaleText);
                    audio_play_sound(sndUndertaleText, 0, 0);
                }
            }
        }else if (scrButtonCheckPressed(global.shootButton) &amp;&amp; alarm[1] &gt; 0){
            alarm[1] = -1;
            event_perform(ev_alarm, 1);
        }else if (createAttack &amp;&amp; !moreText &amp;&amp; windowTextPos &gt;= windowTextLength &amp;&amp; (scrButtonCheckPressed(global.shootButton) || scrButtonCheckPressed(global.jumpButton))){
            event_user(0);
            createAttack = false;
        }
    }
}else{
    //continue fight miss animation
    if (fightMissTimer &gt; 0){
        fightMissTimer ++;
        if (fightMissTimer &gt;= 158)
            fightMissTimer = -1;
    }
}

// fight menu background
if (!(showMenu == 0 &amp;&amp; submenu == -1 &amp;&amp; currentCursor &lt; 4)){
    if (fightAlpha &gt; 0){
        fightAlpha = max(fightAlpha-0.025, 0);
    }
}

if (coinTimer &gt;= 0){
    coinTimer ++;
    if (coinTimer == 90 &amp;&amp; !global.SRCoin[1]){
        instance_create(476, 402, objS3BlueCoin);
    }
    if (coinTimer == 210){
        event_perform(ev_alarm, 4);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset room after each an attack
if (!global.dead){
    with (objMakerSpikeUp)
        alphaDec = 0.1;
    with (objUndertaleBlock)
        fadeout = true;
    with (objUndertaleAttackVisual)
        fadeout = true;
    with (objUndertaleProj){
        fadeout = true;
        speed = 0;
        gravity = 0;
    }
    with (objUndertaleHeart){
        fadeout = true;
    }
    with (objUndertaleAttackKeese){
        speed = 0;
        fadeout = true;
    }
    with (objUndertaleTeleporter)
        fadeout = true;
    with (objUndertaleHeart2){
        fadeout = true;
        gravity = 0;
        speed = 0;
    }
    alarm[3] = 35;
    alarm[5] = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start enemy turn
if (lastAction != "Roulette"){
    enemyAtk = nonRouletteActions mod 4;
    nonRouletteActions ++;
}
with (instance_create(400-96+4, 298, objUndertaleEnemyAttack)){
    attack = other.enemyAtk;
    event_user(0);
}
if (!global.practicing){ //this shouldn't be necessary, but I'm not taking any chances
    global.undertaleEncountered[enemyAtk] = 1;
}
with (objUndertaleWindow){
    size = 192;
}
windowText = "";
windowTextPos = 0;
windowTextLength = 0;
activated = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop "Invalid" SFX
audio_stop_sound(sndMakerMenuInvalid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// green background grid
draw_set_color(bkSquareColor);
draw_line_width(11 - 0.5, 1 - 0.5, 790 - 0.5, 1 - 0.5, 3);
draw_line_width(11 - 0.5, 140 - 0.5, 790 - 0.5, 140 - 0.5, 3);
draw_line_width(11 - 0.5, 280 - 0.5, 790 - 0.5, 280 - 0.5, 3);
for(var i=0;i&lt;7;i++;){
    draw_line_width(12 + 129.3333*i - 0.5, -1 - 0.5, 12 + 129.3333*i - 0.5, 282 - 0.5, 3);
}
draw_set_color(c_white);

// options
var _heartSubimg = 0;  // _heartSubimg
var _buttonY = 536;  // height of option buttons
for(var i=0;i&lt;4;i++;){
    if (!global.practicing &amp;&amp; showMenu == -1 &amp;&amp; battleSelect == i){
        draw_sprite(sprUndertaleOptions, i+4,112+(154*i), _buttonY);
        draw_sprite_ext(sprMakerHeart, _heartSubimg, 129+(154*i), _buttonY+20, 1, 1, 11.25*sin(global.count*pi/36), c_white, 1);
    }else{
        draw_sprite(sprUndertaleOptions, i, 112+(154*i),  _buttonY);
    }
}

// Walker Jr character
if (spareFreezeFrame == -1){
    draw_sprite_ext(sprUndertaleBird, 1 + global.count*10/room_speed, 400, 160, 4, 4, 0, c_white, 1);
}else{
    draw_sprite_ext(sprUndertaleBird, 1 + spareFreezeFrame, 400, 160, 4, 4, 0, c_white, 0.5);
}


// fight cursor bar meter thing
if (fightAlpha &gt; 0){
    with (objUndertaleWindow){
        draw_sprite_ext(sprUndertaleFightMeter, 0, 398, 389, ((2*abs((x+5)-400)) - 1)/115, 182/114, 0, c_white, other.fightAlpha);  // x+5 accounts for border thickness
    }
}

// set values
draw_set_font(fDefault24);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_white);

if (showMenu == 0){
    if (submenu == 0){
        draw_sprite_ext(sprMakerHeart, _heartSubimg, 126, 336, 1, 1, 11.25*sin(global.count*pi/36), c_white, 1);
        
        var _name = "   Walker Jr";
        var _icon = 0;
        if (needToRoll &lt;= 0){  // player can spare
            _icon = 1;
            draw_set_color(c_yellow);
            if (global.colorBlind){
                _name += "  (Spareable)";
            }
        }
        
        draw_sprite(sprUndertaleAsterik, _icon, 160, 336);
        draw_text(156, 326, _name);
        draw_set_color(c_white);
    }else{
        for(var i=(fightCursorNum-1); i&gt;=currentCursor; i--;){
            if (cursorX[i] &gt; 7){
                if (currentCursor == i){
                    draw_sprite(sprUndertaleFightBar, 0, cursorX[i]+54, 389);
                }else{
                    draw_sprite(sprUndertaleFightBar, 1, cursorX[i]+54, 389);
                }
            }
        }
        var _scale;
        for(var i=(min(currentCursor, fightCursorNum)-1); i&gt;=0; i--;){
            draw_set_alpha(cursorAlpha[i]);
            draw_set_color(cursorColor[i]);
            
            _scale = 1;
            if (i &lt; currentCursor &amp;&amp; cursorHit[i]){
                _scale += (1 - cursorAlpha[i]);
                draw_rectangle(max(cursorX[i] - 7*_scale, 0) + 55, 388 - 96*_scale + 1, max(cursorX[i] + 7*_scale, 0) + 55, 388 + 96*_scale - 1, false);
            }
        }
        draw_set_color(c_white);
        draw_set_alpha(1);
        
        if (fightMissTimer &gt;= 0){
            if (fightMissTimer &gt; 30 &amp;&amp; fightMissTimer &lt;= 70){
                draw_sprite_ext(sprUndertaleBullets, 0, 400, 160, 12+40*(1 - (fightMissTimer mod 10)/9), 12+40*(1 - (fightMissTimer mod 10)/9), 0, c_white, (fightMissTimer mod 10)/9);
            }else if (fightMissTimer &gt; 70 &amp;&amp; fightMissTimer &lt;= 108){
                draw_sprite_ext(sprUndertaleMISS, 0, 400, 256 - (fightMissTimer-70)*(7.5 + (fightMissTimer-71)*(-0.4/2)), 1, 1, 0, c_white, (fightMissTimer-70)/20);
            }else if (fightMissTimer &gt; 108 &amp;&amp; fightMissTimer &lt;= 120){
                draw_sprite(sprUndertaleMISS, 0, 400, 256 - (fightMissTimer-108)*(2.5 + (fightMissTimer-109)*(-0.4/2)));
            }else if (fightMissTimer &gt; 120 &amp;&amp; fightMissTimer &lt;= 150){
                draw_sprite(sprUndertaleMISS, 0, 400, 256);
            }else if (fightMissTimer &gt; 150 &amp;&amp; fightMissTimer &lt; 158){
                draw_sprite_ext(sprUndertaleMISS, 0, 400, 256, 1, 1, 0, c_white, 1-(fightMissTimer-150)/8);
            }
        }
    }
}else if (showMenu == 1){
    if (submenu == 0){
        draw_sprite_ext(sprMakerHeart, _heartSubimg, 126, 336, 1, 1, 11.25*sin(global.count*pi/36), c_white, 1);
        var _name = "   Walker Jr";
        var _icon = 0;
        if (needToRoll &lt;= 0){  // player can spare
            _icon = 1;
            draw_set_color(c_yellow);
            if (global.colorBlind){
                _name += "  (Spareable)";
            }
        }
        draw_sprite(sprUndertaleAsterik, _icon, 160, 336);
        draw_text(156, 326, _name);
        draw_set_color(c_white);
    }else if (submenu == 1){
        for(var i=0;i&lt;3;i++){
            if (i == submenuSelect)
                draw_sprite_ext(sprMakerHeart, _heartSubimg, 126 + 372*(i mod 2), 336 + 54*(i div 2), 1, 1, 11.25*sin(global.count*pi/36), c_white, 1);
           draw_sprite(sprUndertaleAsterik, 0, 160 + 372*(i mod 2), 336 + 56*(i div 2));
        }
        draw_text(200, 326, "Check");
        draw_text(560, 326, "Joke");
        draw_text(200, 382, "Play");
        //draw_text(560, 426, "");
    }
}else if (showMenu == 2){
    
}else if (showMenu == 3){
    if (submenu != -1){
        draw_sprite_ext(sprMakerHeart, _heartSubimg, 126, 336 + 48*submenuSelect, 1, 1, 11.25*sin(global.count*pi/36), c_white, 1);
        
        var _option = "   Spare";
        var _icon = 0;
        if (needToRoll &lt;= 0){  // player can spare
            _icon = 1;
            draw_set_color(c_yellow);
            if (global.colorBlind){
                _option += "  (Ready)";
            }
        }
        
        draw_sprite(sprUndertaleAsterik, _icon, 160, 336);
        draw_text(156, 326, _option);
        
        _option = "   Flee";
        draw_sprite(sprUndertaleAsterik, _icon, 160, 384);
        draw_text(156, 374, _option);
        draw_set_color(c_white);
    }
}

if (windowTextPos &gt; 0 &amp;&amp; showMenu != 0 &amp;&amp; submenu == -1){
    draw_set_halign(fa_left);
    var _windowTextPart;
    _windowTextPart = string_copy(windowText, 0, ceil(windowTextPos));
    draw_text_ext(108, 326, string_copy(windowText, 0, ceil(windowTextPos)), -1, 584);
    draw_sprite(sprUndertaleAsterik, 0, 80, 336);
    if (string_count("##", _windowTextPart) &gt;= 1){
        if (string_width(string_copy(windowText, 0, 40)) &gt; 484){ //weird method, but it works
            draw_sprite(sprUndertaleAsterik, 0, 80, 336+96);
        }else{
            draw_sprite(sprUndertaleAsterik, 0, 80, 336+64);
        }
    }
}

draw_set_font(fDefault18);
var _left = 353, _top = 491;
draw_set_color(c_red);
draw_rectangle(_left, _top, _left+40, _top + 25, false);
draw_set_color(c_yellow);
draw_rectangle(_left, _top, _left+40*(hitpoints/20),  _top + 25, false);
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_text(138, 495, "KID");
draw_text(238, 495, "LV 3");
draw_text(330, 495, "HP");
draw_text(420, 495, string(hitpoints));
draw_set_halign(fa_left);
draw_text(420 + string_width(string(hitpoints))/2, 495, " / 20");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
