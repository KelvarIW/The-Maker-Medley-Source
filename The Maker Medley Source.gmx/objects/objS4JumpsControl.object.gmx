<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerSingleStar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-19</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alphaSine1J = -1;
alphaSine2J = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(objPlayer)){
    //check if in Dice
    if (objPlayer.bbox_left &gt;= 608 &amp;&amp; (collision_rectangle(608, 224, 768, 608, objPlayer, false, true) == noone &amp;&amp; collision_rectangle(768, 384, 864, 608, objPlayer, false, true) == noone)){
        if (global.playerJumps == 2){
            global.playerJumps = 1;
            audio_stop_sound(sndGainStar);
            audio_stop_sound(sndLoseStar);
            audio_play_sound(sndLoseStar, 0, false);
            if (alphaSine1J == -1){
                alphaSine1J = 0;
            }else if (alphaSine1J &lt;= pi/2){
                alphaSine1J = alphaSine1J;
            }else{
                alphaSine1J = pi-alphaSine1J;
            }
        }
    }else{
        if (global.playerJumps == 1){
            global.playerJumps = 2;
            audio_stop_sound(sndLoseStar);
            audio_stop_sound(sndGainStar);
            audio_play_sound(sndGainStar, 0, false);
            if (alphaSine2J == -1){
                alphaSine2J = 0;
            }else if (alphaSine2J &lt;= pi/2){
                alphaSine2J = alphaSine1J;
            }else{
                alphaSine2J = pi-alphaSine2J;
            }
        }
    }
}

//single jump flash
if (alphaSine1J &gt;= 0){
    if (alphaSine1J &lt; pi/2) alphaSine1J += pi/20;
    else alphaSine1J += pi/28;
    if (alphaSine1J &gt;= pi)
        alphaSine1J = -1;
}

//double jump flash
if (alphaSine2J &gt;= 0){
    if (alphaSine2J &lt; pi/2) alphaSine2J += pi/20;
    else alphaSine2J += pi/28;
    if (alphaSine2J &gt;= pi)
        alphaSine2J = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alphaSine1J != -1){
    draw_set_color(c_black);
    draw_set_alpha(2*sin(alphaSine1J)/3);
    
    // ordered top to bottom
    draw_rectangle(960 + 0.5,  32 + 0.5, 1120 - 0.5, 576 - 0.5, false);  // rightmost column
    draw_rectangle(640 + 0.5, 160 + 0.5, 960 - 0.5, 224 - 0.5, false);
    for (var i=0; i&lt;6; i++){
        draw_rectangle(800 + 16*i  + 0.5, 224  + 0.5, 800 + 16*(i+1)  - 0.5, 352 + 16*i  - 0.5, false);
    }
    draw_rectangle(896 + 0.5, 224 + 0.5, 960 - 0.5, 608 - 0.5, false);
    
    draw_sprite_ext(sprMakerSingleStar, 0, 864, 296, 2, 2, 0, c_white, 2*sin(alphaSine1J)/3);
    
    draw_set_alpha(1);
    draw_set_color(c_white);
}
if (alphaSine2J != -1){
    draw_set_color(c_gray);
    draw_set_alpha(2*sin(alphaSine2J)/3);
    
    // ordered top to bottom
    draw_rectangle(608 + 0.5, 224 + 0.5, 800 - 0.5, 256 - 0.5, false);
    draw_rectangle(464 + 0.5, 256 + 0.5, 800 - 0.5, 496 - 0.5, false);
    //rightmost "steps"
    for (var i=0; i&lt;3; i++){
        draw_rectangle((800 + 32*i)  + 0.5, (352 + 32*i)  + 0.5, (800 + 32*(i+1))  - 0.5, 512 - 0.5, false);
    }
    //bottom "steps"
    for (var i=0; i&lt;7; i++){
        draw_rectangle((480 + 16*i)  + 0.5, (496 + 16*i)  + 0.5, 896  - 0.5, (496 + 16*(i+1)) - 0.5, false);
    }
    draw_sprite_ext(sprMakerDoubleStar, 0, 656, 416, 2, 2, 0, c_white, 2*sin(alphaSine2J)/3);
    
    draw_set_alpha(1);
    draw_set_color(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
