<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerMegaBlocks</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1299</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf2 = -4;  // previous tileset (for fading out)

if (instance_number(object_index) &gt; 1){
    instance_destroy();
}else{
    cameraPos = 0;
    pixelsUntilNewColumn = 0;
    blocksUntilSpikeTop = sqrt(irandom_range(1, 25));
    blocksUntilSpikeBottom = sqrt(irandom_range(1, 25));
    spikesToGenTop = 0;
    spikesToGenBottom = 0;
    spikesGeneratedTop = 0;
    spikesGeneratedBottom = 0;
    if (blocksUntilSpikeTop == blocksUntilSpikeBottom)
        blocksUntilSpikeBottom ++;
    previewLength = 25; //number of blocks
    image_speed = 0;
    /*
        0 1 2
        3 4 5  []
        6 7 8
        
        10  11
          O
        12  13
    */
    
    scrLoadRecord();
    
    //Notes about generation:
    //2 &lt;= Top H &lt;= 6
    //12 &lt;= Bottom H &lt;= 16
    
    //0 &amp; 1 always block 4
    //8-11 is always blank
    //17 &amp; 18 always block 4
    tilesetPrev = 0; //next tileset, if the main one is fading out
    tilesetDrawing = 0; //tileset we are currently using
    ceilH = 0; //0-4
    ceilBlocks = 0;
    floorH = 9; //5-9
    floorBlocks = 0;
    fadeDelay = 350;
    fadeFrames = 80;
    fadeTimer = fadeDelay;
    sections = min(global.farthestRoomEver, scrGetRoomNum(rGeezerHitchcock)) - 1;
    
    var _roomsExcluded;
    _roomsExcluded = 0;
    if (global.farthestRoomEver &gt;= scrGetRoomNum(rStage01Purify)){_roomsExcluded ++;}
    if (global.farthestRoomEver &gt;= scrGetRoomNum(rStage01Ace)){_roomsExcluded ++;}   //no spikes
    if (global.farthestRoomEver &gt;= scrGetRoomNum(rStage1to2Transition)){_roomsExcluded ++;} //we don't need a preview for the stage transition
    if (global.farthestRoomEver &gt;= scrGetRoomNum(rStage02Shark2)){_roomsExcluded ++;} //same tiles as 02Shark1
    if (global.farthestRoomEver &gt;= scrGetRoomNum(rStage02Flappy)){_roomsExcluded ++;} //this screen doesn't really match with the preview system
    
    sections -= _roomsExcluded;
    if (sections &lt;= 0){
        tileset = 0;
    }else
        tileset = irandom_range(1, sections); //main tileset
    
    for(i=26;i&gt;=0;i--){
        for(j=9;j&gt;=0;j--){
            tileArray[i, j] = -1;
        }
    }
    
    repeat(28){
        event_user(0);
        with (objTitleSpike){
            x -= 32;
        }
    }
    with (objTitleSpike){ //we only want to move the spikes 27 times, so let's undo one of the movements
        x += 30; //the spike will move 2 more pixels right in its Create Event
    }
    
    //Level-specific
    zililyCol = make_color_rgb(0, 2, 4);
    sharkGray = make_color_rgb(78, 78, 78);
    for(i=26;i&gt;=0;i--){
        for(j=9;j&gt;=0;j--){
            geezerAlpha[i, j] = random_range(0.35, 2.1);
            geezerDuration[i, j] = irandom_range(5, 7);
        }
    }
    hitchcockCol = make_color_rgb(77, 143, 185);
    vovkaCol = make_color_rgb(87, 87, 87);
    patrickFailsafeCol = make_colour_rgb(0, 144, 255);
    titleBackCount = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free the surface
if (surface_exists(surf2))
    surface_free(surf2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cameraPos += 2;
pixelsUntilNewColumn += 2;
if (pixelsUntilNewColumn &gt;= 32){
    pixelsUntilNewColumn -= 32;
    event_user(0);
}

fadeTimer --;
if (fadeTimer &lt;= 0 &amp;&amp; sections &gt; 0){
    fadeTimer = fadeDelay + fadeFrames;
    tilesetPrev = tileset;
    if (sections &gt; 2)
        tileset = (tileset + irandom_range(2, sections-2)) mod (sections + 1);
    else
        tileset = (tileset) mod 2 + 1;
}

if (tileset == 14 || tilesetPrev == 14){
    for(i=26;i&gt;=0;i--){
        for(j=9;j&gt;=0;j--){
            geezerDuration[i, j] --;
            if (geezerDuration[i, j] &lt;= 0){
                geezerAlpha[i, j] = random_range(0.35, 1.24);
                geezerDuration[i, j] = irandom_range(5, 7);
            }
        }
    }
}

titleBackCount ++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Background/Tiles/Spikes
var t_lowestCeil, t_highestFloor, i, j;
t_lowestCeil = -1;
t_highestFloor = -1;

var _resetShader = false;
var _abstr4kt2FailsafeCol = c_white;


//Background / Scenery
switch(tilesetDrawing){
    case 0: //Tutorial
    case 1: //Abstr4kt 1
    case 2: //Dice
        draw_background(bkMakerSky, -((cameraPos + titleBackCount) mod 500), 0);
        draw_background(bkMakerSky, -((cameraPos + titleBackCount) mod 500) + 500, 0);
        draw_background(bkMakerSky, -((cameraPos + titleBackCount) mod 500) + 1000, 0);
        draw_background(bkMakerSky, -((cameraPos + titleBackCount) mod 500), 500);
        draw_background(bkMakerSky, -((cameraPos + titleBackCount) mod 500) + 500, 500);
        draw_background(bkMakerSky, -((cameraPos + titleBackCount) mod 500) + 1000, 500);
        break;
    case 3: //kurath
        draw_background_ext(bkMakerSky, -((cameraPos + titleBackCount) mod 500), 0, 1, 1, 0, c_ltgray, 1);
        draw_background_ext(bkMakerSky, -((cameraPos + titleBackCount) mod 500) + 500, 0, 1, 1, 0, c_ltgray, 1);
        draw_background_ext(bkMakerSky, -((cameraPos + titleBackCount) mod 500) + 1000, 0, 1, 1, 0, c_ltgray, 1);
        draw_background_ext(bkMakerSky, -((cameraPos + titleBackCount) mod 500), 500, 1, 1, 0, c_ltgray, 1);
        draw_background_ext(bkMakerSky, -((cameraPos + titleBackCount) mod 500) + 500, 500, 1, 1, 0, c_ltgray, 1);
        draw_background_ext(bkMakerSky, -((cameraPos + titleBackCount) mod 500) + 1000, 500, 1, 1, 0, c_ltgray, 1);
        break;
    case 4: //zilily
        draw_set_color(zililyCol);
        draw_rectangle(0 -0.5, 0 -0.5, 800 -0.5, 608 -0.5, false);
        draw_set_color(c_white);
        draw_sprite_ext(sprS1ZililyBK, titleBackCount/2, 0 - (cameraPos mod 800), 0, 2, 2, 0, c_white, 1);
        draw_sprite_ext(sprS1ZililyBK, titleBackCount/2, 800 - (cameraPos mod 800), 0, 2, 2, 0, c_white, 1);
        break;
    case 5: ///128-Up
        draw_background_tiled(bkS1Onetwentyeight, -(cameraPos mod 64), 0);
        break;
    case 6: //Patrick
        if (global.hueshiftEnabled){
            shader_set(shdHueShift);
            shader_set_uniform_f(global.hueshiftHandle, 1.745);
            draw_background_tiled(bkS2Abstr4ktNew, -((cameraPos + 0.425*titleBackCount) mod 256), 0);
            shader_reset();
        }else{
            draw_set_color(c_white);
            draw_rectangle(0 -0.5, 0 -0.5, 800 -0.5, 608 -0.5, false);
            draw_background_tiled_ext(bkS2Abstr4ktShaderFailsafe, -((cameraPos + 0.425*titleBackCount) mod 256), 0, 1, 1, patrickFailsafeCol, 1);
        }
        break;
    case 7: //Chaoz Airflow
        draw_background_tiled(bkChaoz, -(cameraPos mod 32), 0);
        break;
    case 8: //Shark 1/2
        draw_set_color(sharkGray);
        draw_rectangle(0 -0.5, 0 -0.5, 800 -0.5, 608 -0.5, false);
        draw_set_color(c_white);
        
        var _camPosRelative = -(cameraPos mod 64)
        for(var j=96;j&lt;512;j+=64){
            for(var i=0;i&lt;=832;i+=64){
                draw_sprite(sprMakerTitleSharkSquare, 0, _camPosRelative + i, j);
                draw_sprite(sprMakerTitleSharkSquare, 0, _camPosRelative + (i+32), (j+32));
            }
        }
        break;
    case 9: //Erik
        draw_background_tiled(bkMakerMega, -(cameraPos mod 32), 0);
        break;
    case 10: //Klamy Spiky Situation
        draw_background_tiled(bkS2Klamy, -(cameraPos mod 64), 0);
        break;
    case 11: //Abstr4kt 2
        if (global.hueshiftEnabled){
            shader_set(shdHueShift);
            _resetShader = true;
            shader_set_uniform_f(global.hueshiftHandle, 2*pi * titleBackCount/400);
            draw_background_tiled(bkS2Abstr4ktNew, -((cameraPos + 0.425*titleBackCount) mod 256), 0);
        }else{
            _abstr4kt2FailsafeCol = make_color_hsv(255 * (1 - (titleBackCount mod 400)/400), 225, 225);
            draw_set_color(c_white);
            draw_rectangle(0 -0.5, 0 -0.5, 800 -0.5, 608 -0.5, false);
            draw_background_tiled_ext(bkS2Abstr4ktShaderFailsafe, -((cameraPos + 0.425*titleBackCount) mod 256), 0, 1, 1, _abstr4kt2FailsafeCol, 1);
        }
        break;
    case 12: //Vovka
        draw_background_tiled(bkS2Vovka, -((cameraPos) mod 256), 0);
        break;
    case 13: //Telejump
    case 14: //Geezer
        draw_set_color(c_black);
        draw_rectangle(0, 0, 800, 608, false);
        draw_set_color(c_white);
        break;
    case 15: //Hitchcock
        draw_set_color(hitchcockCol);
        draw_rectangle(0, 0, 800, 608, false);
        draw_set_color(c_white);
        break;
    case 16: //UNUSED - Stage Rush
        draw_background_tiled(bkS3Hub, 0, 0);
        break;
}

//Top and Bottom 2 rows of tiles
if (tilesetDrawing == 13){
    draw_rectangle(0, 0, 799, 63, false);
    draw_rectangle(0, 544, 799, 607, false);
}else if (tilesetDrawing == 11 &amp;&amp; !global.hueshiftEnabled){ //Abstr4kt 2 hueshift shader failsafe
    for(i=0;i&lt;=25;i++){
        scrTitleDrawTiles(8.1, 4, 32*i - (cameraPos mod 32), 0);
        scrTitleDrawTiles(8.1, 4, 32*i - (cameraPos mod 32), 32);
        scrTitleDrawTiles(8.1, 4, 32*i - (cameraPos mod 32), 544);
        scrTitleDrawTiles(8.1, 4, 32*i - (cameraPos mod 32), 576);
    }
    draw_set_colour_write_enable(1, 1, 1, 0);
    image_blend = make_color_hsv(255 * (1 - (titleBackCount mod 400)/400), 225, 225);
    for(i=0;i&lt;26;i++){
        scrTitleDrawTiles(11.1, 4, 32*i - (cameraPos mod 32), 0);
        scrTitleDrawTiles(11.1, 4, 32*i - (cameraPos mod 32), 32);
        scrTitleDrawTiles(11.1, 4, 32*i - (cameraPos mod 32), 544);
        scrTitleDrawTiles(11.1, 4, 32*i - (cameraPos mod 32), 576);
    }
    draw_set_colour_write_enable(1, 1, 1, 1);
    image_blend = c_white;
}else if (tilesetDrawing != 8){
    for(i=0;i&lt;=25;i++){
        scrTitleDrawTiles(tilesetDrawing, 4, 32*i - (cameraPos mod 32), 0);
        scrTitleDrawTiles(tilesetDrawing, 4, 32*i - (cameraPos mod 32), 32);
        scrTitleDrawTiles(tilesetDrawing, 4, 32*i - (cameraPos mod 32), 544);
        scrTitleDrawTiles(tilesetDrawing, 4, 32*i - (cameraPos mod 32), 576);
    }
}

//Other Tiles
if (tilesetDrawing == 13){
    for(i=0;i&lt;=25;i++){
        for(j=4;j&gt;=0;j--){
            if (tileArray[i, j] != -1){
                t_lowestCeil = j;
                break;
            }
        }
        for(j=5;j&lt;=9;j++){
            if (tileArray[i, j] != -1){
                t_highestFloor = j;
                break;
            }
        }
        draw_rectangle(32*i - cameraPos mod 32, 0, 32*(i+1)- cameraPos mod 32 - 1, 95 + t_lowestCeil*32, false);
        draw_rectangle(32*i - cameraPos mod 32, t_highestFloor*32 + 223, 32*(i+1) - cameraPos mod 32 - 1, 607, false);
    }
}else if (tilesetDrawing == 11 &amp;&amp; !global.hueshiftEnabled){
    for(var i=0; i&lt;=25; i++){
        for(var j=0; j&lt;=4; j++)
            if (tileArray[i, j] != -1)
                scrTitleDrawTiles(8.1, tileArray[i, j], 32*i - cameraPos mod 32, 32*j + 64);
        for(var j=5; j&lt;=9; j++)
            if (tileArray[i, j] != -1)
                scrTitleDrawTiles(8.1, tileArray[i, j], 32*i - cameraPos mod 32, 32*j + 224);
    }
    draw_set_colour_write_enable(1, 1, 1, 0);
    image_blend = make_color_hsv(255 * (1 - (titleBackCount mod 400)/400), 225, 225);
    for(var i=0; i&lt;=25; i++){
        for(var j=0; j&lt;=4; j++)
            if (tileArray[i, j] != -1)
                scrTitleDrawTiles(11.1, tileArray[i, j], 32*i - cameraPos mod 32, 32*j + 64);
        for(var j=5; j&lt;=9; j++)
            if (tileArray[i, j] != -1)
                scrTitleDrawTiles(11.1, tileArray[i, j], 32*i - cameraPos mod 32, 32*j + 224);
    }
    draw_set_colour_write_enable(1, 1, 1, 1);
    image_blend = c_white;
}else{
    if (tilesetDrawing == 8){
        draw_set_color(sharkGray);
    }
    
    for(var i=0; i&lt;=25; i++){
        for(var j=0; j&lt;=4; j++)
            if (tileArray[i, j] != -1)
                scrTitleDrawTiles(tilesetDrawing, tileArray[i, j], 32*i - cameraPos mod 32, 32*j + 64);
        for(var j=5; j&lt;=9; j++)
            if (tileArray[i, j] != -1)
                scrTitleDrawTiles(tilesetDrawing, tileArray[i, j], 32*i - cameraPos mod 32, 32*j + 224);
    }
    if (tilesetDrawing == 8){
        draw_set_color(c_white);
    }
}

//Spikes
var _spikeIndex = 0;
switch(tilesetDrawing){
    case 0:
    case 2:
    case 6:
    case 14:
    case 15:
        _spikeIndex = 0;
        break;
    case 1:
    case 3:
    case 7:
        _spikeIndex = 2;
        break;
    case 4:
        _spikeIndex = 9;
        break;
    case 5:
        _spikeIndex = 7;
        break;
    case 8:
        _spikeIndex = 4;
        break;
    case 9:
    case 12:
        _spikeIndex = 11;
        break;
    case 10:
        _spikeIndex = 3;
        break;
    case 11:
        _spikeIndex = 12;
        break;
    case 13:
        _spikeIndex = 5;
        break;
    case 16: //UNUSED
        _spikeIndex = 6;
        break;
    case 17:
        _spikeIndex = 13;
        break;
}
if (tilesetDrawing == 11 &amp;&amp; !global.hueshiftEnabled){
    with (objTitleSpike){
        draw_sprite_ext(sprite_index, 0, x, y, 1, image_yscale, 0, c_white, 1);
        draw_sprite_ext(sprite_index, 0, x, y, 1, image_yscale, 0, _abstr4kt2FailsafeCol, 0.3);
    }
}else{
    with (objTitleSpike){
        draw_sprite_ext(sprite_index, _spikeIndex, x, y, 1, image_yscale, 0, c_white, 1);
    }
}

if (_resetShader){
    shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate a new column at the end
var i, j, t_top, t_left, t_right, t_bottom, t_tl, t_tr, t_bl, t_br;

if (spikesToGenTop &lt;= 0){
    blocksUntilSpikeTop --;
    if (blocksUntilSpikeTop &lt;= 0){
        blocksUntilSpikeTop = floor(spikesGeneratedTop/3) + irandom_range(1, 9);
        spikesToGenTop = floor(power(irandom_range(1, 68), 1/4));
        spikesGeneratedTop = spikesToGenTop;
    }
}
if (spikesToGenBottom &lt;= 0){
    blocksUntilSpikeBottom --;
    if (blocksUntilSpikeBottom &lt;= 0){
        blocksUntilSpikeBottom = floor(spikesGeneratedBottom/3) + irandom_range(1, 9);
        spikesToGenBottom = floor(power(irandom_range(1, 68), 1/4));
        spikesGeneratedBottom = spikesToGenBottom;
    }
}

//Change height if necessary
if (ceilBlocks &lt;= 0){
    ceilH = (ceilH + irandom_range(1, 4)) mod 5;
    ceilBlocks = irandom_range(5, 10);
    spikesToGenTop = 0;
}
if (floorBlocks &lt;= 0){
    floorH = (floorH + irandom_range(1, 4)) mod 5 + 5;
    floorBlocks = irandom_range(5, 10);
    spikesToGenBottom = 0;
}

//Shift array 1 column to the left &amp; fill the rightmost column (26)
for(j=9;j&gt;=0;j--){
    for(i=0; i&lt;=25;i++){
        tileArray[i, j] = tileArray[i+1, j];
    }
    if ((j &lt;= 4 &amp;&amp; (j == 0 || j &lt;= ceilH)) || (j &gt;= 5 &amp;&amp; (j == 9 || j &gt;= floorH)))
        tileArray[26, j] = 0;
    else
        tileArray[26, j] = -1;
}
ceilBlocks --;
floorBlocks --;

//Set the sprites for the 2nd to last column
for(j=9;j&gt;=0;j--){
    if (tileArray[25, j] != -1){
        t_top = (j != 5 &amp;&amp; (j == 0 || tileArray[25, j-1] != -1));
        t_bottom = (j != 4 &amp;&amp; (j == 9 || tileArray[25, j+1] != -1));
        t_left = (tileArray[24, j] != -1);
        t_right = (tileArray[26, j] != -1);
        
        if (t_top &amp;&amp; t_bottom){ //4, 5, 6, 10, 11, 12, 13
            if (t_left &amp;&amp; t_right){
                t_tl = (j != 5 &amp;&amp; (j == 0 || tileArray[24, j-1] != -1));
                t_tr = (j != 5 &amp;&amp; (j == 0 || tileArray[26, j-1] != -1));
                t_bl = (j != 4 &amp;&amp; (j == 9 || tileArray[24, j+1] != -1));
                t_br = (j != 4 &amp;&amp; (j == 9 || tileArray[26, j+1] != -1));
                
                //We can assume there are no 1-block thick lines
                if (t_tl &amp;&amp; t_tr &amp;&amp; t_bl &amp;&amp; t_br)
                    tileArray[25, j] = 4;
                else if (!t_tl)
                    tileArray[25, j] = 13;
                else if (!t_tr)
                    tileArray[25, j] = 12;
                else if (!t_bl)
                    tileArray[25, j] = 11;
                else if (!t_br)
                    tileArray[25, j] = 10;
            }else if (t_left)
                tileArray[25, j] = 5;
            else
                tileArray[25, j] = 3;
        }else if (t_top){ //7, 8, 9
            if (t_left &amp;&amp; t_right)
                tileArray[25, j] = 7;
            else if (t_left)
                tileArray[25, j] = 8;
            else
                tileArray[25, j] = 6;
            
        }else if (t_bottom){ //1, 2, 3
            if (t_left &amp;&amp; t_right)
                tileArray[25, j] = 1;
            else if (t_left)
                tileArray[25, j] = 2;
            else
                tileArray[25, j] = 0;
        }
    }
}

var t_lowestCeil, t_highestFloor;
t_lowestCeil = 0;
t_highestFloor = 9;
for(j=4;j&gt;=0;j--){
    if (tileArray[25, j] != -1){
        t_lowestCeil = j;
        break;
    }
}
for(j=5;j&lt;=9;j++){
    if (tileArray[25, j] != -1){
        t_highestFloor = j;
        break;
    }
}

if (spikesToGenTop &gt; 0){
    spikesToGenTop --;
    instance_create(800 - cameraPos mod 32 + 16, 80 + 32*(t_lowestCeil+1), objTitleSpike);
}
if (spikesToGenBottom &gt; 0){
    spikesToGenBottom --;
    instance_create(800 - cameraPos mod 32 + 16, 80 + 32*(t_highestFloor+4), objTitleSpike);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free the surface
if (surface_exists(surf2))
    surface_free(surf2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != rTitle &amp;&amp; room != rMenu &amp;&amp; room != rPracticeMenu)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Call User Event 1
tilesetDrawing = tileset;
event_user(1);

if (fadeTimer &gt; fadeFrames){
    tilesetDrawing = tilesetPrev;
    if (!surface_exists(global.sharedSurf)){
        global.sharedSurf = surface_create(800, 608);
    }
    if (surface_exists(global.sharedSurf)){
        surface_set_target(global.sharedSurf);
        draw_clear_alpha(c_black, 0);
        
        event_user(1);
        surface_reset_target();
        
        draw_set_alpha((fadeTimer-fadeDelay)/fadeFrames);
        draw_surface(global.sharedSurf, 0, 0);
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
