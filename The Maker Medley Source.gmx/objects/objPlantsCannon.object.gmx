<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerCannon</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objPlantsPlant</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Peashooter
event_inherited();
growingTimer = 32;
growingTimerHighest = growingTimer;  // death animation decrements `growingTimer`
convertToSpike = false;
idleAnimSine = 0;
kickbackSine = 0;
kickbackAmt = 0;
shootDelay = 5;
moundAlpha = 1;
tex = sprite_get_texture(sprPlantsCannonStand, 0);

scrPlantsGoreInit(2);

snd = audio_play_sound(sndPlantsGrow, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrPlantsPlantStepEnd(false);

if (!frozen &amp;&amp; dead &amp;&amp; !crushed){ //see if we can destroy the plant (we can if there is no gore to draw, unless it was crushed)
    var _die;
    _die = true;
    for(var i=0;i&lt;goreAmt;i++){
        if (instance_exists(gore[i])){
            _die = false;
        }
    }
    if (_die){
        moundAlpha -= 0.08;
        if (moundAlpha &lt;= 0){
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    if (!dead){
        scrPlantsPlantStep();
        if (!growing &amp;&amp; !convertToSpike){
            if (scrPlantsPlantShouldShoot()){
                shootDelay --;
                if (shootDelay &lt;= 0){
                    kickbackSine = pi;
                    shootDelay = 70;
                    with (instance_create(x-8*sin(kickbackSine), y - 3*sin(animTime*pi/60), objPlantsProjectile)){
                        projType = 1;
                        row = other.row;
                        xstart = other.x;
                        yBase = other.y + 28;
                        event_perform(ev_alarm, 0);
                    }
                    scrPlantsLimitedSFX(sndMakerCannon);
                }
            }else{  //no reason to shoot
                if (shootDelay &gt; 5){
                    shootDelay --;
                }
            }
            
            if (kickbackSine &gt; 0){
                if (kickbackSine &gt; pi/2){
                    kickbackSine -= pi/10;
                }else{
                    kickbackSine = max(kickbackSine - pi/30, 0);
                }
                kickbackAmt = -14*sin(kickbackSine);
            }else{
                kickbackAmt = 0;
            }
        }else{
            if (convertToSpike){
                growingTimer -= 2;
                if (growingTimer &lt;= 32){
                    dead = true;
                }
            }else{
                growingTimer ++;
                if (growingTimer &gt;= 68){
                    growing = false;
                }
            }
            if (growingTimer &lt; 51){
                dirtDelay --;
                if (dirtDelay &lt;= 0){
                    dirtDelay = irandom_range(2, 4);
                    (instance_create(x + irandom_range(-8, 8), y+26, objPlantsDirt)).row = row;
                }
            }
            moundAlpha += 0.05;
        }
    }else if (!crushed &amp;&amp; (((growing || convertToSpike) &amp;&amp; growingTimer &gt; 32) || instance_exists(gore[1]))){ //retreat into ground
        dirtDelay --;
        if (dirtDelay &lt;= 0){
            dirtDelay = irandom_range(2, 4);
            (instance_create(x + irandom_range(-8, 8), y+26, objPlantsDirt)).row = row;
        }
        moundAlpha -= 0.1;
        if (growingTimer &gt; 32){
            growingTimer -= 2;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadow
var _baseY = (y + 22);
var _growMult = clamp((growingTimer-38.5)/20, 0, 1);
if (deathShadowMult &gt; 0){
    var _mult = deathShadowMult;
    var _cannonSprWidth = sprite_get_width(sprMakerCannon);
    var _cannonSprHeight = sprite_get_height(sprMakerCannon);
    //cannon starts rotated 90 degrees CC
    var _cannonWidth = _cannonSprHeight;
    var _cannonHeight = _cannonWidth;
    if (growing &amp;&amp; growingTimer &lt;= 55){
        _mult *= (1 + 0.4*clamp((growingTimer-32)/(55-32), 0, 1));
    }else{
        _mult *= 1.4;
        if (growing &amp;&amp; growingTimer &lt; 67){
            var _amt = (growingTimer-55)/12;
            _cannonWidth = lerp(_cannonSprHeight, _cannonSprWidth, _amt);  // rough approximate
            _cannonHeight = lerp(_cannonSprWidth, _cannonSprHeight, _amt);  // rough approximate
        }else{
            _cannonWidth = _cannonSprWidth;
            _cannonHeight = _cannonSprHeight;
        }
    }
    
    var _shadowDim = scrPlantsShadow(_cannonWidth, _cannonHeight, _mult);
    draw_sprite_ext(sprPlantsShadow, 0, x-view_xview + (_cannonWidth-32)/2, _baseY, _shadowDim[0], _shadowDim[1], 0, c_white, image_alpha * (1 - _growMult*0.2));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gore

// Calculate Stuff
var _baseY = (y + 22);
var _moundMult = clamp((growingTimer-31)/20, 0, 1);
var _growMult = clamp((growingTimer-38.5)/20, 0, 1);
var _height = 50;
var _riseHeight = ceil((_height + idleAnimSine) * _growMult);
var _pillarHeight = _riseHeight-12;
var _y = (_baseY - _pillarHeight);

// Create Gore
if (!growing || growingTimer &gt;= 39){
    gore[1] = instance_create(x, y, objPlantsParts);
    gore[1].sprite_index = sprPlantsCannonStand;
    gore[1].speed = 0;
    gore[1].gravity = 0;
    gore[1].y = _baseY;
    gore[1].ystart = gore[1].y;
    gore[1].tex = tex;
    gore[1].val1 = _pillarHeight;
    gore[1].val2 = kickbackAmt;
}
gore[0] = instance_create(x, y, objPlantsParts);
gore[0].sprite_index = sprMakerCannon;
gore[0].y = _y + 16;

if (growing){
    if (growingTimer &lt;= 55){
        gore[0].image_angle = 90;
        if (_riseHeight &lt; 42){
            gore[0].val1 = _riseHeight;  // min(_riseHeight-42, 0)
            gore[0].growing = true;  // don't set it true if the cannon is in the orienting stage
            gore[0].y = _baseY - round(gore[0].val1/2) - max(_riseHeight-42, 0);
            gore[0].ystart = gore[0].y;
        }
        //var _rotCoords = scrChangeOrigin(0, 0, 8, -gore[0].val1/2, gore[0].image_angle); //90 cc rotation (x, y) -&gt; (-y, x)
        //gore[0].x -= _rotCoords[0];
        //gore[0].y -= _rotCoords[1];
    }else{
        gore[0].y = _y+16;
        gore[0].image_angle = 90*(1-min((growingTimer-55)/12, 1));
    }
}else{
    gore[0].x += lerp(0, ceil(kickbackAmt), (_pillarHeight-16)/max(_pillarHeight, 1));  // the origin of the cannon sprite is not at the stand's top left
}

with (gore[0]){
    if (!growing){  // origin change for rotation
        scrAdjustForOrigin(13, 15, 20, 15, image_angle);
    }
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw plant

// Calculate Stuff
var _baseY = (y + 22);
var _moundMult = clamp((growingTimer-31)/20, 0, 1);
var _growMult = clamp((growingTimer-38.5)/20, 0, 1);
var _height = 50;
var _riseHeight = ceil((_height + idleAnimSine) * _growMult);
var _pillarHeight = _riseHeight-12;
var _y = (_baseY - _pillarHeight);

// Drawing
if (!dead || crushed){
    scrPlantsCrushStart(64, 96);
    if (growing){
        if ((_pillarHeight) &gt; 0){
            draw_sprite_part(sprPlantsCannonStand, 0, 0, 0, 32, _pillarHeight, x-16, _y);
        }
        
        if (growingTimer &lt;= 55){
            draw_sprite_general(sprMakerCannon, 0, 42 - min(_riseHeight, 42), 0, min(_riseHeight, 42), 30, x-15, _baseY - max(_riseHeight-42, 0), 1, 1, 90, c_white, c_white, c_white, c_white, 1);
        }else{
            draw_sprite_ext(sprMakerCannon, 0, x, _y+16, 1, 1, 90*(1-min((growingTimer-55)/12, 1)), c_white, 1);
        }
    }else{
        if (kickbackAmt == 0){
            draw_sprite_part(sprPlantsCannonStand, 0, 0, 0, 32, _pillarHeight, x-16, _y);
        }else{
            if (tex &gt;= 0){
                var _left = (x-16);
                var _right = _left + 32;
                var _bot = _baseY;
                var _top = _y;
                
                draw_primitive_begin_texture(pr_trianglestrip, tex);
                draw_vertex_texture(_left + ceil(kickbackAmt), _top, 0, 0);
                draw_vertex_texture(_right + ceil(kickbackAmt), _top, 1, 0);
                draw_vertex_texture(_right, _bot, 1, _pillarHeight/64);
                draw_vertex_texture(_left, _bot, 0, _pillarHeight/64);
                draw_vertex_texture(_left + ceil(kickbackAmt), _top, 0, 0);
                draw_primitive_end();
                //draw_sprite_pos(sprPlantsCannonStand, 0, (x-16) + ceil(kickbackAmt), _baseY-_pillarHeight, ((x-16) + ceil(kickbackAmt)) + 32, _baseY-_pillarHeight, (x-16) + 32, _baseY, (x-16), _baseY, 1);
            }
        }
        draw_sprite_ext(sprMakerCannon, 0, x+lerp(0, ceil(kickbackAmt), (_pillarHeight-16)/max(_pillarHeight, 1)), _y + 16, 1, 1, 0, c_white, 1); // the origin of the cannon sprite is not at the stand's top left
    }
    
    if (_moundMult &lt; 1){
        draw_sprite_ext(sprPlantsMound, 0, x, _baseY, 0.8 + 0.2*_moundMult, _moundMult, 0, c_white, moundAlpha);
    }else{
        draw_sprite_ext(sprPlantsMound, 0, x, _baseY, 1, 1, 0, c_white, moundAlpha);
    }
    
    scrPlantsCrushEnd(crushTimer);
}else{
    with (gore[1]){
        event_user(0);
    }
    
    var _cannonBehindMound = (growing &amp;&amp; growingTimer &lt; 48);
    if (_cannonBehindMound){
        with (gore[0]){event_user(0);}
    }
    
    draw_sprite_ext(sprPlantsMound, 0, x, _baseY, 0.8 + 0.2*_moundMult, _moundMult, 0, c_white, moundAlpha);
    
    if (!_cannonBehindMound){
        with(gore[0]){event_user(0);}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
