<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerFruit</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>objS1CherrySine</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

boundLeft = 0;
boundRight = room_width;
boundTop = 0;
boundBottom = room_height;

xoff = sprite_get_xoffset(sprite_index);
yoff = sprite_get_yoffset(sprite_index);

drawXOff = 0;
drawYOff = 0;

abstr4ktSpeedMult = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (rad != 0){
    if (horizontal != 0){
        x = xstart + horizontal*rad*sin(global.count*xInc + xSine);
    }
    if (vertical != 0){
        y = ystart + vertical*rad*sin(global.count*yInc + ySine);
    }
}

if (speed &gt; 0 &amp;&amp; abstr4ktSpeedMult &gt; 1){
    speed *= abstr4ktSpeedMult;
    if (bbox_left &gt;= boundRight || bbox_right &lt; boundLeft){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (collision_rectangle(boundLeft, boundTop, boundRight, boundBottom, other, false, true) != noone){
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_xscale != 0 &amp;&amp; image_yscale != 0){
    var _left = 0, _width = sprite_width, _top = 0, _height = sprite_height;
    
    // get instance values
    _left = max(boundLeft - ((x+drawXOff) - (xoff*image_xscale)), 0);
    _top = max(boundTop - ((y+drawYOff) - (yoff*image_yscale)), 0);
    _width  = min((boundRight - ((x+drawXOff) - (xoff - _left))), sprite_width);
    _height = min((boundBottom - ((y+drawYOff) - (yoff - _top))), sprite_height);
    
    // convert to sprite values
    _left /= image_xscale;
    _top /= image_yscale;
    _width /= image_xscale;
    _height /= image_yscale;
    
    _width -= _left;
    _height -= _top;
    //show_debug_message("Left : " + string(_left) + ";  Top : " + string(_top) + ";  Width : " + string(_width) + ";  Height : " + string(_height) );
    
    draw_sprite_part_ext(sprite_index, image_index, _left, _top, _width, _height, bbox_left + _left*image_xscale  +drawXOff, bbox_top + _top*image_yscale  +drawYOff, image_xscale, image_yscale, image_blend, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
