<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlantsEnemyBullet</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 14/50;
row = -1;
yBase = y;
collided = false;
dmg = 1;
frozen = false;
shadowType = 0;
scale = false;
scaleTo = 1;
scaleInc = 0.125;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen){
    if (!collided){
        var _colliding;
        _colliding = collision_line(bbox_left + min(hspeed, 0), bbox_top + min(vspeed, 0), (bbox_right+1) + max(hspeed, 0), (bbox_bottom+1) + max(vspeed, 0), objPlantsPlant, false, false);
        if (_colliding != noone){
            with (objPlantsPlant){
                if (row == other.row &amp;&amp; x &gt; other.bbox_left &amp;&amp; !other.collided &amp;&amp; (!scrPlantsInvincible() &amp;&amp; scrPlantsDetectable() &amp;&amp; !scrPlantsPlantTooLow()) &amp;&amp; !dead){
                    if (collision_line(other.bbox_left + min(other.hspeed, 0), other.bbox_top + min(other.vspeed, 0), (other.bbox_right+1) + max(other.hspeed, 0), (other.bbox_bottom+1) + max(other.vspeed, 0), id, false, false) == id){
                        if (object_index == objPlantsSpringtrap){
                            if (!springAnim &amp;&amp; image_index != 0){
                                with (other){
                                    hspeed = 20 - min(abs(hspeed), 10);
                                    vspeed = -hspeed/5;
                                    gravity = 0.125;
                                    collided = true;
                                }
                            }
                        }else{
                            with (other){
                                hspeed = abs(hspeed)/3;
                                vspeed = -2;
                                gravity = 0.125;
                                collided = true;
                            }
                            
                            hp -= other.dmg;
                            if (hp &lt;= 0){
                                event_user(2);
                            }else{
                                var _inst = instance_create(x, y, objMakerDeathEffect);
                                _inst.image_xscale = 0.667*other.dmg;
                                _inst.image_yscale = _inst.image_xscale;
                                _inst.visible = false;
                                audio_sound_gain(audio_play_sound(sndMakerDeath, 0, 0), 0.4, 0);
                            }
                        }
                        break;
                    }
                }
            }
        }
    }else{
        image_alpha -= 0.03;
        if (image_alpha &lt;= 0){
            instance_destroy();
        }
    }
    
    if (vspeed &gt; 0 &amp;&amp; bbox_bottom &gt;= yBase){
        if (!collided){
            collided = true;
            hspeed *= 1/6;
            vspeed = -min(vspeed, 4);
            gravity = 0.125;
        }else{
            vspeed = -min(vspeed, 2.8);
            gravity = 0.125;
        }
    }
}

//Miku killing animation
if (scale &amp;&amp; image_xscale &lt; scaleTo){
    image_xscale = min(image_xscale + scaleInc, 1);
    image_yscale = image_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadow
if (shadowType == 0){
    draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, max(160 + row*64 + 52, bbox_bottom-2), ((yBase-y)/max(1, yBase-ystart))*sprite_width/66, ((yBase-y)/max(1, yBase-ystart))*sprite_height/66, 0, c_white, 1);
}else{  // game over anim
    draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, y + 52, 0.4, 0.4, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
