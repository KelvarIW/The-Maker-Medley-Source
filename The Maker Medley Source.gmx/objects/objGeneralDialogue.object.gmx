<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerDialogueL</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-275</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text = "";
textDelay = 0;
textLength = 0;
soundDelay = 2;
textTimer = 0; //affects sound as well
textPosition = 0;
disclaimer = false;
subMessage = 0;

speakerSprite = sprPlayerHead;
speakerIndex = 0;
control = noone;

x = 75;
y = -115; 
yTo = 72;
movingDown = true;
movingUp = false;
lerpVal = 0;
speakerIndex = 0;
surf = -4;

if (!instance_exists(objCutsceneCamera)){
    instance_create(0, 0, objCutsceneCamera);
}

event_perform(ev_alarm, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move upward
movingUp = true;
with (objCutsceneCamera){
    targetObject = noone;
    destroyWhenLerped = true;
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change text
//Period/Exclamation = 32 frames
//Question mark = 48 frames
//Comma = 20 frames
if (textDelay == 0 &amp;&amp; subMessage != floor(subMessage)){ //skip over the space which follows the punctuation mark
    textPosition ++;
}
switch(room){
    case rGeezer01:
        if (textDelay == 0){
            textDelay = 2;
            soundDelay = 2;
            switch(subMessage){
                case 0:
                    text = "What?!";
                    speakerSprite = sprPlayerHead;
                    with (objCutsceneCamera){
                        targetObject = objGeezerCutscene;
                        event_user(0);
                    }
                    textPosition = 0;
                    break;
                case 0.3:
                    text += " Why is Geezer here?";
                    textPosition ++;
                    break;
                case 0.6:
                    text += "#We can't have this fight in a Steam game!";
                    textPosition ++;
                    break;
                case 1:
                    text = "Why not?";
                    textPosition = 0;
                    speakerSprite = sprGeezerFace;
                    with (objCutsceneCamera){
                        targetObject = objGeezerBoss;
                        event_user(0);
                    }
                    break;
                case 1.5:
                    text += "#What if TheNewGeezer says he is okay with it?";
                    textPosition ++;
                    break;
                case 2:
                    text = "But what about the assets from Super Mario#Bros.™, The Legend of Zelda™, and Metroid™?*";
                    textPosition = 0;
                    speakerSprite = sprPlayerHead;
                    with (objCutsceneCamera){
                        targetObject = objGeezerCutscene;
                        event_user(0);
                    }
                    break;
                case 2.5:
                    text += "*All product names, trademarks and registered trademarks#are property of their respective owners. All company, product#and service names used in this game are for identification#purposes only. Use of these names, trademarks and brands#does not imply endorsement.";
                    textDelay = 0.25;
                    soundDelay = 0.25;
                    textPosition += 2;
                    disclaimer = true;
                    instance_create(800, 238, objGeezerVirus);
                    break;
                case 3:
                    text = "Oh";
                    speakerSprite = sprGeezerFace;
                    with (objCutsceneCamera){
                        targetObject = objGeezerBoss;
                        event_user(0);
                    }
                    disclaimer = false;
                    textPosition = 0;
                    break;
                case 3.25:
                case 3.75:
                    text += "...";
                    textDelay = 20;
                    soundDelay = 20;
                    break;
                case 3.5:
                    text += " Umm";
                    textPosition ++;
                    break;
                case 3.8:
                    text += "#Well,";
                case 4.0:
                    text += " I guess we'll have to replace this stage.#If we can't even have blue thwomps, making Nintendo™*#references would be out of th-";
                    textPosition ++;
                    break;
                case 5.0:
                    text = "DIE DIE DIE";
                    textPosition = 0;
                    textDelay = 8;
                    soundDelay = 8;
                    break;
            }
            textLength = string_length(text);
        }else{
            textDelay = 0;
            switch(subMessage){
                case 0:
                    alarm[1] = 50;
                    subMessage = 0.3;
                    break;
                case 0.3:
                    alarm[1] = 40;
                    subMessage = 0.6;
                    break;
                case 0.6:
                    alarm[1] = 40;
                    subMessage = 1;
                    break;
                case 1:
                    alarm[1] = 40;
                    subMessage = 1.5;
                    break;
                case 1.5:
                    alarm[1] = 40;
                    subMessage = 2;
                    break;
                case 2:
                    alarm[1] = 65;
                    subMessage = 2.5;
                    break;
                case 2.5:
                    alarm[1] = 50;
                    subMessage = 3;
                    break;
                case 3:
                case 3.5:
                    alarm[1] = 1;
                    subMessage += 0.25;
                    break;
                case 3.25:
                    alarm[1] = 35;
                    subMessage += 0.25;
                    break;
                case 3.75:
                    alarm[1] = 20;
                    subMessage = 3.8;
                    break;
                case 3.8:
                    subMessage = 4;
                    alarm[1] = 30;
                    break;
                case 5:
                    movingUp = true;
                    break;
            }
        }
        break;
    case rStage03Hub:
        if (textDelay == 0){
            textDelay = 3;
            soundDelay = 3;
            switch(subMessage){
                case 0:
                    text = "You have finally arrived.";
                    speakerSprite = sprScribbleDialogue;
                    textDelay = 3;
                    soundDelay = 3;
                    with (objCutsceneCamera){
                        targetObject = objS3EndCutscene;
                        event_user(0);
                    }
                    break;
                case 1:
                    text = "Welcome to my dimension.";
                    textPosition = 0;
                    break;
                case 2:
                    text = "I know you're close to the end,";
                    textPosition = 0;
                    break;
                case 2.25:
                    text += " but before this is over,";
                    textPosition += 1;
                    break;
                case 2.5:
                    text += "#you will witness the power...";
                    textPosition += 1;
                    break;
                case 2.75:
                    text += "#of medleys!";
                    textPosition += 1;
                    textDelay = 6;
                    soundDelay = 6;
                    break;
                case 3:
                    var t_fade;
                    t_fade = instance_create(0, 0, objScreenFade);
                    t_fade.fadeIn = 0.005;
                    t_fade.alarm[0] = 201;
                    t_fade.fadeOut = 0.2;
                    t_fade.color = c_white;
                    t_fade.persistent = true;
                    t_fade.roomTo = rStage04New_1;
                    with (objS3EndCutscene){
                        transition = true;
                        with (objMakerCutsceneSkip){disappear = true;}
                        alarm[1] = 201;
                        depth = -20;
                        y = destY;
                    }
                    alarm[2] = 20;
                    audio_play_sound(sndS3to4Warp, 0, 0);
                    break;
            }
            textLength = string_length(text);        
        }else{
            textDelay = 0;
            switch(subMessage){
                case 0:
                    alarm[1] = 90;
                    subMessage = 1;
                    break;
                case 1:
                    subMessage = 2;
                    alarm[1] = 90;
                    break;
                case 2:
                case 2.25:
                    subMessage += 0.25;
                    alarm[1] = 60;
                    break;
                case 2.5:
                    subMessage = 2.75;
                    alarm[1] = 120;
                    break;
                case 2.75:
                    subMessage = 3;
                    alarm[1] = 20;
                    break;
            }
        }
        break;
    case rFinalBoss_1:
        if (textDelay == 0){
            textDelay = 3;
            soundDelay = 3;
            switch(subMessage){
                case 0:
                    speakerSprite = sprScribbleDialogue;
                    with (objCutsceneCamera){
                        targetObject = objFinalBossCutscene;
                        event_user(0);
                    }
                    
                    text = "We meet again,";
                    break;
                case 0.1:
                    text += " Kid."
                    textPosition ++;
                    break;
                case 1:
                    text += "#Props to you for getting this far."
                    textPosition ++;
                    break;
                case 2:
                    speakerSprite = sprPlayerHead;
                    with (objCutsceneCamera){
                        targetObject = objPlayer;
                        event_user(0);
                    }
                    
                    text = "Those words mean nothing to me!";
                    textPosition = 0;
                    break;
                case 2.1:
                    text += "#Your days of copyright infringement end now,";
                    textPosition ++;
                    break;
                case 2.2:
                    text += "#Mr. Scribble!";
                    textPosition ++;
                    break;
                case 3:
                    speakerSprite = sprScribbleDialogue;
                    with (objCutsceneCamera){
                        targetObject = objFinalBossCutscene;
                        event_user(0);
                    }
                    
                    var _time, _timeStr;
                    _time = (global.time) div 60; // minutes
                    if (_time &gt;= 100){  // present time in hours, rounded
                        _timeStr = string(roundSane(_time/60)) + " hours";
                    }else{
                        if (_time &lt; 2){
                            _time = 2;  // I mean clearly you cheated to get here. Most bosses are longer than 2 minutes.
                        }
                        _timeStr = string(roundSane(_time)) + " minutes";
                    }
                    text = "You've spent " + _timeStr + " to chase me down#and kill me,";
                    textPosition = 0;
                    break;
                 case 3.1:
                    text += " just because I create art that#references other";
                    textPosition ++;
                    break;
                 case 3.2:
                    text += ' "intellectual properties';
                    textPosition += 2;
                    break;
                 case 3.3:
                    text += "#Does my mere existence upset you that much?";
                    textPosition ++;
                    break;
                 case 4:
                    speakerSprite = sprPlayerHead;
                    with (objCutsceneCamera){
                        targetObject = objPlayer;
                        event_user(0);
                    }
                    
                    text = "References!?";
                    textPosition = 0;
                    textDelay = 1;
                    soundDelay = 1;
                    break;
                 case 4.1:
                    text += "#You steal people's assets and use them as your own!";
                    textPosition ++;
                    break;
                 case 5:
                    speakerSprite = sprScribbleDialogue;
                    with (objCutsceneCamera){
                        targetObject = objFinalBossCutscene;
                        event_user(0);
                    }
                    
                    text = "Steal?";
                    textPosition = 0;
                    break;
                 case 5.1:
                    text += "##Why are you so determined to cast me as a villan?";
                    textPosition += 2;
                    break;
                 case 5.2:
                    text += "#My fanworks do not hurt the original creators in any way.";
                    textPosition ++;
                    break;
                 case 5.3:
                    text = "If anything, they should be delighted.";
                    textPosition = 0;
                    break;
                 case 5.4:
                    text += '##"Imitation is the sincerest form of flattery"';
                    textPosition += 3;
                    break;
                 case 6:
                    speakerSprite = sprPlayerHead;
                    with (objCutsceneCamera){
                        targetObject = objPlayer;
                        event_user(0);
                    }
                    
                    text = '"...that mediocrity can pay to greatness"';
                    textPosition = 0;
                    break;
                 case 6.1:
                    text += "##There's a second part to that quote.";
                    textPosition += 2;
                    break;
                 case 7:
                    speakerSprite = sprScribbleDialogue;
                    with (objCutsceneCamera){
                        targetObject = objFinalBossCutscene;
                        event_user(0);
                    }
                    
                    text = "So what?";
                    textPosition = 0;
                    break;
                 case 7.1:
                    text += "#When did I ever say I was anything more#than";
                    textPosition ++;
                    break;
                 case 7.2:
                    text += '"mediocrity';
                    textPosition ++;
                    break;
                 case 7.3:
                    text += "#You're making a much bigger deal out of this than anyone else";
                    textPosition ++;
                    break;
                 case 7.4:
                    text += "...";
                    textPosition ++;
                    
                    textDelay = 12;
                    soundDelay = 12;
                    break;
                 case 7.5:
                    text += "since you're trying to kill me.";
                    //textPosition ++;
                    break;
                 case 8:
                    speakerSprite = sprPlayerHead;
                    with (objCutsceneCamera){
                        targetObject = objPlayer;
                        event_user(0);
                    }
                    text = "Under current (as of February 2023) United States copyright law,";
                    textPosition = 0;
                    break;
                 case 8.1:
                    text += " you are a criminal!";
                    textPosition ++;
                    
                    textDelay = 2;
                    soundDelay = 2;
                    break;
                 case 8.2:
                    text = string_copy(text, 1, string_length(text)-1) + ",";  // replace the last exclamation point with a comma
                    text += " and a thief!";
                    textPosition ++;
                    
                    textDelay = 2;
                    soundDelay = 2;
                    break;
                 case 8.3:
                    text = string_copy(text, 1, string_length(text)-1) + ",";  // replace the last exclamation point with a comma
                    text += "#which is a type of criminal!";
                    textPosition ++;
                    
                    textDelay = 2;
                    soundDelay = 2;
                    break;
                 case 9:
                    speakerSprite = sprScribbleDialogue;
                    with (objCutsceneCamera){
                        targetObject = objFinalBossCutscene;
                        event_user(0);
                    }
                    
                    text = "Even so,";
                    textPosition = 0;
                    break;
                 case 9.1:
                    text += " in a world where piracy is openly#discussed,";
                    textPosition ++;
                    break;
                 case 9.2:
                    text += " and any work with even a moderate#following has unofficial products made of it,";
                    textPosition ++;
                    break;
                 case 9.3:
                    text += "#am I really your top priority?";
                    textPosition ++;
                    break;
                 case 9.4:
                    text = "There are far bigger fish to fry if you were really#interested in protecting creative works.";
                    textPosition = 0;
                    break;
                 case 10:
                    speakerSprite = sprPlayerHead;
                    with (objCutsceneCamera){
                        targetObject = objPlayer;
                        event_user(0);
                    }
                    text = "Why don't you just make something original!?";
                    textPosition = 0;
                    break;
                 case 10.1:
                    text += "#If you can make a fanga";
                    textPosition ++;
                    break;
                 case 11:
                    speakerSprite = sprScribbleDialogue;
                    with (objCutsceneCamera){
                        targetObject = objFinalBossCutscene;
                        event_user(0);
                    }
                    
                    text = "SILENCE!";
                    textPosition = string_length(text);
                    textDelay = 0;
                    
                    var _snd = audio_play_sound(sndS1ZeusShoot, 0, 0);
                    audio_sound_pitch(_snd, 1.3);
                    audio_sound_gain(_snd, 1.2 * (global.sfxLevel/100 * global.volumeLevel/100), 0);
                    alarm[1] = 65;
                    subMessage = 11.1;
                    break;
                 case 11.1:
                    text = "There's one thing I have to show you.";
                    textPosition = 0;
                    break;
                 case 12:
                    speakerSprite = sprPlayerHead;
                    with (objCutsceneCamera){
                        targetObject = objPlayer;
                        event_user(0);
                    }
                    text = "Random Number Generation!?";
                    textPosition = 0;
                    break;
                 case 12.1:
                    text += "#T-that's impossible!"
                    textPosition ++;
                    break;
                 case 13:
                    speakerSprite = sprScribbleDialogue;
                    with (objCutsceneCamera){
                        targetObject = objFinalBossCutscene;
                        event_user(0);
                    }
                    text = "The game just updated.";
                    textPosition = 0;
                    break;
                 case 13.1:
                    text += "#Check the patchnotes,";
                    textPosition ++;
                    break;
                 case 13.2:
                    text += " Kid."
                    textPosition ++;
                    break;
                 case 14:
                     speakerSprite = sprPlayerHead;
                     with (objCutsceneCamera){
                         targetObject = objPlayer;
                         event_user(0);
                     }
                     
                     text = '"Version 0.76:'
                     textPosition = 0;
                     break;
                 case 14.1:
                     text += ' Add experimental random events"';
                     textPosition ++;
                     break;
                 case 14.2:
                     text += "##Why did the devs have to do that now!?";
                     textPosition += 2;
                     break;
                 case 15:
                     speakerSprite = sprScribbleDialogue;
                     with (objCutsceneCamera){
                         targetObject = objFinalBossCutscene;
                         event_user(0);
                     }
                     
                     text = "So,";
                     textPosition = 0;
                     break;
                 case 15.1:
                    text += " any chance I can get you to#reconsider your stance?";
                    textPosition ++;
                    break;
                 case 16:
                    speakerSprite = sprPlayerHead;
                    with (objCutsceneCamera){
                        targetObject = objPlayer;
                        event_user(0);
                    }
                    
                    text = "Never!";
                    textPosition = 0;
                    textDelay = 1;
                    soundDelay = 1;
                    break;
                 case 17:
                    speakerSprite = sprScribbleDialogue;
                    with (objCutsceneCamera){
                        targetObject = noone;
                        destroyWhenLerped = true;
                        event_user(0);
                    }
                    text = "Then enough talk.";
                    textPosition = 0;
                    break;
                 case 17.1:
                    text += "#Have at you!"
                    textPosition ++;
                    break;
            }
            textLength = string_length(text);        
        }else{
            textDelay = 0;
            switch(subMessage){
                case 0:
                    alarm[1] = 20;
                    subMessage = 0.1;
                    break;
                case 0.1:
                    alarm[1] = 50;
                    subMessage = 1;
                    break;
                case 1:
                    alarm[1] = 18;
                    subMessage = 2;
                    break;
                case 2:
                    alarm[1] = 24;
                    subMessage = 2.1;
                    break;
                case 2.1:
                    alarm[1] = 12;
                    subMessage = 2.2;
                    break;
                case 2.2:
                    alarm[1] = 30;
                    subMessage = 3;
                    break;
                case 3:
                    alarm[1] = 16;
                    subMessage = 3.1;
                    break;
                case 3.1:
                    alarm[1] = 8;
                    subMessage = 3.2;
                    break;
                case 3.2:
                    text += '".'
                    textPosition = string_length(text);
                    alarm[1] = 30;
                    subMessage = 3.3;
                    break;
                case 3.3:
                    alarm[1] = 36;
                    subMessage = 4;
                    break;
                case 4:
                    alarm[1] = 32;
                    subMessage = 4.1;
                    break;
                case 4.1:
                    alarm[1] = 60;
                    subMessage = 5;
                    break;
                case 5:
                    alarm[1] = 30;
                    subMessage = 5.1;
                    break;
                case 5.1:
                    alarm[1] = 40;
                    subMessage = 5.2;
                    break;
                case 5.2:
                    alarm[1] = 40;
                    subMessage = 5.3;
                    break;
                case 5.3:
                    alarm[1] = 32;
                    subMessage = 5.4;
                    break;
                case 5.4:
                    alarm[1] = 14;
                    subMessage = 6;
                    break;
                case 6:
                    alarm[1] = 32;
                    subMessage = 6.1;
                    break;
                case 6.1:
                    alarm[1] = 24;
                    subMessage = 7;
                    break;
                case 7:
                    alarm[1] = 32;
                    subMessage = 7.1;
                    break;
                case 7.1:
                    alarm[1] = 8;
                    subMessage = 7.2;
                    break;
                case 7.2:
                    alarm[1] = 32;
                    text += '"?';
                    textPosition = string_length(text);
                    subMessage = 7.3;
                    break;
                case 7.3:
                    alarm[1] = 12;
                    subMessage = 7.4;
                    break;
                case 7.4:
                    alarm[1] = 12;
                    subMessage = 7.5;
                    break;
                case 7.5:
                    alarm[1] = 36;
                    subMessage = 8;
                    break;
                case 8:
                    alarm[1] = 14;
                    subMessage = 8.1;
                    break;
                case 8.1:
                    alarm[1] = 28;
                    subMessage = 8.2;
                    break;
                case 8.2:
                    alarm[1] = 28;
                    subMessage = 8.3;
                    break;
                case 8.3:
                    alarm[1] = 48;
                    subMessage = 9;
                    break;
                case 9:
                    alarm[1] = 18;
                    subMessage = 9.1;
                    break;
                case 9.1:
                    alarm[1] = 16;
                    subMessage = 9.2;
                    break;
                case 9.2:
                    alarm[1] = 16;
                    subMessage = 9.3;
                    break;
                case 9.3:
                    alarm[1] = 30;
                    subMessage = 9.4;
                    break;
                case 9.4:
                    alarm[1] = 36;
                    subMessage = 10;
                    break;
                case 10:
                    alarm[1] = 32;
                    subMessage = 10.1;
                    break;
                case 10.1:
                    subMessage = 11;
                    event_perform(ev_alarm, 1);
                    break;
                case 11.1:
                    with (objFinalBossCutscene){
                        alarm[1] = 30;
                    }
                    movingUp = true;
                    subMessage = 12;
                    break;
                case 12:
                    alarm[1] = 28;
                    subMessage = 12.1;
                    break;
                case 12.1:
                    alarm[1] = 42;
                    subMessage = 13;
                    break;
                case 13:
                    alarm[1] = 34;
                    subMessage = 13.1;
                    break;
                case 13.1:
                    alarm[1] = 18;
                    subMessage = 13.2;
                    break;
                case 13.2:
                    alarm[1] = 32;
                    subMessage = 14;
                    break;
                case 14:
                    alarm[1] = 42;
                    subMessage = 14.1;
                    break;
                case 14.1:
                    alarm[1] = 18;
                    subMessage = 14.2;
                    break;
                case 14.2:
                    alarm[1] = 36;
                    subMessage = 15;
                    break;
                case 15:
                    alarm[1] = 12;
                    subMessage = 15.1;
                    break;
                case 15.1:
                    alarm[1] = 28;
                    subMessage = 16;
                    break;
                case 16:
                    alarm[1] = 28;
                    subMessage = 17;
                    break;
                case 17:
                    alarm[1] = 28;
                    subMessage = 17.1;
                    break;
                case 17.1:
                    with (objFinalBossCutscene){
                        event_user(0);
                    }
                    movingUp = true;
                    break;
            }
        }
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (movingDown || movingUp){
    lerpVal += pi/50;
    if (lerpVal &gt;= pi/2 &amp;&amp; movingDown){
        lerpVal = pi/2;
        movingDown = false;
    }
    if (lerpVal &gt;= pi &amp;&amp; movingUp){
        if (room != rFinalBoss_1 || subMessage != 12)
            instance_destroy();
        else{
            movingUp = false;
            lerpVal = 0;
        }
    }
    y = lerp(ystart, yTo, sin(lerpVal));
}else{
    if (textPosition &lt; textLength &amp;&amp; textDelay != 0){
        textTimer ++;
        if (textTimer &gt;= textDelay){
            if (textDelay &lt; 1 &amp;&amp; textDelay &gt; 0) textPosition += floor(1/textDelay);
            else textPosition ++;
            if (textPosition &gt;= textLength){
                textPosition = textLength;
                var t_sound = audio_play_sound(sndGeneralDialogue, 0, 0);
                audio_sound_pitch(t_sound, random_range(1, 1.15));
                if (subMessage &gt;= 0 &amp;&amp; room != rGeezerHitchcock){
                    alarm[1] = -1;
                    event_perform(ev_alarm, 1);
                }else{
                    if (room == rGeezer01){
                        alarm[2] = 90;
                    }else{
                        alarm[2] = 60;
                    }
                }
            }
            textTimer = 0;
        }
        if (textTimer mod soundDelay == 0 &amp;&amp; textPosition != textLength){
            var t_sound = audio_play_sound(sndGeneralDialogue, 0, 0);
            audio_sound_pitch(t_sound, random_range(1, 1.15));
        }
    }/*else if ((scrButtonCheckPressed(global.shootButton) || scrButtonCheckPressed(global.jumpButton)) &amp;&amp; alarm[1] &gt; 0 &amp;&amp; room != rGeezerHitchcock){
        alarm[1] = -1;
        event_perform(ev_alarm, 1);
    }*/
}

if (speakerSprite == sprScribbleDialogue){
    speakerIndex = 0.2*global.count;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(global.sharedSurf2)){
    global.sharedSurf2 = surface_create(800, 608);
}
if (surface_exists(global.sharedSurf2)){
    surface_set_target(global.sharedSurf2);
    draw_clear_alpha(c_black, 0);
    
    var _diaX = 75;
    var _boxDim = 74;
    var _boxL = _diaX + 60;
    var _boxR = _boxL + _boxDim;
    var _boxT = y + 21;
    var _boxB = _boxT + _boxDim;
    // Create Box
    draw_sprite(sprMakerDialogueL, 0, _diaX, y);
    draw_sprite_ext(sprMakerDialogueC, 0, _diaX + 140, y, 458, 1, 0, c_white, 1);
    draw_sprite(sprMakerDialogueR, 0, _diaX + 598, y);
    
    // Draw Character
    if (instance_exists(objGeezerBoss)){
        if (!instance_exists(control)){
            with (objGeezerBoss){
                draw_set_color(faceColor);
                draw_rectangle(_boxL, _boxT, _boxR, _boxB, false);
                draw_set_color(c_white);
                //draw_sprite_stretched(sprGeezerFace, 6, _boxL + 2*objGeezerBoss.faceX/7, _boxT + 2*objGeezerBoss.faceY/7, _boxDim, _boxDim);  // drawn along with trail
                
                visible = false;
                event_user(2);  // Geezer face and trail
                visible = true;
                
                var _cent = 112;
                if (surface_exists(global.sharedSurf)){
                    var _surfDim = (2*_cent);
                    var _surfScale = _boxDim/_surfDim;
                    draw_set_colour_write_enable(true, true, true, false);
                    draw_surface_general(global.sharedSurf, 0, 0, _surfDim, _surfDim, _boxL, _boxT, _surfScale, _surfScale, 0, c_white, c_white, c_white, c_white, 1);
                    draw_set_colour_write_enable(true, true, true, true);
                }
            }
        }else if (objGeezerBoss.staticFrames &gt; 0){
            draw_sprite_stretched(sprGeezerStatic, objGeezerBoss.staticIndex, _boxL, _boxT, _boxDim, _boxDim);
        }else{
            draw_sprite_stretched(speakerSprite, speakerIndex, _boxL, _boxT, _boxDim, _boxDim);
        }
        
    }else if (instance_exists(objGeezerSurvival)){
        with (objGeezerSurvival){
            draw_set_color(faceColor);
            draw_rectangle(_boxL, _boxT, _boxR, _boxB, false);
            draw_set_color(c_white);
            draw_sprite_stretched(sprGeezerFace, 6, _boxL + 2*objGeezerSurvival.faceX/7, _boxT + 2*objGeezerSurvival.faceY/7, _boxDim, _boxDim);
            
            visible = false;
            event_perform_object(objGeezerBoss, ev_other, ev_user2);
            visible = true;
            
            var _cent = 112;
            if (surface_exists(global.sharedSurf)){
                var _surfDim = (2*_cent);
                var _surfScale = _boxDim/_surfDim;
                draw_set_colour_write_enable(true, true, true, false);
                draw_surface_general(global.sharedSurf, 0, 0, _surfDim, _surfDim, _boxL, _boxT, _surfScale, _surfScale, 0, c_white, c_white, c_white, c_white, 1);
                draw_set_colour_write_enable(true, true, true, true);
            }
        }
    }else{
        draw_sprite_stretched(speakerSprite, speakerIndex, _boxL, _boxT, _boxDim, _boxDim);
    }
    
    //Text
    if (textPosition &gt;= 1){
        draw_set_halign(fa_center);
        draw_set_valign(fa_top);
        if (!instance_exists(control) &amp;&amp; room == rGeezer01 || room == rGeezerHitchcock){draw_set_color(c_red);}
        else{draw_set_color(c_white);}
        draw_set_font(fDefault12);
        var _len = 87;
        if (!disclaimer){ //Geezer
            var t_str = string_copy(text, 0, floor(textPosition));
            draw_text_ext(_diaX + 369, y + 17, t_str, -1, 416);
        }else{  // pre-Geezer cutscene copyright legal-speak
            var t_str = string_copy(text, 0, min(_len, floor(textPosition)));
            draw_text_ext(_diaX + 369, y + 17, t_str, -1, 416);
            if (textPosition &gt; _len){
                draw_set_font(fDefault10);
                t_str = string_copy(text, (_len+1), floor(textPosition)-_len);
                draw_text_ext(_diaX + 369, y + 50, t_str, 12, 416);
            }
        }
    }
    
    draw_set_color(c_white);
    surface_reset_target();
    
    draw_surface_ext(global.sharedSurf2, view_xview, view_yview, view_wview/800, view_hview/608, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
