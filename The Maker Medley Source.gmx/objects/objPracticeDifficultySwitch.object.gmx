<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerPracticeBuffSwitch</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1301</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ltgray = make_color_rgb(163, 173, 196);
dkgray = make_color_rgb(16, 30, 41);
movementCounter = 0;
movementLength = 48;
buffedTextCol = make_color_rgb(224, 48, 48);

if (!(global.farthestRoomEver &gt; scrGetRoomNum(rStage01Purify))){  // has not unlocked any hard mode fights
    instance_destroy();
}

width = 64;
height = 106;
switchTopY = 32;
switchBotY = height - switchTopY;
switchInteraction = 0;
switchInteractionPrev = 0;
clicked = false;
if (global.practiceModeBuffed){
    switchCurLerpTo = 1;
}else{
    switchCurLerpTo = 0;
}
switchCurLerp = switchCurLerpTo;
switchCurY = lerp(switchTopY, switchBotY, switchCurLerp);

switchWidth = sprite_get_width(sprMakerPracticeBuffSwitch);
switchHeight = sprite_get_height(sprMakerPracticeBuffSwitch);

x = 800;
y = 136;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (movementCounter &lt; movementLength){
    movementCounter = min(movementCounter + 1, movementLength);
    x = 800 - 83*sin(pi/2  *  movementCounter/movementLength);
}

// Switch
// repeated calculations
var _halfSwitchWid = (switchWidth/2);
var _halfSwitchHei = (switchHeight/2);

clicked = (mouse_check_button(mb_left) &amp;&amp; switchInteraction == 2);  // button behavior
if (abs(mouse_x - (x+width/2)) &lt;= _halfSwitchWid &amp;&amp; abs(mouse_y - (y+switchCurY)) &lt;= _halfSwitchHei){
    if (mouse_check_button(mb_left)){
        if (switchInteraction != 2 &amp;&amp; mouse_check_button_pressed(mb_left)){
            switchInteraction = 2;
            clicked = true;
            audio_play_sound_nogroup(sndMakerMenuClick, 0, 0);
        }else if (clicked){
            switchInteraction = 2;
        }else{
            switchInteraction = 1;
        }
    }else{
        if (switchInteraction == 2 &amp;&amp; mouse_check_button_released(mb_left)){
            if (switchCurLerpTo == 0){
                switchCurLerpTo = 1;
                global.practiceModeBuffed = true;
            }else{
                switchCurLerpTo = 0;
                global.practiceModeBuffed = false;
            }
            audio_play_sound_nogroup(sndMakerMenuRelease, 0, 0);
        }else if (switchInteraction == 0){
            audio_play_sound_nogroup(sndMakerMenuSelect, 0, 0);
        }
        switchInteraction = 1;
    }
}else{
    switchInteraction = 0;
}

if (switchCurLerp != switchCurLerpTo){
    switchCurLerp = clamp(switchCurLerp + (1/15)*sign(switchCurLerpTo-switchCurLerp), 0, 1);
}

var _lerpVal;
if (switchCurLerp &lt; 0.5){
    _lerpVal = power(2, (2.4 - 1)) * power(switchCurLerp, 2.4);
}else{
    _lerpVal = 1 - (power(2 * (1-switchCurLerp), 2.4)/2);
}

switchCurY = lerp(switchTopY, switchBotY, _lerpVal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _halfWid = (width/2);  // repeated calculation

draw_set_colour(ltgray);
draw_rectangle(x  -0.5, y  -0.5, x + width  -0.5, y + height  -0.5, false);
draw_sprite_stretched(sprMakerPracticeBuffRed, 0, x, y + (height/2), width, height/2);

//Text
draw_set_color(c_white);
draw_set_font(fDefault12);
draw_set_halign(fa_center);

draw_set_valign(fa_bottom);
scrDrawTextOutline(x + _halfWid, (y + switchTopY) - 10, "Normal", c_white, c_black);
draw_set_valign(fa_top);
scrDrawTextOutline(x + _halfWid, (y + switchBotY) + 14, "Hard", buffedTextCol, c_black);

var _redSubimgOffset = 4;
//Border Edges
if (switchCurLerp &lt; 1){  // not completely covered
    draw_sprite_ext(sprMakerSettingsBorder, 0, x, y  - 8, width/8, 1, 0, c_white, 1);
    draw_sprite_ext(sprMakerSettingsBorder, 0, x, y + height  + 8, width/8, -1, 0, c_white, 1);
    draw_sprite_ext(sprMakerSettingsBorder, 1, x  - 8, y, 1, height/8, 0, c_white, 1);
    draw_sprite_ext(sprMakerSettingsBorder, 1, x + width  + 8, y, -1, height/8, 0, c_white, 1);
}
if (switchCurLerp &gt; 0){  // not completely transparent
    draw_sprite_ext(sprMakerSettingsBorder, 0 + _redSubimgOffset, x, y  - 8, width/8, 1, 0, c_white, switchCurLerp);
    draw_sprite_ext(sprMakerSettingsBorder, 0 + _redSubimgOffset, x, y + height  + 8, width/8, -1, 0, c_white, switchCurLerp);
    draw_sprite_ext(sprMakerSettingsBorder, 1 + _redSubimgOffset, x  - 8, y, 1, height/8, 0, c_white, switchCurLerp);
    draw_sprite_ext(sprMakerSettingsBorder, 1 + _redSubimgOffset, x + width  + 8, y, -1, height/8, 0, c_white, switchCurLerp);
}

//Border Corners
if (switchCurLerp &lt; 1){  // not completely covered
    draw_sprite_ext(sprMakerSettingsBorder, 2, x  - 8, y  - 8, 1, 1, 0, c_white, 1);  // TL
    draw_sprite_ext(sprMakerSettingsBorder, 2, x + width  + 8, y  - 8, 1, 1, 270, c_white, 1);  // TR
    draw_sprite_ext(sprMakerSettingsBorder, 2, x  - 8, y + height  + 8, 1, 1, 90, c_white, 1);  // BL
    draw_sprite_ext(sprMakerSettingsBorder, 2, x + width  + 8, y + height  + 8, 1, 1, 180, c_white, 1);  /// BR
}
if (switchCurLerp &gt; 0){  // not completely transparent
    draw_sprite_ext(sprMakerSettingsBorder, 2 + _redSubimgOffset, x  - 8, y  - 8, 1, 1, 0, c_white, switchCurLerp);  // TL
    draw_sprite_ext(sprMakerSettingsBorder, 2 + _redSubimgOffset, x + width  + 8, y  - 8, 1, 1, 270, c_white, switchCurLerp);  // TR
    draw_sprite_ext(sprMakerSettingsBorder, 2 + _redSubimgOffset, x  - 8, y + height  + 8, 1, 1, 90, c_white, switchCurLerp);  // BL
    draw_sprite_ext(sprMakerSettingsBorder, 2 + _redSubimgOffset, x + width  + 8, y + height  + 8, 1, 1, 180, c_white, switchCurLerp);  /// BR
}

draw_set_color(dkgray);
draw_line_width(floor(x) + _halfWid  - 0.5, (y + (switchTopY - 2))  - 0.5, floor(x) + _halfWid  - 0.5, (y + (switchBotY + 2))  - 0.5, 4);
draw_set_color(c_white);
draw_sprite(sprMakerPracticeBuffSwitch, switchInteraction, x + _halfWid, y + switchCurY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
