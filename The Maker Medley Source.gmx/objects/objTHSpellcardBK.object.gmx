<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCamera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fade = 0;
avoidance = false;
surf = -4;
image_alpha = 0;
failsafeBKColor = make_color_rgb(65, 10, 20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (avoidance){
    if (fade == 1){
        if (image_alpha &lt; 1)
            image_alpha = min(image_alpha+0.025, 1);
    }else{
        if (image_alpha &gt; 0)
            image_alpha = max(image_alpha-0.025, 0);
    }
}else{
    if (fade == 1){
        if (image_alpha &lt; 1)
            image_alpha = min(image_alpha+0.05, 1);
    }else{
        if (image_alpha &gt; 0)
            image_alpha = max(image_alpha-0.05, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _gridAlpha = 0;
if (avoidance){
    draw_set_color(c_dkgray);
    draw_set_alpha(1/3);
    draw_rectangle(64, 32, 544, 576, false);
    draw_set_alpha(1);
    draw_set_color(c_white);
    if (!global.practicing || global.practiceWaypointStart &lt; 8)
        _gridAlpha = 1-image_alpha;
}else
    _gridAlpha = image_alpha;

if (_gridAlpha &gt; 0){
    if (!surface_exists(surf))
        surf = surface_create(480, 544);
    if (surface_exists(surf)){
        surface_set_target(surf);
        draw_clear_alpha(failsafeBKColor, 1);
        if (global.kaleidoscopeEnabled  &amp;&amp; global.extraEffects){
            shader_set(shdKaleidoscope);
            shader_set_uniform_f(global.kaleidoscopeHandle, abs(((global.count/200) mod 8) - 4));
            shader_set_uniform_f(global.kaleidoscopeHandle2, 240, 272);
            draw_background_ext(bkTHKaleidoscope, 0, 0, 480/64, 544/64, 0, c_white, 1);
            shader_reset();
        }
        
        var i, j;
        for(i=-64+(global.count mod 64);i&lt;480;i+=64)
            for(j=-64+(global.count mod 64);j&lt;544;j+=64)
                draw_background(bkTHGrid, i, j);
        surface_reset_target();
        draw_surface_ext(surf, 64, 32, 1, 1, 0, c_white, _gridAlpha);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
