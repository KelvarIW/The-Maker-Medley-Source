<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMakerFruit</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tearSlots = 27;
lowestIndex = 15;
innerStartIndex = 16;
if (x &lt; 150){
    tearRot = irandom_range(0, 30);
}else if (x &gt; 650){
    tearRot = irandom_range(-30, 0);
}else{
    tearRot = irandom_range(-30, 30);
}
spd = 10;
depth = -12;

//Screen-tilting leniency
if (abs(view_angle) &gt; 1){
    y -= 72;
}

//initialize array variables
tearFruitX[tearSlots-1] = 0;
tearFruitY[tearSlots-1] = 0;
tearFruitDir[tearSlots-1] = 0;
tearFruitDist[tearSlots-1] = 0;

tearFruitX[0] = -400 + 38 + 362;tearFruitY[0] = -292 + 164;

tearFruitX[1] = -400 + 38 + 344;tearFruitY[1] = -257 + 164;
tearFruitX[2] = -400 + 38 + 380;tearFruitY[2] = -257 + 164;

tearFruitX[3] = -400 + 38 + 327;tearFruitY[3] = -224 + 164;
tearFruitX[4] = -400 + 38 + 397;tearFruitY[4] = -224 + 164;

tearFruitX[5] = -400 + 38 + 310;tearFruitY[5] = -191 + 164;
tearFruitX[6] = -400 + 38 + 414;tearFruitY[6] = -191 + 164;

tearFruitX[7] = -400 + 38 + 296;tearFruitY[7] = -159 + 164;
tearFruitX[8] = -400 + 38 + 428;tearFruitY[8] = -159 + 164;

tearFruitX[9] = -400 + 38 + 290;tearFruitY[9] = -125 + 164;
tearFruitX[10] = -400 + 38 + 434;tearFruitY[10] = -125 + 164;

tearFruitX[11] = -400 + 38 + 299;tearFruitY[11] = -92 + 164;
tearFruitX[12] = -400 + 38 + 425;tearFruitY[12] = -92 + 164;

tearFruitX[13] = -400 + 38 + 325;tearFruitY[13] = -73 + 164;
tearFruitX[14] = -400 + 38 + 399;tearFruitY[14] = -73 + 164;

tearFruitX[15] = -400 + 38 + 362;tearFruitY[15] = -60 + 164;

//inner tear

tearFruitX[16] = -400 + 38 + 362;tearFruitY[16] = -217 + 164;

tearFruitX[17] = -400 + 38 + 352;tearFruitY[17] = -194 + 164;
tearFruitX[18] = -400 + 38 + 372;tearFruitY[18] = -194 + 164;

tearFruitX[19] = -400 + 38 + 339;tearFruitY[19] = -174 + 164;
tearFruitX[20] = -400 + 38 + 385;tearFruitY[20] = -174 + 164;

tearFruitX[21] = -400 + 38 + 333;tearFruitY[21] = -154 + 164;
tearFruitX[22] = -400 + 38 + 391;tearFruitY[22] = -154 + 164;

tearFruitX[23] = -400 + 38 + 337;tearFruitY[23] = -132 + 164;
tearFruitX[24] = -400 + 38 + 387;tearFruitY[24] = -132 + 164;

tearFruitX[25] = -400 + 38 + 352;tearFruitY[25] = -111 + 164;
tearFruitX[26] = -400 + 38 + 372;tearFruitY[26] = -111 + 164;

for (var i = 0; i &lt;= (tearSlots-1); i ++){
    tearFruitDir[i] = point_direction(0, 0, tearFruitX[i], tearFruitY[i]);
    tearFruitDist[i] = point_distance(0, 0, tearFruitX[i], tearFruitY[i]);
}

image_speed = 0;
expand = false; //for the transition to the "DELETE HIM!" section.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 2 + (global.count mod 30)/15;

if (expand){
    image_xscale += 0.2;
    image_yscale = image_xscale;
    image_alpha -= 0.1;
    if (image_alpha &lt;= 0)
        instance_destroy();
}else{
    for (var i = 0; i &lt;= (tearSlots-1); i ++){
        if (place_meeting(x+lengthdir_x(tearFruitDist[i], tearFruitDir[i] + tearRot), y+lengthdir_y(tearFruitDist[i], tearFruitDir[i] + tearRot), objPlayer)){
            scrKillPlayer();
        }
    }
    if (!global.dead &amp;&amp; spd &gt; 0){
        x += spd * dcos(tearRot + 270);
        y += spd * (-dsin(tearRot + 270));
        if (y &gt;= 504){  // accounts for screen tilting leniency
            spd -= 0.2;
        }
        if (spd &lt;= 0){
            var _targetX = x+lengthdir_x(tearFruitDist[lowestIndex] + 64, tearFruitDir[lowestIndex] + tearRot);
            var _targetY = y+lengthdir_y(tearFruitDist[lowestIndex] + 64, tearFruitDir[lowestIndex] + tearRot);
            for (var i = 0; i &lt;= (tearSlots-1); i ++){
                if (buff() || (i == 0 || i == 3 || i == 4 || i == 7 || i == 8 || i == 11 || i == 12 || i == 15 || i == 16 || i == 19 || i == 20 || i == 23 || i == 24)){
                    with (instance_create(roundSane(x + lengthdir_x(tearFruitDist[i], tearFruitDir[i] + tearRot)), roundSane(y + lengthdir_y(tearFruitDist[i], tearFruitDir[i] + tearRot)), objFinalYoyoFruit)){
                        indexBase = 2; //orange
                        image_index = indexBase + (global.count mod 30) div 15;
                        direction = point_direction(_targetX, _targetY, x, y);
                        
                        //"squish" direction vector vertically relative to unrotated tear
                        var _xComp, _yComp;
                        _xComp = dcos(direction - other.tearRot);
                        _yComp = (-dsin(direction - other.tearRot));
                        direction = point_direction(0, 0, _xComp*2, _yComp/2,) + other.tearRot;
                        //if (buff()){
                            direction += random_range(-8, 8);
                        //}
                        speed = lerp(8.4, 6.5, point_distance(_targetX, _targetY, x, y) / 232);
                        
                        gravity = 0.25; //0.115;
                        gravity_direction = other.tearFruitDir[other.lowestIndex] + other.tearRot;
                        depth = other.depth;
                        
                        index = -1; //doesn't do anything special
                    }
                }else{
                    with (instance_create(x + roundSane(lengthdir_x(tearFruitDist[i], tearFruitDir[i] + tearRot)), y + roundSane(lengthdir_y(tearFruitDist[i], tearFruitDir[i] + tearRot)), objFinalYoyoFruit)){
                        indexBase = 2; //orange
                        image_index = other.image_index;
                        depth = other.depth;
                        
                        /*if (buff()){
                            speed = random_range(7.5, 10.4);
                            direction = random_range(40, 140) + (other.tearRot+270);
                            gravity = 0.25; //0.115;
                            gravity_direction = other.tearFruitDir[other.lowestIndex] + other.tearRot;
                        }else{*/
                            alphaDec = 1/20;
                            nokill = true;
                        //}
                    }
                }
            }
            audio_play_sound(sndMakerSampleGlass, 0, 0);
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (expand){
    for (var i = 0; i &lt;= (tearSlots-1); i ++){
        draw_sprite_ext(sprite_index, image_index, roundSane(x + lengthdir_x(tearFruitDist[i], tearFruitDir[i] + tearRot)), roundSane(y + lengthdir_y(tearFruitDist[i], tearFruitDir[i] + tearRot)), image_xscale, image_yscale, 0, c_white, image_alpha);
    }
}else{
    for (var i = 0; i &lt;= (tearSlots-1); i ++){
        draw_sprite(sprite_index, image_index, roundSane(x + lengthdir_x(tearFruitDist[i], tearFruitDir[i] + tearRot)), roundSane(y + lengthdir_y(tearFruitDist[i], tearFruitDir[i] + tearRot)));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
