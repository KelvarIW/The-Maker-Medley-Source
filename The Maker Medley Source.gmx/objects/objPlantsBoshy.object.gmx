<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlantsBoshyIdle</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objPlantsEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
airborne = true;
squaresMax = 3.5;
squares = clamp((xstart-208)/64, 0, squaresMax);  // when thrown
throwAmp = 64 - (32 * squares/squaresMax);  // vertical
throwXDist = 32*squares + 48;  // horizontal
// where to land
destX = xstart - throwXDist;
destYDiff = 28;
destY = y + destYDiff;
hp = 5;
image_xscale = 2;
image_yscale = 2;

run = true;
shooting = noone;
shootCycleLen = 60;
shootTimer = 1.6*shootCycleLen;
idleShootRecoverDelay = 10;
shootRunMult = 1;
shootIdleMult = 4/3;

inheritAttacking = false;  // does not use default attack behavior
plantSearchDist = 96;
plantSearchIdleMult = 2;
pushWeightMult = 1.6;

throwTimer = 0;
throwTimerInc = 2 - floor(squares)/5;
throwTimeMidline = 64;
// throwTimer needs to stop when:
// (-sin(throwTimer * pi / throwTimeMidline)) * throwAmp  ==  destYDiff
var _a, _b;
_a = destYDiff/throwAmp;
_b = (-arcsin(-_a)) * throwTimeMidline/pi;
throwTimerMax = throwTimeMidline + _b;
//show_debug_message("_b: " + string(_b) + " ;  throwTimerMax = " + string(throwTimerMax));

//death effect
scrPlantsGoreInit(18);
drawText = true;
textY = 9;
textSprite = sprPlantsBoshyDamnit; //choose(sprPlantsBoshyDamnit, sprPlantsBoshyNya);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove text
drawText = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!frozen &amp;&amp; dead &amp;&amp; drawText){
    if (abs(textY) &gt; 0.25){
        textY = -(textY - sign(textY)/4);
    }
}

//Game Over animation
if (killing &amp;&amp; instance_exists(objPlantsBoshyKillingSpider)){
    if (y &lt;= objPlantsBoshyKillingSpider.y  &amp;&amp;  bbox_right &gt;= objPlantsBoshyKillingSpider.bbox_left  &amp;&amp;  bbox_left &lt;= objPlantsBoshyKillingSpider.bbox_right){
        event_user(2);
    }
}

scrPlantsEnemyStepEnd(!drawText);  // wait for the text to disappear before removing boshy, even if the blood is gone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrPlantsEnemyStep();

if (!frozen &amp;&amp; !dead){
    if (airborne){
        throwTimer += throwTimerInc;
        
        if (throwTimer &gt;= throwTimerMax){
            x = destX;
            y = destY;
            image_angle = 0;
            
            airborne = false;
        }else{
            x = lerp(xstart, destX, throwTimer/throwTimerMax);
            image_angle = lerp(-45, (3*360), throwTimer/throwTimerMax);
            y = ystart - throwAmp * sin(throwTimer*pi/64);
        }
    }else if (pushAmt &lt;= 0 &amp;&amp; (!killing || (killing &amp;&amp; killingState &gt;= 1))){
        event_user(7);  // movement cycles  + shooting
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement cycles  + shooting
if (!(frozen || dead)){
    //delay timers
    if (shootTimer &gt; 0){
        if (run){
            shootTimer -= shootRunMult;
        }else{
            shootTimer -= shootIdleMult;
        }
    }
    
    scrPlantsGuyBoshyAttack();  // shooting
        
    if (run){
        sprite_index = sprPlantsBoshyRunning;
        image_index += 1/4;
        
        x -= 1.75;
    }else{
        sprite_index = sprPlantsBoshyIdle;
        image_index += 1/10;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Over `killing` animation
if (killingState == 0){
    sprite_index = sprPlantsBoshyIdle;
    airborne = false;
    image_index = 0;
}else if (killingState == 1){
    with (objPlantsPlayerCage){
        instance_create(x, 0, objPlantsBoshyKillingSpider);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadow
if (!dead){
    if (airborne)
        draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, ystart+24+18, 18/33*(1-(ystart-y)/96), 3/5*18/21*(1-(ystart-y)/96), 0, c_white, 1-(ystart-y)/96);
    else
        draw_sprite_ext(sprPlantsShadow, 0, x-view_xview, bbox_bottom-4, 18/33, 3/5*18/21, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boshy does not follow typical enemy attacking behavior
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead){
    if (killing){
        killing = false;
        event_inherited();
        killing = true;
    }else{
        event_inherited();
    }
    
    alarm[0] = 60;
    /*if (textSprite == sprPlantsBoshyDamnit){
        audio_play_sound(sndPlantsBoshyDamnit, 0, 0);
    }else{
        audio_play_sound(sndPlantsBoshyNyaTheHell, 0, 0);
    }*/
    textSprite = sprPlantsBoshyDamnit;
    audio_play_sound(sndPlantsBoshyDamnit, 0, 0);
    audio_play_sound(sndDeath, 0, 0);
    
    if (!crushed){
        for(var i=0;i&lt;18;i++){
            gore[i] = instance_create(x, y, objPlantsBoshyBlood);
            gore[i].yBase = destY + irandom_range(12, 18);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _glowAlpha = 0;
if (glowFrame &gt; 0){
    _glowAlpha = scrPlantsGlow(glowFrame, glowLen);
}

if (!dead || crushed){
    scrPlantsCrushStart(64, 119);
    if (!airborne){
        draw_sprite_ext(sprite_index, image_index mod (image_number/2), floor(x), floor(y), 2, 2, 0, c_white, 1);
        if (_glowAlpha &gt; 0){
            draw_sprite_ext(sprite_index, image_index mod (image_number/2) + image_number/2, floor(x), floor(y), 2, 2, 0, c_white, _glowAlpha);
        }
    }else if (!dead){
        draw_sprite_ext(sprPlantsBoshyIdle, (image_index mod 2), floor(x), floor(y), 2, 2, image_angle, c_white, 1);
        if (_glowAlpha &gt; 0){
            draw_sprite_ext(sprPlantsBoshyIdle, (image_index mod 2), floor(x), floor(y), 2, 2, image_angle, c_white, _glowAlpha);
        }
    }
    scrPlantsCrushEnd(crushTimer);
}
event_inherited();
if (dead &amp;&amp; drawText &amp;&amp; textSprite &gt; 0){
    draw_sprite(textSprite, 0, floor(x)+9, floor(y)-18+textY);
}

/*
// Shoot timers
draw_set_halign(fa_center);
draw_set_valign(fa_bottom);
draw_text(x, bbox_top - 64, "Run: "  + string(runShootTimer));
draw_text(x, bbox_top - 32, "Idle: " + string(idleShootTimer));
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
